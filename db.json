{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/img/bg/bg-人物-动漫-动漫壁纸.png","path":"img/bg/bg-人物-动漫-动漫壁纸.png","modified":1,"renderable":0},{"_id":"source/img/bg/bg-人物剪影.png","path":"img/bg/bg-人物剪影.png","modified":1,"renderable":0},{"_id":"source/img/bg/bg-人物壁纸-少女.png","path":"img/bg/bg-人物壁纸-少女.png","modified":1,"renderable":0},{"_id":"source/img/bg/bg-剑客-水墨.png","path":"img/bg/bg-剑客-水墨.png","modified":1,"renderable":0},{"_id":"source/img/bg/bg-海景.png","path":"img/bg/bg-海景.png","modified":1,"renderable":0},{"_id":"source/img/my/logo.jpg","path":"img/my/logo.jpg","modified":1,"renderable":0},{"_id":"source/img/my/小埋1.jpg","path":"img/my/小埋1.jpg","modified":1,"renderable":0},{"_id":"source/img/my/小埋2.jpg","path":"img/my/小埋2.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"118d86b7d194be3808336cbc80a66f4031a4022b","modified":1739717286820},{"_id":"source/_posts/Redis.md","hash":"dfe6597158f4c550b9133d987adfd171b493f86f","modified":1742437420335},{"_id":"source/_posts/Java基础复盘.md","hash":"26d49e4b4b4b3da2000a7fd2ef5897bb2cb3d15f","modified":1740625708563},{"_id":"source/_posts/c++STL.md","hash":"3518ee652da090c3f84f7d18f0fa6837e58b45d8","modified":1742894604694},{"_id":"source/_posts/spring.md","hash":"688e43a78accc96416f5936777398c255fa94b4f","modified":1744814078399},{"_id":"source/_posts/关于本站.md","hash":"c322f35a72d077a016d44888ee01f4b70020bc7a","modified":1740625687242},{"_id":"source/_posts/springboot_xushu.md","hash":"0fca66d1f3ed17d083da8bd703e41dfce8fcf09d","modified":1741052812082},{"_id":"source/_posts/刷题日记3.19.md","hash":"ca8bfb4542d7b8c3d51673de52506716c0215cd1","modified":1742483630468},{"_id":"source/_posts/刷题日记2.26.md","hash":"5f24b74d563c9a0202ddd6164ef8c3229f93a1a0","modified":1740586007328},{"_id":"source/_posts/刷题日记3.23.md","hash":"b1466d3cbe2a1a7a8df78dc66fcc586aa01d9dd6","modified":1742752801646},{"_id":"source/_posts/刷题注意事项.md","hash":"33afc4fb6dde370ee3aca23aad94b58962d8b990","modified":1740625844512},{"_id":"source/_posts/刷题日记4.02.md","hash":"6d829eea14e8a2875a6e2dd9aee08afb9de1bb53","modified":1743609170718},{"_id":"source/_posts/刷题日记4.07-4.10.md","hash":"374e799941c9807a1658646335b69be1411c448d","modified":1744298568957},{"_id":"source/_posts/刷题日记4.03.md","hash":"1a2b966f1fce9852dc7b6c3035afb16008947255","modified":1743789607625},{"_id":"source/_posts/刷题日记4.04.md","hash":"096503de1082d090c10294e8f511907b0a8286c3","modified":1743836301534},{"_id":"source/_posts/图片显示测试.md","hash":"738a14cf881fcab71a22c90943c31c550cb24ae8","modified":1739716919653},{"_id":"source/_posts/我的第一篇文章.md","hash":"791d5bfc76ad594a9012955c7f53715fc1d35029","modified":1739716907688},{"_id":"source/_posts/操作系统.md","hash":"c5b4cae8bcc364b355a42c9c44356aae41cf3cd5","modified":1740209294438},{"_id":"source/_posts/编译原理.md","hash":"10b5d2617b130fbe340bc40c7ad6690f8fb07a38","modified":1740810338522},{"_id":"source/_posts/苍穹外卖.md","hash":"cc9213cc06cdc047bb3f6864353cef2cdf5f0105","modified":1742437410419},{"_id":"source/about/index.md","hash":"df96a2108c1b1d6fd18718cb34b2d2fe239d71a7","modified":1744697655458},{"_id":"source/_posts/计算机科学记录.md","hash":"8093314a3a4c892de427ffad261208a1321cbc6d","modified":1740151213877},{"_id":"source/css/footer.css","hash":"4a9d09b36d0f8a2fea1d558a46c84038edc989bd","modified":1739453371484},{"_id":"source/css/progress_bar.css","hash":"4f7b75f8dc9bd55b4c0bde6b806e85de2fa1fa16","modified":1740623994528},{"_id":"source/css/custom.css","hash":"2bf80cd782c34f7df7a847469ea0aea0c282b4db","modified":1740625244522},{"_id":"source/css/universe.css","hash":"e0fc94d45e3147970c9f30663f7bec21cdd9ec92","modified":1739597919605},{"_id":"source/link/index.md","hash":"c1cdb0319dc1b3d30c48711c4f1c4b2576aa83bf","modified":1739717098871},{"_id":"source/categories/index.md","hash":"23027a320ab3280c337d105e7d6a647724757968","modified":1739717047358},{"_id":"source/js/footer.js","hash":"a660b462f1261712e5974329cc7c622666e0b8ba","modified":1739452851156},{"_id":"source/comments/index.md","hash":"1306434d2f0fe20469f2027b69749fe2fb6c985a","modified":1739595856035},{"_id":"source/js/universe.js","hash":"ea22ec4b15698ad46493cf57cb3809cfae4bbf3d","modified":1739597541203},{"_id":"source/works/index.md","hash":"c43f38f00b60351123ef1b2e744d57ed33e56e80","modified":1739431111900},{"_id":"source/movies/index.md","hash":"eba2323c84120b6f557f510a0a95ab27eab6ceb6","modified":1739439065195},{"_id":"source/tags/index.md","hash":"346dff66ea100bfff9bcc54f2f1bfceaf425c10e","modified":1739717061799},{"_id":"source/music/index.md","hash":"d22fb592e447f974bbbfcddae37703a4280f1b60","modified":1739430853107},{"_id":"source/_posts/Java基础复盘/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207211115238.png","hash":"c86f78a236a7980a4a8a51d1432fba6d2dafb8bd","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207212537344.png","hash":"5182e1f9bac79d177a285abef70fb75b1896aaaa","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207222214122.png","hash":"a48b0b1d3d759fc8c512a4325ce0ba38186c90e4","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250220105056954.png","hash":"dee06e3aaf2c51ccfe0aa27bddd02570bae9f521","modified":1740019856971},{"_id":"source/_posts/Java基础复盘/image-20250223200310462.png","hash":"fbd6db786652de0182a96cc5b24e2275d3c12470","modified":1740312190477},{"_id":"source/_posts/Java基础复盘/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/_posts/spring/5HN8GKQywWaYvrF.webp","hash":"d2fe0e2106245674a9cb15eddf0c6a1f2eb4e5a8","modified":1744812051712},{"_id":"source/_posts/spring/5Id43xPneJiWfZs.webp","hash":"be91bdd59cb7ab27c313bf0b771e8309abaf1340","modified":1744813082776},{"_id":"source/_posts/spring/6c0706d0b1875bec9cfac6620612da5d.png","hash":"1e315765bc2ac331f1c9209913cd4a6ba801cf93","modified":1744693730364},{"_id":"source/_posts/spring/GWIyPDOaK4TAM1N.webp","hash":"e8c2f82951039e1808fc550a8b23625f83b2fad3","modified":1744812970638},{"_id":"source/_posts/spring/QIBRwScq6fu4XDm.webp","hash":"703e7dd7538673bc51bb47bec3f07be8f6363063","modified":1744812510884},{"_id":"source/_posts/spring/SQTchJBq4G8NWyC.webp","hash":"ea734d1323c6b9c90477a16a643ffc38dd4abf57","modified":1744812587260},{"_id":"source/_posts/spring/SyDkvOldB7ETW4z.webp","hash":"86a53578d734f0ad53f1994ae39f1717fec09c13","modified":1744813082452},{"_id":"source/_posts/spring/ih1Af7xBdX3ebaG.webp","hash":"b674b3a0e0cf9e457faf7ad97779b72e6e7977cd","modified":1744813082835},{"_id":"source/_posts/spring/evKArqDYcIQPCXT.webp","hash":"dae79f5fe2cf3524535f46f5ef0411ca94c45409","modified":1744812510925},{"_id":"source/_posts/spring/l8HzN7Rwthqrim5.webp","hash":"26dfda324cc4b18ddcd632b0b2fd540fee6f4913","modified":1744813082816},{"_id":"source/_posts/spring/rgl7fXJ2ZKAU8Rd.webp","hash":"f0e5fbdde01698ba8f9634bf5268546730133127","modified":1744812510923},{"_id":"source/_posts/我的第一篇文章/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/_posts/刷题日记4.05/020e46f55824918e845cf09cdcf9e4d7853d3223.png","hash":"020e46f55824918e845cf09cdcf9e4d7853d3223","modified":1743838551921},{"_id":"source/_posts/刷题日记4.05/355fee5161a1808ee95ea5dc6d815d4071657131-1743838551748-4.png","hash":"355fee5161a1808ee95ea5dc6d815d4071657131","modified":1743838551834},{"_id":"source/_posts/刷题日记4.05/355fee5161a1808ee95ea5dc6d815d4071657131.png","hash":"355fee5161a1808ee95ea5dc6d815d4071657131","modified":1743838512504},{"_id":"source/_posts/图片显示测试/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1739280804000},{"_id":"source/_posts/图片显示测试/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/_posts/苍穹外卖/image-20250304144540830.png","hash":"ed537feefe84e7070b6c30c0834d90602392d230","modified":1741070740855},{"_id":"source/_posts/苍穹外卖/image-20250304173525566.png","hash":"dcfb0d41194924aa746f5f5e81e360a6281bd5f7","modified":1741080925573},{"_id":"source/_posts/苍穹外卖/image-20250304173636208.png","hash":"44e6f82d26b58074ebdb250ae9d47e5030a88201","modified":1741080996237},{"_id":"source/_posts/编译原理/image-20250221230151097.png","hash":"cbf12c4c6c2e4ae951180d5db8d4a2049e254a0b","modified":1740150111118},{"_id":"source/img/my/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/img/my/小埋1.jpg","hash":"255f5431c3d1ee89340776dab1dbb8922efbf10c","modified":1739280804000},{"_id":"source/img/my/小埋2.jpg","hash":"a56b44d26bbde53d57757e2c441624516125f02f","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207203153099.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207202641150.png","hash":"9e20ced6fb1a1a693fb232b04a31fb43d28f5ae9","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207203028138.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250216222117731.png","hash":"34fc2f47dd828ce6c762d0276c2017070f18e568","modified":1739715677778},{"_id":"source/_posts/Java基础复盘/image-20250207230001660.png","hash":"04cd0052bec9e3068acf7239e48c6e93ae105dd4","modified":1739280804000},{"_id":"source/_posts/spring/0a4cf6d3f9cb9a73593e73fbf29b4758.png","hash":"07192d3bd36b74125737a3b7bdf7dbd736ef03b6","modified":1744693709181},{"_id":"source/_posts/spring/KzSUJXa4jBfO9rd.webp","hash":"fd9e00087a7a593c29eb306356f9400749f8f4a9","modified":1744813082978},{"_id":"source/_posts/spring/image-20250415134033090.png","hash":"466d01dcd78eac3608114c6ae614be4dcaf38ee7","modified":1744695633117},{"_id":"source/_posts/刷题日记2.26/image-20250226225152860.png","hash":"0dde3c0bc50764b1aa61dfdffe513fb81bc6d226","modified":1740581512906},{"_id":"source/_posts/刷题日记2.26/image-20250226225220869.png","hash":"48b66483e539131bcbf38d8bb2fabc7a9a3a2e04","modified":1740581540902},{"_id":"source/_posts/刷题日记3.19/image-20250319185048652.png","hash":"bac5234504e41ae14f6575a0f9d3fe2ac84f0b8e","modified":1742381448676},{"_id":"source/_posts/刷题日记3.19/image-20250319222721615.png","hash":"0b6dcec873c5ffed273d467d37094cfdb79dc3c8","modified":1742394441647},{"_id":"source/_posts/操作系统/image-20250218154211332.png","hash":"c4c283ccade64a751d5114a2d58f4b4fb7a5dea5","modified":1739864531362},{"_id":"source/img/bg/bg-人物剪影.png","hash":"1f66361529d6427438697716a868381d81d17e70","modified":1744298930746},{"_id":"source/_posts/苍穹外卖/image-20250303174432365.png","hash":"fee7977abda76f415bb07b90d57b2fa9a91bbda5","modified":1742436781461},{"_id":"source/_posts/苍穹外卖/image-20250304131843059.png","hash":"672bdb6c8c1de4630ecba6ad56920af284e28ef6","modified":1741065523101},{"_id":"source/_posts/苍穹外卖/image-20250304151310618.png","hash":"9a002a5fd3536287c4a0595bc0882a7f32c81487","modified":1741072390681},{"_id":"source/_posts/苍穹外卖/image-20250304144607548.png","hash":"9a002a5fd3536287c4a0595bc0882a7f32c81487","modified":1741070767613},{"_id":"source/_posts/编译原理/image-20250228150731110.png","hash":"578ce85e9d8b866fdb795ee513944a73d1422986","modified":1740726451126},{"_id":"source/_posts/Java基础复盘/image-20250220122408100.png","hash":"28b4a9f3ca198aec1b0a7c25f9e199b3fafbb576","modified":1740025448166},{"_id":"source/_posts/Redis/image-20250313125814412.png","hash":"4f13ab020eac824709ed1eb768b908a2301d2fd3","modified":1742436710552},{"_id":"source/_posts/Redis/image-20250316134410583.png","hash":"3dab0453763aafac5b90f6f6e4e0095c1182b37c","modified":1742436710551},{"_id":"source/_posts/spring/1010726-20190908042152777-1895820426.png","hash":"a629af060ee9be28c1e7cd48973f668e56e99bc5","modified":1744688231567},{"_id":"source/_posts/spring/image-20250415113934007.png","hash":"dde24cacdb20e086bb4aec7c2b1dd2157a2b3ad2","modified":1744688374080},{"_id":"source/_posts/spring/image-20250415134331010.png","hash":"31b47dbd443681c22c5c228263127a734ca42509","modified":1744695811048},{"_id":"source/_posts/计算机科学记录/image-20250219192411375.png","hash":"3b4d8ba29237f7786f58efd6d3fe7e8de21989c2","modified":1739964251453},{"_id":"source/_posts/苍穹外卖/image-20250304150949048.png","hash":"cb7871f76a9dad09fc29b34919433da69e77fd5b","modified":1741072189150},{"_id":"source/_posts/苍穹外卖/image-20250309160847232.png","hash":"832bf16fdfe4c0febe01426bf7de661fef497513","modified":1741507727269},{"_id":"source/_posts/编译原理/image-20250228232725709.png","hash":"8aaac157bb8e13b641f02a7df97f12f7ff8816f2","modified":1740756445738},{"_id":"source/_posts/Java基础复盘/image-20250216221349436.png","hash":"d9306810aa7c6e01d5b49ab53d590b3347787e20","modified":1739715229505},{"_id":"source/_posts/Java基础复盘/image-20250222224319340.png","hash":"17108c5fd7d2e90f41917f0fb4f78a7c682fe43a","modified":1740235399462},{"_id":"source/_posts/Java基础复盘/image-20250223191142600.png","hash":"b63e4d6f2ab18477eca7f0cc969cf8850a9bd0ed","modified":1740309102689},{"_id":"source/_posts/Java基础复盘/image-20250223201933145.png","hash":"b9c28be8c214fbde56ee6e88080210de8c4b5d1e","modified":1740313173177},{"_id":"source/_posts/Java基础复盘/image-20250223163956807.png","hash":"41c8b39cc33d86f8317cfac10fc01f72f3b801d6","modified":1740299996934},{"_id":"source/_posts/Java基础复盘/image-20250223201954533.png","hash":"9d99ff43a0df5ec0f212900f10c058f8d1186918","modified":1740313194591},{"_id":"source/_posts/图片显示测试/image.png","hash":"60d56aea7bbb09d8e7b8804ac81508387ca06d04","modified":1739280804000},{"_id":"source/_posts/计算机科学记录/image-20250219192653645.png","hash":"095f88ea7023c867a9cb7bccfe7424518c2a27a9","modified":1739964413734},{"_id":"source/_posts/计算机科学记录/image-20250219192931677.png","hash":"5703b38e3f85a4a7a167280476bcfa5dc07f139e","modified":1739964571751},{"_id":"source/_posts/编译原理/1740148009384.jpg","hash":"b825a513916ab1982d7fe6f2dc225ba7bd2da5fa","modified":1740148897154},{"_id":"source/_posts/编译原理/image-20250228194515565.png","hash":"0dd8ed168930daf9ad71e3163b383400cce2a1a3","modified":1740743115607},{"_id":"source/_posts/编译原理/image-20250228213802223.png","hash":"83249560b5d77764a0ba39df1d9fd9fc75e12b01","modified":1740749882255},{"_id":"source/_posts/Java基础复盘/image-20250222224835797.png","hash":"237dd8153bb9b7b9b1c4bc089e192e88ff11c7e5","modified":1740235715828},{"_id":"source/_posts/Java基础复盘/image-20250222225338830.png","hash":"aa72d91efe4a12ee4c111075e01de01e1791493a","modified":1740236018917},{"_id":"source/_posts/Redis/image-20250316132341779.png","hash":"61cdf64ef6e80c59f323c1ac40602c5cbbcefa68","modified":1742436710552},{"_id":"source/_posts/Redis/image-20250316135458506.png","hash":"636c4bccc4b3aceb5aa165141c6860641b56f14c","modified":1742436710554},{"_id":"source/_posts/计算机科学记录/image-20250219192740802.png","hash":"942abf8139420f890e36fd6700ac7ed3006e48e9","modified":1739964460917},{"_id":"source/_posts/编译原理/image-20250227152023060.png","hash":"600449ac9e1f642361b7bd0e6e20d09b2c870ec9","modified":1740640823108},{"_id":"source/_posts/编译原理/image-20250227152807156.png","hash":"43905ab863b41c14e2af2121978f7d66e96b89d2","modified":1740641287207},{"_id":"source/_posts/编译原理/image-20250227153008093.png","hash":"7e7ff002cf738acb151a7c8e4981f57fb7dd0aca","modified":1740641408140},{"_id":"source/_posts/编译原理/image-20250228145643174.png","hash":"44519b6c6b32119dbbe1816db111268717d450c8","modified":1740725803211},{"_id":"source/_posts/编译原理/image-20250228194206882.png","hash":"e9356ad82490d6ea247b082c29d147a567832089","modified":1740742926924},{"_id":"source/_posts/编译原理/image-20250228214909259.png","hash":"b2d73f66b225aef5713688158aeff6d927a49f9c","modified":1740750549309},{"_id":"source/_posts/编译原理/image-20250228232506318.png","hash":"d2f63693d7936868f2fabb7114f53a9af8c04b35","modified":1740756306363},{"_id":"source/_posts/Java基础复盘/image-20250220123104283.png","hash":"9ada20bc80bec04b67b27038b6451b64b9d0ddf0","modified":1740025864400},{"_id":"source/_posts/Redis/image-20250316133144948.png","hash":"a76830f6e59fb154ab28b3fbc3096c8a3be882f8","modified":1742436710554},{"_id":"source/_posts/编译原理/image-20250227151247399.png","hash":"231139151681b344875b0f848770dc47389f7830","modified":1740640367453},{"_id":"source/_posts/编译原理/image-20250227151841607.png","hash":"165b708b93c8c74040be9242f71f84fba6e4c232","modified":1740640721659},{"_id":"source/_posts/编译原理/image-20250227152321173.png","hash":"fa6503872ff32fb73ace2755c99c8dee0a14def3","modified":1740641001226},{"_id":"source/_posts/编译原理/image-20250228150333188.png","hash":"d4d1ea4507aa79987613f1dc0d71e8031301ecf5","modified":1740726213250},{"_id":"source/_posts/编译原理/image-20250228150433021.png","hash":"06e84b8eb8de71b2500e93c47fd70bfd81ef5cfc","modified":1740726273083},{"_id":"source/_posts/编译原理/image-20250228194128221.png","hash":"4079f822e0b8ca83d8ddbaaa01516b29f2e46570","modified":1740742888279},{"_id":"source/_posts/编译原理/image-20250228213348367.png","hash":"f764186666a3f1910ebf4e060d1e5a7359b53f99","modified":1740749628460},{"_id":"source/_posts/编译原理/image-20250228214703417.png","hash":"8e394b1c34af290b221822e88c85005231d5442e","modified":1740750423482},{"_id":"source/_posts/编译原理/image-20250228232627479.png","hash":"753e099723996f654418821dba70f83c9db3c2c9","modified":1740756387564},{"_id":"source/_posts/编译原理/image-20250228232857300.png","hash":"0d162c7e7d71f89f01202f06b2d3abcb7877b46d","modified":1740756537343},{"_id":"source/_posts/Redis/image-20250313121938596.png","hash":"8464072e1cf23892820cb7f6aef5f42a6b211194","modified":1742436710554},{"_id":"source/img/bg/bg-剑客-水墨.png","hash":"e5e24ac005ef3e467b3aa7a72787942bb4a84a5e","modified":1739435574381},{"_id":"source/_posts/计算机科学记录/image-20250219192840808.png","hash":"270ee6ad417af19dd0acdcb74ffc32b0f0f1a3f3","modified":1739964520953},{"_id":"source/_posts/编译原理/image-20250228145227529.png","hash":"fd3f17665b7c536c47f287509c073e24fb4687db","modified":1740725547595},{"_id":"source/_posts/编译原理/image-20250228145123531.png","hash":"93dbdc8cf7f7a61e76aaa5bfbfc07a1503cfc241","modified":1740725483601},{"_id":"source/_posts/编译原理/image-20250228145901690.png","hash":"2ac22bf68914f091a6ed3f70d4688fabdeb4559f","modified":1740725941755},{"_id":"source/_posts/编译原理/image-20250228150052444.png","hash":"7762acf361046a852839b615caed94d79e91ee3f","modified":1740726052542},{"_id":"source/_posts/编译原理/image-20250228213653344.png","hash":"f2771ed1bafbe55aa6afaaefeed41e11fe4f773b","modified":1740749813427},{"_id":"source/_posts/编译原理/image-20250228213930767.png","hash":"366c11469faa189d45f9372c05599cf8bcf372c1","modified":1740749970833},{"_id":"source/_posts/编译原理/image-20250228214223449.png","hash":"47dbf961e177f9a73c0fcbda69204b325a9584d3","modified":1740750143523},{"_id":"source/_posts/编译原理/image-20250228215437342.png","hash":"5225b02165f1660d7139127c50e49c8acdde8727","modified":1740750877419},{"_id":"source/_posts/编译原理/image-20250228232533260.png","hash":"f83048a1c7b36a3787ac601f21e958ab0cb68a7e","modified":1740756333338},{"_id":"source/_posts/编译原理/image-20250227150333372.png","hash":"0d8228de00ec279098b5970a1815f99902bd7fa5","modified":1740639813447},{"_id":"source/_posts/编译原理/image-20250227152724965.png","hash":"1e26355cc530578119590a603a7565829a193b8f","modified":1740641245050},{"_id":"source/_posts/编译原理/image-20250228145403598.png","hash":"e580ca66b8b061efbdef74fc92c8edff960a2273","modified":1740725643687},{"_id":"source/_posts/编译原理/image-20250228192800546.png","hash":"f8565ca7e060e5f4a9e9b9552d0f235f20c021a0","modified":1740742080618},{"_id":"source/_posts/编译原理/image-20250228192438996.png","hash":"a17039d9e2a1ac56d8abb074565819197733a0a1","modified":1740741879065},{"_id":"source/_posts/编译原理/image-20250228193938121.png","hash":"3b4c811695ca0c8c9b1e9ff9420e324abcc8ffd1","modified":1740742778191},{"_id":"source/_posts/编译原理/image-20250228212619061.png","hash":"5afb6d348ce03dc0b0688bbd378f3aab677c2bfd","modified":1740749179166},{"_id":"source/_posts/编译原理/image-20250228194652018.png","hash":"e6ce84a5402133d076d08a0a326777e3bcabd526","modified":1740743212085},{"_id":"source/_posts/编译原理/image-20250228212945534.png","hash":"871ddc777b0687d7374d0cff92808814cfc91280","modified":1740749385606},{"_id":"source/_posts/编译原理/image-20250228215155976.png","hash":"94a409a1172944706de2ecb8d5be9884b3c424c6","modified":1740750716064},{"_id":"source/_posts/编译原理/image-20250228215120973.png","hash":"a13bb13c13b4fa6199bc4fd257a1877420d64449","modified":1740750681051},{"_id":"source/_posts/编译原理/image-20250228232819417.png","hash":"f394f6096dfbf25de5aa6e21f02b04ff589fe224","modified":1740756499481},{"_id":"source/_posts/编译原理/image-20250228194036448.png","hash":"51c3373b8610a235652b082c53c47de09c072b3f","modified":1740742836541},{"_id":"source/_posts/编译原理/image-20250228214124879.png","hash":"9676dd75803ea2953fa95b7d467c6c647000518f","modified":1740750084949},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1743571561318},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1743571561328},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1743571560601},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"0f469650107841dc1dc716aa94b3ca2bb0721762","modified":1743571561313},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1743571561827},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1743571561815},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1743571561821},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"7166aff350fcf84cbc01835fad5731eb855cecd7","modified":1743571561809},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1743571561817},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1743571561822},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1743571561832},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1743571561497},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1743571561836},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1743571561433},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1743571561577},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1743571561618},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1743571561834},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1743571561648},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1743571561675},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1743571561829},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1743571561831},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1743571561825},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1743571561812},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1743571561813},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1743571561398},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1743571561818},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1743571561552},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1743571561591},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1743571561539},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1743571561620},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1743571561663},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1743571561668},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1743571561035},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1743571560915},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1743571561057},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1743571561106},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1743571561171},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1743571561308},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1743571561268},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1743571561224},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1743571561212},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1743571561231},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1743571560996},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1743571560983},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1743571561085},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1743571561117},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1743571561194},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1743571561238},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1743571561017},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1743571561256},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1743571561067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1743571561045},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1743571561076},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1743571561096},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1743571561124},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1743571561179},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1743571561133},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1743571561185},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1743571561246},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1743571561262},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1743571561775},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1743571561275},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1743571561281},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1743571561806},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1743571560883},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1743571561371},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1743571560849},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1743571561554},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1743571561291},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1743571561164},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1743571560810},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1743571561300},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1743571561601},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1743571561615},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1743571561541},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1743571561556},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1743571561606},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1743571561646},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1743571561671},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1743571561451},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1743571561580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1743571561609},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1743571561420},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1743571561511},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1743571561508},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1743571561550},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1743571561672},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1743571561649},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1743571561652},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1743571561669},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1743571561378},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1743571561517},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1743571561493},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1743571561667},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1743571561538},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1743571561677},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1743571561427},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1743571561531},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1743571561650},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1743571561630},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1743571561674},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1743571561455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1743571561685},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1743571561459},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1743571561462},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1743571561466},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1743571561468},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1743571561471},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1743571561474},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1743571561476},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1743571561480},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1743571561482},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1743571561613},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1743571561485},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1743571561487},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1743571561574},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1743571561490},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1743571561641},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1743571561661},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1743571561748},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1743571561767},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1743571561759},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1743571561788},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1743571561800},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1743571561729},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1743571561715},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1743571561722},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1743571561752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1743571561724},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1743571561781},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1743571561742},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1743571561786},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1743571561787},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1743571561789},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1743571561791},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1743571561796},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1743571561792},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1743571561802},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1743571561702},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1743571561710},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1743571561761},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1743571561721},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1743571561725},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1743571561741},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1743571561799},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1743571561795},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1743571561709},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1743571561772},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1743571561783},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1743571561719},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1743571561750},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1743571561753},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1743571561755},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1743571561777},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1743571561778},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1743571561784},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1743571561793},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1743571561798},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1743571561804},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1743571561142},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1743571560957},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1743571560678},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1743571561513},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1743571561504},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1743571561558},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1743571561388},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1743571561563},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1743571561522},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1743571561679},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1743571561443},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1743571561525},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1743571561533},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1743571561544},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1743571561546},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1743571561565},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1743571561585},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1743571561594},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1743571561658},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1743571561684},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1743571561688},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1743571561691},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1743571561438},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1743571561520},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1743571561696},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1743571561535},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1743571561561},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1743571561656},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1743571561689},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1743571561683},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1743571561693},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1743571561500},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1743571561588},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1743571561567},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1743571561604},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1743571561599},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1743571561447},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1743571561506},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1743571561518},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1743571561569},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1743571561548},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1743571561660},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1743571561681},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1743571561692},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1743571561697},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1743571561414},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1743571561528},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1743571561570},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1743571561597},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1743571561406},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1743571561572},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1743571561769},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1743571561665},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1743571561733},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1743571561739},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1743571561770},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1743571561780},{"_id":"source/_posts/编译原理/image-20250227151200265.png","hash":"65b5089d179a4ea20c80269d7207a64d281355af","modified":1740640320350},{"_id":"source/_posts/编译原理/image-20250228194501097.png","hash":"858bd7b06e608fc44020806ee6a50aae7db7e1de","modified":1740743101224},{"_id":"source/_posts/编译原理/image-20250228214400701.png","hash":"d267b6db3ab168879f42ceaecdc3befff9ec6e03","modified":1740750240814},{"_id":"source/_posts/编译原理/image-20250228232702871.png","hash":"94106187d81fd6113059bac0e7a5b441af9fd5ea","modified":1740756422958},{"_id":"source/_posts/编译原理/image-20250228151703680.png","hash":"1ee1035dcf07a67a05334dff177ebb447ef193b2","modified":1740727023786},{"_id":"source/_posts/编译原理/image-20250228212648230.png","hash":"c8b4131cea3587b56f0d9756e373db178095054a","modified":1740749208327},{"_id":"source/_posts/编译原理/image-20250228213537699.png","hash":"ebf98f9f572419cf9b273c0cd372f766fde951f8","modified":1740749737834},{"_id":"source/_posts/编译原理/image-20250228151432029.png","hash":"db5fb52697c33ba670d325e23f7367713442e335","modified":1740726872133},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1743571561360},{"_id":"source/_posts/计算机科学记录/image-20250219195726811.png","hash":"1ece94200f6fa63bc441380b0409f2c3f71ef44e","modified":1739966247191},{"_id":"source/img/bg/bg-人物-动漫-动漫壁纸.png","hash":"07e657d609928b7bc604655deaa9c2cc5a8149b9","modified":1744298859826},{"_id":"source/img/bg/bg-人物壁纸-少女.png","hash":"6db552be27b68796d177765f37f97223990c7da4","modified":1744298891811},{"_id":"source/img/bg/bg-海景.png","hash":"af864e0b148a21b3f8896c553c13066e2c3f2180","modified":1744298831814},{"_id":"public/css/custom.css","hash":"28670dc788a4e325c41aa43d55be82c40518ed5f","modified":1744814084968},{"_id":"public/css/progress_bar.css","hash":"bce3941544968ff91494b2d87f47f05fe0c5b6a3","modified":1744814084968},{"_id":"public/css/footer.css","hash":"436c1a1b2826ffe1939e978d4ddc3a3a878387bf","modified":1744814084968},{"_id":"public/css/universe.css","hash":"5da771baf876582c40d3334c3d3e50bcc95f725a","modified":1744814084968},{"_id":"public/js/footer.js","hash":"69820f3be23919390f0684c7cabd4823659daacd","modified":1744814084968},{"_id":"public/js/universe.js","hash":"fb0de0b3d7842d41b46dd113723dc77f82a4d530","modified":1744814084968},{"_id":"public/search.xml","hash":"fe182dafb66d4b789252c2a7bd858a3fc0f58cdd","modified":1744814084968},{"_id":"public/about/index.html","hash":"286fc0f3ed34a475ba307fcf2eb7964d4b002c1b","modified":1744814084968},{"_id":"public/comments/index.html","hash":"42656fa0b6e08e8be1a83fe642ae13a3150233e3","modified":1744814084968},{"_id":"public/categories/index.html","hash":"c9b067c04bd1b2e62b3ae5ff6a60ce295ffe9553","modified":1744814084968},{"_id":"public/works/index.html","hash":"acf4110efd91dfb0203497c38540006258e4fad3","modified":1744814084968},{"_id":"public/404.html","hash":"d28b54b5944555c3730421ffaadc7e6ed3b75214","modified":1744814084968},{"_id":"public/link/index.html","hash":"22282dd4678168126282879fbe8fca0160e65b90","modified":1744814084968},{"_id":"public/music/index.html","hash":"2821b5e0fafb3bb36f0d477b1b0d812de5ec0f5c","modified":1744814084968},{"_id":"public/tags/index.html","hash":"443a8d21fe4e0c286191e67a956e392898ad7e90","modified":1744814084968},{"_id":"public/movies/index.html","hash":"1c53b448f5a1764362edc7ce7aecf3c9d1bae0f5","modified":1744814084968},{"_id":"public/2025/01/29/关于本站/index.html","hash":"0ce5ca7942686095c76e55c7d3f03b76c42e38e0","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/index.html","hash":"794871174c362913f9e3e0e310effd5f15a6ec5e","modified":1744814084968},{"_id":"public/2025/01/25/我的第一篇文章/index.html","hash":"271b8220610b3bacfd46be2b24f50f9a604a8826","modified":1744814084968},{"_id":"public/2025/02/04/图片显示测试/index.html","hash":"f3dab157ed67fc85a4da54e995968dbad73b43f3","modified":1744814084968},{"_id":"public/2025/02/18/操作系统/index.html","hash":"24110ecf85afd646d6e9d7d65871804b5358e32d","modified":1744814084968},{"_id":"public/2025/02/24/刷题注意事项/index.html","hash":"cca9be2624ab6b6eb941241a967c4a35f2fe4aa4","modified":1744814084968},{"_id":"public/2025/02/20/计算机科学记录/index.html","hash":"dea1f80ef46559d8b3a63385d641bd7e0e0b3785","modified":1744814084968},{"_id":"public/2025/02/26/刷题日记2.26/index.html","hash":"8eafb3c056a7384516e5239c4529d0adc54f09ce","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/index.html","hash":"9f5e698b5105bfd5a80bededc6db2eac9aa192af","modified":1744814084968},{"_id":"public/2025/03/02/springboot_xushu/index.html","hash":"e83ed411d478a501e6cacaecc752d9294ac92ba0","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/index.html","hash":"8424b2e75f1643b0e503ae4a086f7dd44fdf37dd","modified":1744814084968},{"_id":"public/2025/03/13/Redis/index.html","hash":"7a07f891aa59264399b4d87ae5d14cab69907ed6","modified":1744814084968},{"_id":"public/2025/03/19/刷题日记3.19/index.html","hash":"bde35873f46a6149aa60bcdee554c75d27f01fa7","modified":1744814084968},{"_id":"public/2025/03/21/c++STL/index.html","hash":"8d7e901978ae5d146270bda9a9aff354041434b8","modified":1744814084968},{"_id":"public/2025/03/23/刷题日记3.23/index.html","hash":"7a82accf1c8750f90f77b32cc75850c5d4e93e1b","modified":1744814084968},{"_id":"public/2025/04/02/刷题日记4.02/index.html","hash":"4b984c4ed2c182b953eba8038630d97c0bcf48cc","modified":1744814084968},{"_id":"public/2025/04/03/刷题日记4.03/index.html","hash":"342524528f7d409d64562d22a389f8312c84bae0","modified":1744814084968},{"_id":"public/2025/04/04/刷题日记4.04/index.html","hash":"db98c430f3d4b2aee42ce0346ba48be4d79689ea","modified":1744814084968},{"_id":"public/2025/04/07/刷题日记4.07-4.10/index.html","hash":"8fce55534ea7ae1945b3e8a55da5a31c89253285","modified":1744814084968},{"_id":"public/archives/index.html","hash":"e30a009dfec747a2475d1bdf7d69401306330c5d","modified":1744814084968},{"_id":"public/2025/04/15/spring/index.html","hash":"a86ca92357a965fd03d0248fcbf8358091d023a6","modified":1744814084968},{"_id":"public/archives/page/2/index.html","hash":"e6be836ab2b98ce7f84247733bd0bc83a62f844f","modified":1744814084968},{"_id":"public/archives/2025/index.html","hash":"bcc058d30c09f7c3790ba15099859e9aac648f76","modified":1744814084968},{"_id":"public/archives/2025/page/2/index.html","hash":"5806527f0ec46b5d5e147cbdcdc1c96928281530","modified":1744814084968},{"_id":"public/archives/2025/01/index.html","hash":"c8552a4d28fd867ebbed949166f18de2338e048d","modified":1744814084968},{"_id":"public/archives/2025/02/index.html","hash":"37a3d07eda83e2251213dadb6c5041018dc622aa","modified":1744814084968},{"_id":"public/archives/2025/03/index.html","hash":"5fd55be753baf8cccfad366776c29d6ce8d09324","modified":1744814084968},{"_id":"public/archives/2025/04/index.html","hash":"85c73ae9bfe470fbc6173361250f1a0567ee17b4","modified":1744814084968},{"_id":"public/page/2/index.html","hash":"475946a680c41ef9f7685469eaf83cee58b4ba3a","modified":1744814084968},{"_id":"public/categories/java/index.html","hash":"efd3baa1d16d057b8e4f7e29d32fb95fa5e31b7e","modified":1744814084968},{"_id":"public/index.html","hash":"6542c21847bb5e2b0026e8578b5f7ef78d81bdc5","modified":1744814084968},{"_id":"public/categories/算法/index.html","hash":"effaf1f4ae7f38d3ffca4185694ee4c11341771a","modified":1744814084968},{"_id":"public/categories/博客相关/index.html","hash":"9c7299c9cd6b0490b33e0290b8c2d5135241f726","modified":1744814084968},{"_id":"public/categories/计算机基础/index.html","hash":"8d0a3f0af62c6e7d3e3ac4a3c3a212c9486a70fb","modified":1744814084968},{"_id":"public/tags/java基础/index.html","hash":"beaf2231ca8d41d76ff486733bb04dd8d0dec176","modified":1744814084968},{"_id":"public/tags/java/index.html","hash":"92e544003928200c66bf93f47c671c208b79f8e3","modified":1744814084968},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1744814084968},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1744814084968},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1744814084968},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1744814084968},{"_id":"public/img/my/小埋1.jpg","hash":"255f5431c3d1ee89340776dab1dbb8922efbf10c","modified":1744814084968},{"_id":"public/img/my/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1744814084968},{"_id":"public/img/my/小埋2.jpg","hash":"a56b44d26bbde53d57757e2c441624516125f02f","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250207211115238.png","hash":"c86f78a236a7980a4a8a51d1432fba6d2dafb8bd","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250207212537344.png","hash":"5182e1f9bac79d177a285abef70fb75b1896aaaa","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250207222214122.png","hash":"a48b0b1d3d759fc8c512a4325ce0ba38186c90e4","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250220105056954.png","hash":"dee06e3aaf2c51ccfe0aa27bddd02570bae9f521","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250223200310462.png","hash":"fbd6db786652de0182a96cc5b24e2275d3c12470","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1744814084968},{"_id":"public/2025/04/15/spring/5Id43xPneJiWfZs.webp","hash":"be91bdd59cb7ab27c313bf0b771e8309abaf1340","modified":1744814084968},{"_id":"public/2025/04/15/spring/5HN8GKQywWaYvrF.webp","hash":"d2fe0e2106245674a9cb15eddf0c6a1f2eb4e5a8","modified":1744814084968},{"_id":"public/2025/04/15/spring/evKArqDYcIQPCXT.webp","hash":"dae79f5fe2cf3524535f46f5ef0411ca94c45409","modified":1744814084968},{"_id":"public/2025/04/15/spring/6c0706d0b1875bec9cfac6620612da5d.png","hash":"1e315765bc2ac331f1c9209913cd4a6ba801cf93","modified":1744814084968},{"_id":"public/2025/04/15/spring/ih1Af7xBdX3ebaG.webp","hash":"b674b3a0e0cf9e457faf7ad97779b72e6e7977cd","modified":1744814084968},{"_id":"public/2025/04/15/spring/GWIyPDOaK4TAM1N.webp","hash":"e8c2f82951039e1808fc550a8b23625f83b2fad3","modified":1744814084968},{"_id":"public/2025/04/15/spring/QIBRwScq6fu4XDm.webp","hash":"703e7dd7538673bc51bb47bec3f07be8f6363063","modified":1744814084968},{"_id":"public/2025/04/15/spring/l8HzN7Rwthqrim5.webp","hash":"26dfda324cc4b18ddcd632b0b2fd540fee6f4913","modified":1744814084968},{"_id":"public/2025/04/15/spring/rgl7fXJ2ZKAU8Rd.webp","hash":"f0e5fbdde01698ba8f9634bf5268546730133127","modified":1744814084968},{"_id":"public/2025/04/15/spring/SQTchJBq4G8NWyC.webp","hash":"ea734d1323c6b9c90477a16a643ffc38dd4abf57","modified":1744814084968},{"_id":"public/2025/04/15/spring/SyDkvOldB7ETW4z.webp","hash":"86a53578d734f0ad53f1994ae39f1717fec09c13","modified":1744814084968},{"_id":"public/2025/02/04/图片显示测试/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1744814084968},{"_id":"public/2025/02/04/图片显示测试/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1744814084968},{"_id":"public/2025/01/25/我的第一篇文章/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250221230151097.png","hash":"cbf12c4c6c2e4ae951180d5db8d4a2049e254a0b","modified":1744814084968},{"_id":"public/css/index.css","hash":"70dadd6c1fba112a8100ecad8d6caa39fab3a1cb","modified":1744814084968},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1744814084968},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1744814084968},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1744814084968},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1744814084968},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1744814084968},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250304144540830.png","hash":"ed537feefe84e7070b6c30c0834d90602392d230","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250304173525566.png","hash":"dcfb0d41194924aa746f5f5e81e360a6281bd5f7","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250304173636208.png","hash":"44e6f82d26b58074ebdb250ae9d47e5030a88201","modified":1744814084968},{"_id":"public/img/bg/bg-人物剪影.png","hash":"1f66361529d6427438697716a868381d81d17e70","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250207202641150.png","hash":"9e20ced6fb1a1a693fb232b04a31fb43d28f5ae9","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250207203153099.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250207203028138.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250207230001660.png","hash":"04cd0052bec9e3068acf7239e48c6e93ae105dd4","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250216222117731.png","hash":"34fc2f47dd828ce6c762d0276c2017070f18e568","modified":1744814084968},{"_id":"public/2025/02/26/刷题日记2.26/image-20250226225152860.png","hash":"0dde3c0bc50764b1aa61dfdffe513fb81bc6d226","modified":1744814084968},{"_id":"public/2025/02/26/刷题日记2.26/image-20250226225220869.png","hash":"48b66483e539131bcbf38d8bb2fabc7a9a3a2e04","modified":1744814084968},{"_id":"public/2025/04/15/spring/0a4cf6d3f9cb9a73593e73fbf29b4758.png","hash":"07192d3bd36b74125737a3b7bdf7dbd736ef03b6","modified":1744814084968},{"_id":"public/2025/04/15/spring/image-20250415134033090.png","hash":"466d01dcd78eac3608114c6ae614be4dcaf38ee7","modified":1744814084968},{"_id":"public/2025/04/15/spring/KzSUJXa4jBfO9rd.webp","hash":"fd9e00087a7a593c29eb306356f9400749f8f4a9","modified":1744814084968},{"_id":"public/2025/03/19/刷题日记3.19/image-20250319185048652.png","hash":"bac5234504e41ae14f6575a0f9d3fe2ac84f0b8e","modified":1744814084968},{"_id":"public/2025/03/19/刷题日记3.19/image-20250319222721615.png","hash":"0b6dcec873c5ffed273d467d37094cfdb79dc3c8","modified":1744814084968},{"_id":"public/2025/02/18/操作系统/image-20250218154211332.png","hash":"c4c283ccade64a751d5114a2d58f4b4fb7a5dea5","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228150731110.png","hash":"578ce85e9d8b866fdb795ee513944a73d1422986","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250303174432365.png","hash":"fee7977abda76f415bb07b90d57b2fa9a91bbda5","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250304131843059.png","hash":"672bdb6c8c1de4630ecba6ad56920af284e28ef6","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250304144607548.png","hash":"9a002a5fd3536287c4a0595bc0882a7f32c81487","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250304151310618.png","hash":"9a002a5fd3536287c4a0595bc0882a7f32c81487","modified":1744814084968},{"_id":"public/2025/03/13/Redis/image-20250313125814412.png","hash":"4f13ab020eac824709ed1eb768b908a2301d2fd3","modified":1744814084968},{"_id":"public/2025/03/13/Redis/image-20250316134410583.png","hash":"3dab0453763aafac5b90f6f6e4e0095c1182b37c","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250220122408100.png","hash":"28b4a9f3ca198aec1b0a7c25f9e199b3fafbb576","modified":1744814084968},{"_id":"public/2025/04/15/spring/1010726-20190908042152777-1895820426.png","hash":"a629af060ee9be28c1e7cd48973f668e56e99bc5","modified":1744814084968},{"_id":"public/2025/04/15/spring/image-20250415113934007.png","hash":"dde24cacdb20e086bb4aec7c2b1dd2157a2b3ad2","modified":1744814084968},{"_id":"public/2025/04/15/spring/image-20250415134331010.png","hash":"31b47dbd443681c22c5c228263127a734ca42509","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228232725709.png","hash":"8aaac157bb8e13b641f02a7df97f12f7ff8816f2","modified":1744814084968},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192411375.png","hash":"3b4d8ba29237f7786f58efd6d3fe7e8de21989c2","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250304150949048.png","hash":"cb7871f76a9dad09fc29b34919433da69e77fd5b","modified":1744814084968},{"_id":"public/2025/03/03/苍穹外卖/image-20250309160847232.png","hash":"832bf16fdfe4c0febe01426bf7de661fef497513","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250216221349436.png","hash":"d9306810aa7c6e01d5b49ab53d590b3347787e20","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250222224319340.png","hash":"17108c5fd7d2e90f41917f0fb4f78a7c682fe43a","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250223163956807.png","hash":"41c8b39cc33d86f8317cfac10fc01f72f3b801d6","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250223191142600.png","hash":"b63e4d6f2ab18477eca7f0cc969cf8850a9bd0ed","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250223201933145.png","hash":"b9c28be8c214fbde56ee6e88080210de8c4b5d1e","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250223201954533.png","hash":"9d99ff43a0df5ec0f212900f10c058f8d1186918","modified":1744814084968},{"_id":"public/2025/02/04/图片显示测试/image.png","hash":"60d56aea7bbb09d8e7b8804ac81508387ca06d04","modified":1744814084968},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/1740148009384.jpg","hash":"b825a513916ab1982d7fe6f2dc225ba7bd2da5fa","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228194515565.png","hash":"0dd8ed168930daf9ad71e3163b383400cce2a1a3","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228213802223.png","hash":"83249560b5d77764a0ba39df1d9fd9fc75e12b01","modified":1744814084968},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192653645.png","hash":"095f88ea7023c867a9cb7bccfe7424518c2a27a9","modified":1744814084968},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192931677.png","hash":"5703b38e3f85a4a7a167280476bcfa5dc07f139e","modified":1744814084968},{"_id":"public/2025/03/13/Redis/image-20250316135458506.png","hash":"636c4bccc4b3aceb5aa165141c6860641b56f14c","modified":1744814084968},{"_id":"public/2025/03/13/Redis/image-20250316132341779.png","hash":"61cdf64ef6e80c59f323c1ac40602c5cbbcefa68","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250222225338830.png","hash":"aa72d91efe4a12ee4c111075e01de01e1791493a","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250222224835797.png","hash":"237dd8153bb9b7b9b1c4bc089e192e88ff11c7e5","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227152023060.png","hash":"600449ac9e1f642361b7bd0e6e20d09b2c870ec9","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227153008093.png","hash":"7e7ff002cf738acb151a7c8e4981f57fb7dd0aca","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227152807156.png","hash":"43905ab863b41c14e2af2121978f7d66e96b89d2","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228145643174.png","hash":"44519b6c6b32119dbbe1816db111268717d450c8","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228194206882.png","hash":"e9356ad82490d6ea247b082c29d147a567832089","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228214909259.png","hash":"b2d73f66b225aef5713688158aeff6d927a49f9c","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228232506318.png","hash":"d2f63693d7936868f2fabb7114f53a9af8c04b35","modified":1744814084968},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192740802.png","hash":"942abf8139420f890e36fd6700ac7ed3006e48e9","modified":1744814084968},{"_id":"public/2025/03/13/Redis/image-20250316133144948.png","hash":"a76830f6e59fb154ab28b3fbc3096c8a3be882f8","modified":1744814084968},{"_id":"public/2025/02/04/Java基础复盘/image-20250220123104283.png","hash":"9ada20bc80bec04b67b27038b6451b64b9d0ddf0","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227151247399.png","hash":"231139151681b344875b0f848770dc47389f7830","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227151841607.png","hash":"165b708b93c8c74040be9242f71f84fba6e4c232","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227152321173.png","hash":"fa6503872ff32fb73ace2755c99c8dee0a14def3","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228150333188.png","hash":"d4d1ea4507aa79987613f1dc0d71e8031301ecf5","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228150433021.png","hash":"06e84b8eb8de71b2500e93c47fd70bfd81ef5cfc","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228194128221.png","hash":"4079f822e0b8ca83d8ddbaaa01516b29f2e46570","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228213348367.png","hash":"f764186666a3f1910ebf4e060d1e5a7359b53f99","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228214703417.png","hash":"8e394b1c34af290b221822e88c85005231d5442e","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228232857300.png","hash":"0d162c7e7d71f89f01202f06b2d3abcb7877b46d","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228232627479.png","hash":"753e099723996f654418821dba70f83c9db3c2c9","modified":1744814084968},{"_id":"public/img/bg/bg-剑客-水墨.png","hash":"e5e24ac005ef3e467b3aa7a72787942bb4a84a5e","modified":1744814084968},{"_id":"public/2025/03/13/Redis/image-20250313121938596.png","hash":"8464072e1cf23892820cb7f6aef5f42a6b211194","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228145123531.png","hash":"93dbdc8cf7f7a61e76aaa5bfbfc07a1503cfc241","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228145901690.png","hash":"2ac22bf68914f091a6ed3f70d4688fabdeb4559f","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228150052444.png","hash":"7762acf361046a852839b615caed94d79e91ee3f","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228145227529.png","hash":"fd3f17665b7c536c47f287509c073e24fb4687db","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228213653344.png","hash":"f2771ed1bafbe55aa6afaaefeed41e11fe4f773b","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228213930767.png","hash":"366c11469faa189d45f9372c05599cf8bcf372c1","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228214223449.png","hash":"47dbf961e177f9a73c0fcbda69204b325a9584d3","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228215437342.png","hash":"5225b02165f1660d7139127c50e49c8acdde8727","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228232533260.png","hash":"f83048a1c7b36a3787ac601f21e958ab0cb68a7e","modified":1744814084968},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192840808.png","hash":"270ee6ad417af19dd0acdcb74ffc32b0f0f1a3f3","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227150333372.png","hash":"0d8228de00ec279098b5970a1815f99902bd7fa5","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227152724965.png","hash":"1e26355cc530578119590a603a7565829a193b8f","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228145403598.png","hash":"e580ca66b8b061efbdef74fc92c8edff960a2273","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228193938121.png","hash":"3b4c811695ca0c8c9b1e9ff9420e324abcc8ffd1","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228192800546.png","hash":"f8565ca7e060e5f4a9e9b9552d0f235f20c021a0","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228192438996.png","hash":"a17039d9e2a1ac56d8abb074565819197733a0a1","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228194652018.png","hash":"e6ce84a5402133d076d08a0a326777e3bcabd526","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228212945534.png","hash":"871ddc777b0687d7374d0cff92808814cfc91280","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228212619061.png","hash":"5afb6d348ce03dc0b0688bbd378f3aab677c2bfd","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228215155976.png","hash":"94a409a1172944706de2ecb8d5be9884b3c424c6","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228215120973.png","hash":"a13bb13c13b4fa6199bc4fd257a1877420d64449","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228232819417.png","hash":"f394f6096dfbf25de5aa6e21f02b04ff589fe224","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228194036448.png","hash":"51c3373b8610a235652b082c53c47de09c072b3f","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228214124879.png","hash":"9676dd75803ea2953fa95b7d467c6c647000518f","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250227151200265.png","hash":"65b5089d179a4ea20c80269d7207a64d281355af","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228194501097.png","hash":"858bd7b06e608fc44020806ee6a50aae7db7e1de","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228214400701.png","hash":"d267b6db3ab168879f42ceaecdc3befff9ec6e03","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228232702871.png","hash":"94106187d81fd6113059bac0e7a5b441af9fd5ea","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228151703680.png","hash":"1ee1035dcf07a67a05334dff177ebb447ef193b2","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228213537699.png","hash":"ebf98f9f572419cf9b273c0cd372f766fde951f8","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228212648230.png","hash":"c8b4131cea3587b56f0d9756e373db178095054a","modified":1744814084968},{"_id":"public/2025/02/21/编译原理/image-20250228151432029.png","hash":"db5fb52697c33ba670d325e23f7367713442e335","modified":1744814084968},{"_id":"public/2025/02/20/计算机科学记录/image-20250219195726811.png","hash":"1ece94200f6fa63bc441380b0409f2c3f71ef44e","modified":1744814084968},{"_id":"public/img/bg/bg-人物-动漫-动漫壁纸.png","hash":"07e657d609928b7bc604655deaa9c2cc5a8149b9","modified":1744814084968},{"_id":"public/img/bg/bg-人物壁纸-少女.png","hash":"6db552be27b68796d177765f37f97223990c7da4","modified":1744814084968},{"_id":"public/img/bg/bg-海景.png","hash":"af864e0b148a21b3f8896c553c13066e2c3f2180","modified":1744814084968}],"Category":[{"name":"java","_id":"cm9k19ap70004poot22w2a7hf"},{"name":"算法","_id":"cm9k19apd000jpoot1d0qgwec"},{"name":"博客相关","_id":"cm9k19apf000qpoot88cc2w10"},{"name":"计算机基础","_id":"cm9k19apj001dpootbw8pgv9q"}],"Data":[{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"本blog搭建引路人！！","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}],"Page":[{"title":"about","date":"2025-02-13T07:01:17.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-02-13 15:01:17\ntype: \"about\"\n---\n","updated":"2025-04-15T06:14:15.458Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm9k19ap30000poot674cgl0e","content":"","excerpt":"","more":""},{"_content":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(2) .menus_item_child {\n  left: -125px;\n}\n\n\n/* 霓虹灯 */\n/* 夜间模式菜单栏发光字 */\n[data-theme=\"dark\"] #nav .site-page,\n[data-theme=\"dark\"] #nav .menus_items .menus_item .menus_item_child li a {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 手机端适配 */\n[data-theme=\"dark\"] #sidebar #sidebar-menus .menus_items .site-page {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 闪烁变动颜色连续渐变 */\n#site-name,\n#site-title,\n#site-subtitle,\n#post-info,\n.author-info__name,\n.author-info__description {\n  transition: text-shadow 1s linear !important;\n}\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n/* end */\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: orange;\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: orange;\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 小冰分类分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n  background: #1e1e1e;\n  color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n  background: #3ecdf1;\n  color: #f2f2f2;\n}","source":"css/custom.css","raw":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(2) .menus_item_child {\n  left: -125px;\n}\n\n\n/* 霓虹灯 */\n/* 夜间模式菜单栏发光字 */\n[data-theme=\"dark\"] #nav .site-page,\n[data-theme=\"dark\"] #nav .menus_items .menus_item .menus_item_child li a {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 手机端适配 */\n[data-theme=\"dark\"] #sidebar #sidebar-menus .menus_items .site-page {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 闪烁变动颜色连续渐变 */\n#site-name,\n#site-title,\n#site-subtitle,\n#post-info,\n.author-info__name,\n.author-info__description {\n  transition: text-shadow 1s linear !important;\n}\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n/* end */\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: orange;\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: orange;\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 小冰分类分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n  background: #1e1e1e;\n  color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n  background: #3ecdf1;\n  color: #f2f2f2;\n}","date":"2025-02-27T03:00:44.522Z","updated":"2025-02-27T03:00:44.522Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cm9k19ap60002pootgji1cxwq","content":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(2) .menus_item_child {\n  left: -125px;\n}\n\n\n/* 霓虹灯 */\n/* 夜间模式菜单栏发光字 */\n[data-theme=\"dark\"] #nav .site-page,\n[data-theme=\"dark\"] #nav .menus_items .menus_item .menus_item_child li a {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 手机端适配 */\n[data-theme=\"dark\"] #sidebar #sidebar-menus .menus_items .site-page {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 闪烁变动颜色连续渐变 */\n#site-name,\n#site-title,\n#site-subtitle,\n#post-info,\n.author-info__name,\n.author-info__description {\n  transition: text-shadow 1s linear !important;\n}\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n/* end */\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: orange;\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: orange;\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 小冰分类分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n  background: #1e1e1e;\n  color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n  background: #3ecdf1;\n  color: #f2f2f2;\n}"},{"_content":"#workboard{font-size:13px;font-weight:700}\n\n/* 悬停时显示徽标提示语的样式 */\na.github-badge:hover:before {\n    position: fixed; /* 固定定位 */\n    width: fit-content; /* 宽度根据内容自适应 */\n    margin: auto; /* 自动居中 */\n    left: 0; /* 左对齐 */\n    right: 0; /* 右对齐 */\n    top: 10%; /* 距离顶部10% */\n    border-radius: 10px; /* 圆角边框 */\n    text-align: center; /* 文字居中 */\n    z-index: 100; /* 层级高于其他元素 */\n    content: attr(data-title); /* 显示data-title属性的内容 */\n    font-size: 20px; /* 字体大小 */\n    color: #fff; /* 文字颜色为白色 */\n    padding: 10px; /* 内边距 */\n    background-color: var(--text-bg-hover); /* 背景颜色为变量 */\n  }\n  \n  /* 暗色主题下悬停提示语的样式 */\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8); /* 背景颜色为深灰色 */\n  }\n  ","source":"css/footer.css","raw":"#workboard{font-size:13px;font-weight:700}\n\n/* 悬停时显示徽标提示语的样式 */\na.github-badge:hover:before {\n    position: fixed; /* 固定定位 */\n    width: fit-content; /* 宽度根据内容自适应 */\n    margin: auto; /* 自动居中 */\n    left: 0; /* 左对齐 */\n    right: 0; /* 右对齐 */\n    top: 10%; /* 距离顶部10% */\n    border-radius: 10px; /* 圆角边框 */\n    text-align: center; /* 文字居中 */\n    z-index: 100; /* 层级高于其他元素 */\n    content: attr(data-title); /* 显示data-title属性的内容 */\n    font-size: 20px; /* 字体大小 */\n    color: #fff; /* 文字颜色为白色 */\n    padding: 10px; /* 内边距 */\n    background-color: var(--text-bg-hover); /* 背景颜色为变量 */\n  }\n  \n  /* 暗色主题下悬停提示语的样式 */\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8); /* 背景颜色为深灰色 */\n  }\n  ","date":"2025-02-13T13:29:31.484Z","updated":"2025-02-13T13:29:31.484Z","path":"css/footer.css","layout":"false","title":"","comments":1,"_id":"cm9k19ap80005poot4b3mgghd","content":"#workboard{font-size:13px;font-weight:700}\n\n/* 悬停时显示徽标提示语的样式 */\na.github-badge:hover:before {\n    position: fixed; /* 固定定位 */\n    width: fit-content; /* 宽度根据内容自适应 */\n    margin: auto; /* 自动居中 */\n    left: 0; /* 左对齐 */\n    right: 0; /* 右对齐 */\n    top: 10%; /* 距离顶部10% */\n    border-radius: 10px; /* 圆角边框 */\n    text-align: center; /* 文字居中 */\n    z-index: 100; /* 层级高于其他元素 */\n    content: attr(data-title); /* 显示data-title属性的内容 */\n    font-size: 20px; /* 字体大小 */\n    color: #fff; /* 文字颜色为白色 */\n    padding: 10px; /* 内边距 */\n    background-color: var(--text-bg-hover); /* 背景颜色为变量 */\n  }\n  \n  /* 暗色主题下悬停提示语的样式 */\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8); /* 背景颜色为深灰色 */\n  }\n  "},{"_content":".loading-img {\n    background: url(../img/my/小埋1.jpg) no-repeat center center;\n    background-size: cover;\n}\n\n.pace {\n    -webkit-pointer-events: none;\n    pointer-events: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    z-index: 2000;\n    position: fixed;\n    margin: auto;\n    top: 10px;\n    left: 0;\n    right: 0;\n    height: 8px;\n    border-radius: 8px;\n    width: 4rem;\n    background: #eaecf2;\n    border: 1px #e3e8f7;\n    overflow: hidden;\n  }\n  \n  .pace-inactive .pace-progress {\n    opacity: 0;\n    transition: 0.3s ease-in;\n  }\n  \n  .pace .pace-progress {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    max-width: 200px;\n    position: absolute;\n    z-index: 2000;\n    display: block;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    animation: gradient 1.5s ease infinite;\n    background-size: 200%;\n  }\n  \n  .pace.pace-inactive {\n    opacity: 0;\n    transition: 0.3s;\n    top: -8px;\n  }\n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }","source":"css/progress_bar.css","raw":".loading-img {\n    background: url(../img/my/小埋1.jpg) no-repeat center center;\n    background-size: cover;\n}\n\n.pace {\n    -webkit-pointer-events: none;\n    pointer-events: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    z-index: 2000;\n    position: fixed;\n    margin: auto;\n    top: 10px;\n    left: 0;\n    right: 0;\n    height: 8px;\n    border-radius: 8px;\n    width: 4rem;\n    background: #eaecf2;\n    border: 1px #e3e8f7;\n    overflow: hidden;\n  }\n  \n  .pace-inactive .pace-progress {\n    opacity: 0;\n    transition: 0.3s ease-in;\n  }\n  \n  .pace .pace-progress {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    max-width: 200px;\n    position: absolute;\n    z-index: 2000;\n    display: block;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    animation: gradient 1.5s ease infinite;\n    background-size: 200%;\n  }\n  \n  .pace.pace-inactive {\n    opacity: 0;\n    transition: 0.3s;\n    top: -8px;\n  }\n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }","date":"2025-02-27T02:39:54.528Z","updated":"2025-02-27T02:39:54.528Z","path":"css/progress_bar.css","layout":"false","title":"","comments":1,"_id":"cm9k19ap90008poot3jz5bf5d","content":".loading-img {\n    background: url(../img/my/小埋1.jpg) no-repeat center center;\n    background-size: cover;\n}\n\n.pace {\n    -webkit-pointer-events: none;\n    pointer-events: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    z-index: 2000;\n    position: fixed;\n    margin: auto;\n    top: 10px;\n    left: 0;\n    right: 0;\n    height: 8px;\n    border-radius: 8px;\n    width: 4rem;\n    background: #eaecf2;\n    border: 1px #e3e8f7;\n    overflow: hidden;\n  }\n  \n  .pace-inactive .pace-progress {\n    opacity: 0;\n    transition: 0.3s ease-in;\n  }\n  \n  .pace .pace-progress {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    max-width: 200px;\n    position: absolute;\n    z-index: 2000;\n    display: block;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    animation: gradient 1.5s ease infinite;\n    background-size: 200%;\n  }\n  \n  .pace.pace-inactive {\n    opacity: 0;\n    transition: 0.3s;\n    top: -8px;\n  }\n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }"},{"_content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }","source":"css/universe.css","raw":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }","date":"2025-02-15T05:38:39.605Z","updated":"2025-02-15T05:38:39.605Z","path":"css/universe.css","layout":"false","title":"","comments":1,"_id":"cm9k19apa000apoot2szr3z8c","content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }"},{"title":"comments","date":"2025-02-13T07:01:17.000Z","_content":"","source":"comments/index.md","raw":"---\ntitle: comments\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-15T05:04:16.035Z","path":"comments/index.html","comments":1,"layout":"page","_id":"cm9k19apb000dpootd2l9bbnq","content":"","excerpt":"","more":""},{"title":"categories","date":"2025-02-13T07:01:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-02-13 15:01:17\ntype: \"categories\"\n---\n","updated":"2025-02-16T14:44:07.358Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm9k19apd000gpoothivf97xq","content":"","excerpt":"","more":""},{"_content":"setInterval(() => { // 每隔1秒执行一次函数\n    let create_time = Math.round(new Date('2025-01-25 00:00:00').getTime() / 1000); // 设置建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000); // 获取当前时间戳\n    let second = timestamp - create_time; // 计算从建站到现在经过的秒数\n    let time = new Array(0, 0, 0, 0, 0); // 初始化时间数组，用于存储年、天、时、分、秒\n  \n    var nol = function(h){ // 定义一个函数，用于在数字小于10时补零\n      return h>9?h:'0'+h;\n    }\n  \n    // 计算经过的时间\n    if (second >= 365 * 24 * 3600) { // 如果超过1年\n      time[0] = parseInt(second / (365 * 24 * 3600)); // 计算年数\n      second %= 365 * 24 * 3600; // 取余数\n    }\n    if (second >= 24 * 3600) { // 如果超过1天\n      time[1] = parseInt(second / (24 * 3600)); // 计算天数\n      second %= 24 * 3600; // 取余数\n    }\n    if (second >= 3600) { // 如果超过1小时\n      time[2] = nol(parseInt(second / 3600)); // 计算小时数，并补零\n      second %= 3600; // 取余数\n    }\n    if (second >= 60) { // 如果超过1分钟\n      time[3] = nol(parseInt(second / 60)); // 计算分钟数，并补零\n      second %= 60; // 取余数\n    }\n    if (second > 0) { // 如果还有秒数\n      time[4] = nol(second); // 补零\n    }\n  \n    // 根据时间判断显示内容\n    if ((Number(time[2])<22) && (Number(time[2])>7)){ // 如果当前时间在7点到22点之间\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-营业中-6adea8?style=social&logo=cakephp' title='欢迎光临~'>` +\n        `<div id='runtime'>` + '本站已经运行' + time[0] + ' 年 ' + time[1] + ' 天 ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '了哟~' + '</div>';\n    }\n    else{ // 否则\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'>` +\n        `<div id='runtime'>` + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n  \n    // 将生成的HTML内容插入到页面中\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);","source":"js/footer.js","raw":"setInterval(() => { // 每隔1秒执行一次函数\n    let create_time = Math.round(new Date('2025-01-25 00:00:00').getTime() / 1000); // 设置建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000); // 获取当前时间戳\n    let second = timestamp - create_time; // 计算从建站到现在经过的秒数\n    let time = new Array(0, 0, 0, 0, 0); // 初始化时间数组，用于存储年、天、时、分、秒\n  \n    var nol = function(h){ // 定义一个函数，用于在数字小于10时补零\n      return h>9?h:'0'+h;\n    }\n  \n    // 计算经过的时间\n    if (second >= 365 * 24 * 3600) { // 如果超过1年\n      time[0] = parseInt(second / (365 * 24 * 3600)); // 计算年数\n      second %= 365 * 24 * 3600; // 取余数\n    }\n    if (second >= 24 * 3600) { // 如果超过1天\n      time[1] = parseInt(second / (24 * 3600)); // 计算天数\n      second %= 24 * 3600; // 取余数\n    }\n    if (second >= 3600) { // 如果超过1小时\n      time[2] = nol(parseInt(second / 3600)); // 计算小时数，并补零\n      second %= 3600; // 取余数\n    }\n    if (second >= 60) { // 如果超过1分钟\n      time[3] = nol(parseInt(second / 60)); // 计算分钟数，并补零\n      second %= 60; // 取余数\n    }\n    if (second > 0) { // 如果还有秒数\n      time[4] = nol(second); // 补零\n    }\n  \n    // 根据时间判断显示内容\n    if ((Number(time[2])<22) && (Number(time[2])>7)){ // 如果当前时间在7点到22点之间\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-营业中-6adea8?style=social&logo=cakephp' title='欢迎光临~'>` +\n        `<div id='runtime'>` + '本站已经运行' + time[0] + ' 年 ' + time[1] + ' 天 ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '了哟~' + '</div>';\n    }\n    else{ // 否则\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'>` +\n        `<div id='runtime'>` + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n  \n    // 将生成的HTML内容插入到页面中\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);","date":"2025-02-13T13:20:51.156Z","updated":"2025-02-13T13:20:51.156Z","path":"js/footer.js","layout":"false","title":"","comments":1,"_id":"cm9k19ape000kpoothhn36bji","content":"setInterval(() => { // 每隔1秒执行一次函数\n    let create_time = Math.round(new Date('2025-01-25 00:00:00').getTime() / 1000); // 设置建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000); // 获取当前时间戳\n    let second = timestamp - create_time; // 计算从建站到现在经过的秒数\n    let time = new Array(0, 0, 0, 0, 0); // 初始化时间数组，用于存储年、天、时、分、秒\n  \n    var nol = function(h){ // 定义一个函数，用于在数字小于10时补零\n      return h>9?h:'0'+h;\n    }\n  \n    // 计算经过的时间\n    if (second >= 365 * 24 * 3600) { // 如果超过1年\n      time[0] = parseInt(second / (365 * 24 * 3600)); // 计算年数\n      second %= 365 * 24 * 3600; // 取余数\n    }\n    if (second >= 24 * 3600) { // 如果超过1天\n      time[1] = parseInt(second / (24 * 3600)); // 计算天数\n      second %= 24 * 3600; // 取余数\n    }\n    if (second >= 3600) { // 如果超过1小时\n      time[2] = nol(parseInt(second / 3600)); // 计算小时数，并补零\n      second %= 3600; // 取余数\n    }\n    if (second >= 60) { // 如果超过1分钟\n      time[3] = nol(parseInt(second / 60)); // 计算分钟数，并补零\n      second %= 60; // 取余数\n    }\n    if (second > 0) { // 如果还有秒数\n      time[4] = nol(second); // 补零\n    }\n  \n    // 根据时间判断显示内容\n    if ((Number(time[2])<22) && (Number(time[2])>7)){ // 如果当前时间在7点到22点之间\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-营业中-6adea8?style=social&logo=cakephp' title='欢迎光临~'>` +\n        `<div id='runtime'>` + '本站已经运行' + time[0] + ' 年 ' + time[1] + ' 天 ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '了哟~' + '</div>';\n    }\n    else{ // 否则\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'>` +\n        `<div id='runtime'>` + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n  \n    // 将生成的HTML内容插入到页面中\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);"},{"_content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()","source":"js/universe.js","raw":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()","date":"2025-02-15T05:38:21.891Z","updated":"2025-02-15T05:32:21.203Z","path":"js/universe.js","layout":"false","title":"","comments":1,"_id":"cm9k19ape000npoot41rwe4lk","content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()"},{"title":"link","date":"2025-02-13T07:01:55.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2025-02-13 15:01:55\ntype: \"link\"\n---\n","updated":"2025-02-16T14:44:58.871Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm9k19apf000rpoot1uhq96fy","content":"","excerpt":"","more":""},{"title":"works","date":"2025-02-13T07:01:17.000Z","_content":"","source":"works/index.md","raw":"---\ntitle: works\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-13T07:18:31.900Z","path":"works/index.html","comments":1,"layout":"page","_id":"cm9k19apg000upootdxmy5rwp","content":"","excerpt":"","more":""},{"title":"movies","date":"2025-02-13T07:01:17.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-13T09:31:05.195Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cm9k19apg000ypooteav109dr","content":"","excerpt":"","more":""},{"title":"music","date":"2025-02-13T07:01:17.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-13T07:14:13.107Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm9k19aph0011poot0vq32j5w","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-02-13T07:01:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-02-13 15:01:17\ntype: \"tags\"\n---\n","updated":"2025-02-16T14:44:21.799Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm9k19api0014poot8ew886nt","content":"","excerpt":"","more":""}],"Post":[{"title":"Redis","date":"2025-03-12T16:00:00.000Z","updated":"2025-03-12T16:00:00.000Z","_content":"## Redis\n\n是什么：基于**内存**的**key-value**结构的**数据库**\n\n特点：\n\n- 基于内存存储，读写性能高\n- 适合存储热点数据（热点商品、资讯、新闻）\n\n官网：https://redis.io/\n\n中文网：https://www.redis.net.cn/\n\n### 数据类型\n\n![image-20250313121938596](Redis/image-20250313121938596.png)\n\n#### 常用命令：\n\n**字符串：**\n\n- set key value---设置指定key的值\n- get key---获取指定key的值\n- setex key seconds value---设置指定key的值，并在seconds后过期(常用于验证码)\n- setnx key value---只有在key不存在时设置key的值\n\n**哈希：**\n\n- hset key field value---设置指定key的字段和值\n- hget key field---获取指定key的字段的值\n- hdel key field---删除指定key的字段\n- hkeys key---显示所有字段\n- hvals key---显示所有值\n\n**列表：**\n\n![image-20250313125814412](Redis/image-20250313125814412.png)\n\n**集合：**\n\n![image-20250316132341779](Redis/image-20250316132341779.png)\n\n**有序集合：**\n\n![image-20250316133144948](Redis/image-20250316133144948.png)\n\n**通用命令：**\n\n![image-20250316134410583](Redis/image-20250316134410583.png)\n\n## Java中操作Redis\n\n![image-20250316135458506](Redis/image-20250316135458506.png)\n","source":"_posts/Redis.md","raw":"---\ntitle: Redis\ndate: 2025-03-13\nupdated: 2025-03-13\ncategories: java\n---\n## Redis\n\n是什么：基于**内存**的**key-value**结构的**数据库**\n\n特点：\n\n- 基于内存存储，读写性能高\n- 适合存储热点数据（热点商品、资讯、新闻）\n\n官网：https://redis.io/\n\n中文网：https://www.redis.net.cn/\n\n### 数据类型\n\n![image-20250313121938596](Redis/image-20250313121938596.png)\n\n#### 常用命令：\n\n**字符串：**\n\n- set key value---设置指定key的值\n- get key---获取指定key的值\n- setex key seconds value---设置指定key的值，并在seconds后过期(常用于验证码)\n- setnx key value---只有在key不存在时设置key的值\n\n**哈希：**\n\n- hset key field value---设置指定key的字段和值\n- hget key field---获取指定key的字段的值\n- hdel key field---删除指定key的字段\n- hkeys key---显示所有字段\n- hvals key---显示所有值\n\n**列表：**\n\n![image-20250313125814412](Redis/image-20250313125814412.png)\n\n**集合：**\n\n![image-20250316132341779](Redis/image-20250316132341779.png)\n\n**有序集合：**\n\n![image-20250316133144948](Redis/image-20250316133144948.png)\n\n**通用命令：**\n\n![image-20250316134410583](Redis/image-20250316134410583.png)\n\n## Java中操作Redis\n\n![image-20250316135458506](Redis/image-20250316135458506.png)\n","slug":"Redis","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19ap40001poot25wj041e","content":"<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><p>是什么：基于<strong>内存</strong>的<strong>key-value</strong>结构的<strong>数据库</strong></p>\n<p>特点：</p>\n<ul>\n<li>基于内存存储，读写性能高</li>\n<li>适合存储热点数据（热点商品、资讯、新闻）</li>\n</ul>\n<p>官网：<a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>中文网：<a href=\"https://www.redis.net.cn/\">https://www.redis.net.cn/</a></p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><img src=\"/2025/03/13/Redis/image-20250313121938596.png\" alt=\"image-20250313121938596\"></p>\n<h4 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h4><p><strong>字符串：</strong></p>\n<ul>\n<li>set key value—设置指定key的值</li>\n<li>get key—获取指定key的值</li>\n<li>setex key seconds value—设置指定key的值，并在seconds后过期(常用于验证码)</li>\n<li>setnx key value—只有在key不存在时设置key的值</li>\n</ul>\n<p><strong>哈希：</strong></p>\n<ul>\n<li>hset key field value—设置指定key的字段和值</li>\n<li>hget key field—获取指定key的字段的值</li>\n<li>hdel key field—删除指定key的字段</li>\n<li>hkeys key—显示所有字段</li>\n<li>hvals key—显示所有值</li>\n</ul>\n<p><strong>列表：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250313125814412.png\" alt=\"image-20250313125814412\"></p>\n<p><strong>集合：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250316132341779.png\" alt=\"image-20250316132341779\"></p>\n<p><strong>有序集合：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250316133144948.png\" alt=\"image-20250316133144948\"></p>\n<p><strong>通用命令：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250316134410583.png\" alt=\"image-20250316134410583\"></p>\n<h2 id=\"Java中操作Redis\"><a href=\"#Java中操作Redis\" class=\"headerlink\" title=\"Java中操作Redis\"></a>Java中操作Redis</h2><p><img src=\"/2025/03/13/Redis/image-20250316135458506.png\" alt=\"image-20250316135458506\"></p>\n","excerpt":"","more":"<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><p>是什么：基于<strong>内存</strong>的<strong>key-value</strong>结构的<strong>数据库</strong></p>\n<p>特点：</p>\n<ul>\n<li>基于内存存储，读写性能高</li>\n<li>适合存储热点数据（热点商品、资讯、新闻）</li>\n</ul>\n<p>官网：<a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>中文网：<a href=\"https://www.redis.net.cn/\">https://www.redis.net.cn/</a></p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><img src=\"/2025/03/13/Redis/image-20250313121938596.png\" alt=\"image-20250313121938596\"></p>\n<h4 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h4><p><strong>字符串：</strong></p>\n<ul>\n<li>set key value—设置指定key的值</li>\n<li>get key—获取指定key的值</li>\n<li>setex key seconds value—设置指定key的值，并在seconds后过期(常用于验证码)</li>\n<li>setnx key value—只有在key不存在时设置key的值</li>\n</ul>\n<p><strong>哈希：</strong></p>\n<ul>\n<li>hset key field value—设置指定key的字段和值</li>\n<li>hget key field—获取指定key的字段的值</li>\n<li>hdel key field—删除指定key的字段</li>\n<li>hkeys key—显示所有字段</li>\n<li>hvals key—显示所有值</li>\n</ul>\n<p><strong>列表：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250313125814412.png\" alt=\"image-20250313125814412\"></p>\n<p><strong>集合：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250316132341779.png\" alt=\"image-20250316132341779\"></p>\n<p><strong>有序集合：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250316133144948.png\" alt=\"image-20250316133144948\"></p>\n<p><strong>通用命令：</strong></p>\n<p><img src=\"/2025/03/13/Redis/image-20250316134410583.png\" alt=\"image-20250316134410583\"></p>\n<h2 id=\"Java中操作Redis\"><a href=\"#Java中操作Redis\" class=\"headerlink\" title=\"Java中操作Redis\"></a>Java中操作Redis</h2><p><img src=\"/2025/03/13/Redis/image-20250316135458506.png\" alt=\"image-20250316135458506\"></p>\n"},{"title":"Java基础复盘","date":"2025-02-03T16:00:00.000Z","updated":"2025-02-16T16:00:00.000Z","swiper_index":1,"_content":"\n## 一、Java概述\n\n### 1.Java定义\n\n由Sun公司于1995发布的一种编程语言和计算平台。\n\n主要分为三个版本：JavaSE---标准版，JavaEE---企业版，JavaME---微型版。\n\n### 2.Java特点\n\n1.**面向对象**，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。\n\n2.**静态语言**。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。\n\n3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。\n\n4.**容易实现多线程**。在用户空间中实现多线程。\n\n5.**高性能**。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。\n\n6.**自动管理对象的生命周期**。安全。\n\n7.功能强大和简单易用。\n\n## 二、Java开发环境\n\nJDK包括jre和核心类库。jre包括jvm。\n\njre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。\n\n## 三、Java基础语法\n\n### 1.数据类型\n\n四类八种：\n\n1.整数型：\nbyte一个字节即8位(-128-127)，\nshort两个字节即16位(-32768-32767)，\nint4个字节即32位(-2147283648-2147483647)，\nlong八个字节即64位(-9e18-9e18)---后加L\n\n2.浮点型：\nfloat4字节即32位---精确到到小数点后六位---后加f，\ndouble8字节即64位精确到小数点后15位---后加d。\n\n3.字符型：\nchar类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。\n\n4.布尔型Boolean类型：只有true或false。\n\n### 2.基础语法\n\n1.大小写敏感\n\n2.类名采用大驼峰命名法(即MyClass类似的)\n\n3.包名小写(网址倒序)\n\n4方法名采用小驼峰命名法(即myFirstMethod类似的)\n\n### 3.运算符\n\n1.**赋值运算符’=‘**，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：\n\n- **浅拷贝**：复制对象的字段值，但引用类型的字段仍然指向同一个对象。\n\n- **深拷贝**：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。  \n\n2.自增自减运算符：\n\n![](Java基础复盘/image-20250201135214019.png)\n\n3.算数运算符与比较运算符和数学差不多\n\n4.逻辑运算符与数学差不多，按位运算符比较的是二进制位\n\n5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：\n\n​\t8>>1=4;9<<2=36;\n\n6.三元运算符：语法为：\n\n​\t**条件表达式？表达式1：表达式2**\n\n条件表达式为true就调用表达式1，否则调用表达式2.\n\n\n\n## 四、Java执行流程控制\n\n### 1.条件语句\n\n1.if...else\n\n`if(表达式) {`\n\n​\t`表达式为真执行；`\n\n`}`\n\n`else {`\n\n​\t`否则执行`\n\n`}`\n\n2.switch用于小范围单个值\n\n`switch(变量) {`\n\n​\t`case 值1：`\n\n​\t\t`表达式1；`\n\n​\t\t`break；`\n\n​\t`case 值2：`\n\n​\t\t`表达式2：`\n\n​\t\t`break；`\n\n​\t`......`\n\n​\t`default：`\n\n​\t\t`表达式n;`\n\n​\t\t`break;`\n\n`}`\n\n注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的`case`开始执行，直到遇到`break`语句或`switch`块的末尾为止，而不会自动停止。\n\n### 2.循环语句\n\nwhile，do...while，for和for-each\n\nwhile(表达式) {\n\n​\t为真执行并再次调用while()；\n\n}\n\ndo {\n\n​\t第一次直接执行，后续满足表达式执行；\n\n}while(表达式)；\n\nfor( 初始化;条件 ;步进 ) { 条件为真执行}\n\nfor-each例如:\n\n​\tint array[]={1,2,3}\n\n​\tfor(auto arr: array) {\n\n​\t\tSystem.out.println(arr);\n\n​\t}\n\n打印数组。\n\n### 3.跳转语句\n\n有break，continue和return\n\nbreak用于退出当前循环\n\ncontinue用于退出当次循环进入下一次循环\n\nreturn直接结束本次函数调用\n\n## 五、面向对象\n\n### 1.类和对象\n\n类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。\n\n### 2.对象的创建\n\n1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：\n\n`Car carKey；`\n\n但是我们一般在创建对象引用时会同时把一个对象赋给它如：\n\n`Car carKey = new Car();`\n\n### 3.属性和方法\n\n属性也被称为字段，属性可以是对象，也可以是基本数据类型。\n\n方法也就是函数，意思是做某些事情。\n\n方法的示例：\n\n访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){\n\n​\t方法体;\n\n} \n\n如果没有指定修饰符默认同包访问权限(package-private)；\n\n#### (1)构造方法\n\n构造方法也称构造器，构造函数，它是一种特殊的方法。\n\n特点：\n\n1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。\n\n2.它的方法名称必须和类名相同，\n\n3.没有返回值类型(连void都没有)。\n\n4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。\n\n5.可以重载，只要参数列表不同。\n\n6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。\n\n7.构造方法不能被继承或重写，但可以通过`super()`调用父类的构造方法。\n\n#### (2)方法重载\n\n方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。\n\n#### (3)方法的重写\n\n方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。\n\n要实现方法重写，必须满足以下条件：\n\n1. **继承关系**：子类必须继承父类。\n2. **方法名和参数列表相同**：子类中的方法必须与父类中的方法具有相同的名称和参数列表。\n3. **返回值类型相同或兼容**：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。\n4. **访问修饰符的限制**：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是`public`，子类方法不能是`protected`或`private`。\n5. **异常声明的限制**：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。\n\n### 4.初始化\n\n在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：\n\n#### (1) 类的初始化\n\n类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：\n\n- **加载**：将类的`.class`文件加载到JVM内存中。\n- **连接**：\n  - **验证**：检查类的结构是否正确，是否符合Java规范。\n  - **准备**：为类的静态变量分配内存，并设置默认初始值。\n  - **解析**：将类、接口、字段和方法的符号引用转换为直接引用。\n- **初始化**：执行类构造器`<clinit>`方法，完成静态变量的赋值和静态代码块的执行。\n\n**示例**：\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块执行\");\n    }\n    static int staticVar = 10;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(MyClass.staticVar); // 触发类的初始化\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块执行\n10\n```\n\n#### (2) 成员初始化\n\n成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：\n\n- **默认初始化**：由JVM自动为成员变量赋予默认值。例如，`int`类型默认为`0`，`double`类型默认为`0.0`，`boolean`类型默认为`false`，对象引用类型默认为`null`。\n- **显式初始化**：在成员变量声明时直接赋值。\n- **构造器初始化**：通过构造器为成员变量赋值。\n\n**示例**：\n\n```java\nclass MyClass {\n    int instanceVar = 10; // 显式初始化\n    static int staticVar = 20; // 显式初始化\n    int anotherVar; // 默认初始化为0\n}\n```\n\n#### (3) 构造器初始化\n\n构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    int instanceVar;\n\n    // 构造器\n    public MyClass(int value) {\n        instanceVar = value; // 构造器初始化\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(100);\n        System.out.println(obj.instanceVar); // 输出100\n    }\n}\n```\n\n#### (4) 数组初始化\n\n数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：\n\n- **静态初始化**：在声明数组时直接指定数组元素的值。\n- **动态初始化**：指定数组的长度，由JVM自动为数组元素赋予默认值。\n\n**示例**：\n\njava复制\n\n```java\n// 静态初始化\nint[] arr1 = {1, 2, 3, 4, 5};\n\n// 动态初始化\nint[] arr2 = new int[5]; // 默认初始化为0\n```\n\n#### (5) 初始化顺序\n\nJava中对象的初始化顺序如下：\n\n1. **加载类**：加载类的`.class`文件。\n2. **静态变量和静态方法块初始化**：按照代码的顺序，先初始化静态变量，再执行静态代码块。\n3. **实例变量初始化**：按照代码的顺序，先初始化实例变量，再执行实例代码块。\n4. **构造器初始化**：执行构造器，为对象的成员变量赋值。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块1\");\n    }\n\n    static int staticVar = 10; // 静态变量初始化\n\n    {\n        System.out.println(\"实例代码块1\");\n    }\n\n    int instanceVar = 20; // 实例变量初始化\n\n    public MyClass() {\n        System.out.println(\"构造器\");\n    }\n\n    static {\n        System.out.println(\"静态代码块2\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块1\n静态代码块2\n实例代码块1\n构造器\n```\n\n### 总结\n\n- **类初始化**：加载类、静态变量初始化和执行静态代码块。\n- **成员初始化**：包括默认初始化、显式初始化和构造器初始化。\n- **构造器初始化**：通过构造器为对象的成员变量赋值。\n- **数组初始化**：静态初始化和动态初始化。\n- **初始化顺序**：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。\n\n### 5.对象的销毁\n\nJava和c/c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由**Java虚拟机**进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。\n\n#### (1)对象作用域\n\n绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。\n\n`{`\n\n​\t`int a = 11;`\n\n​\t`{`\n\n​\t\t`int b = 22;`\n\n​\t`}`\n\n`}`\n\n变量a会在两个{}中生效，而变量b只在自己的{}内生效。\n\n#### (2)this和super\n\n二者都是关键字。\n\n**this**作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。\n\n调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。![](Java基础复盘/image-20250207203153099.png)\n\nthis用在构造方法时this(参数)需要放在第一行，否则编译不通过。\n\n**super**可以调用父类的方法，属性，指向父类。其他同this。\n\n## 六、访问控制权限\n\n访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。\n\nJava中成员的访问权限一共有四种，分别是public，protected，default，private。如下\n\n![image-20250207211115238](Java基础复盘/image-20250207211115238.png)\n\n### 1.继承\n\n三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。\n\n![image-20250207212537344](Java基础复盘/image-20250207212537344.png)\n\n继承的关键字是**extends**，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：\n\n`class Father{}`\n\n`class Son extends Father{}`\n\n子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。\n\n### 2.多态\n\n三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。\n\n如何实现多态？达成三个充要条件：\n\n- 继承\n- 重写父类方法\n- 父类引用指向子类对象  \n\n比如以下代码：\n\n```java\nclass Fruit{\n    int num;\n\n    public void eat() {\n        System.out.println(\"eat Fruit\");\n    }\n}\nclass Pear extends Fruit{\n    @Override\n    public void eat() {\n        super.num = 10;\n        System.out.println(\"eat\"+num+\"Pear\");\n    }\n}\n\npublic class DuoTai {\n    public static void main(String[] args) {\n        Fruit fruit = new Pear();\n        fruit.eat();\n    }\n}\n```\n\n可以发现main方法中Fruit fruit = new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态->父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。\n\n### 3.组合\n\n组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话**多用组合，少用继承**。二者关系如下：\n\n![image-20250207222214122](Java基础复盘/image-20250207222214122.png)\n\n### 4.动态代理\n\n为什么需要代理：代理可以无侵入式的给对象增加其他功能。\n\n代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：\n\n![image-20250220105056954](Java基础复盘/image-20250220105056954.png)\n\njava如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。\n\n![](Java基础复盘/image-20250223201954533.png)\n\n**定义一个接口**\n\n```java\npublic interface HelloService {\n    void sayHello(String name);\n}\n```\n\n**实现该接口**\n\n```java\npublic class HelloServiceImpl implements HelloService {\n    @Override\n    public void sayHello(String name) {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}\n```\n\n**创建一个`InvocationHandler`实现类**\n\n```java\nimport java.lang.reflect.*;\n\npublic class MyInvocationHandler implements InvocationHandler {\n    private final Object target; // 被代理对象\n\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 在方法调用之前执行的操作\n        System.out.println(\"Before calling: \" + method.getName());\n        // 调用原始方法\n        Object result = method.invoke(target, args);\n        // 在方法调用之后执行的操作\n        System.out.println(\"After calling: \" + method.getName());\n        return result;\n    }\n}\n```\n\n**使用`Proxy`生成代理对象**\n\n```java\npublic class JdkProxyDemo {\n    public static void main(String[] args) {\n        // 创建目标对象\n        HelloService target = new HelloServiceImpl();\n        // 创建InvocationHandler实例\n        MyInvocationHandler handler = new MyInvocationHandler(target);\n        // 生成代理对象\n        HelloService proxy = (HelloService) Proxy.newProxyInstance(\n                HelloService.class.getClassLoader(), // 目标类的类加载器\n                new Class<?>[]{HelloService.class}, // 目标类实现的接口\n                handler // InvocationHandler\n        );\n        // 调用代理对象的方法\n        proxy.sayHello(\"Kimi\");\n    }\n}\n```\n\n**输出结果**\n\n```\nBefore calling: sayHello\nHello, Kimi!\nAfter calling: sayHello\n```\n\n### 5.向上转型\n\n向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。\n\n向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。\n\n向下转型相反而且不是自动完成，需要强制指定。\n\n### 6.statics\n\n`static` 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 `static` 关键字的一些主要用途：\n\n- **静态变量**：定义类的全局变量，所有实例共享。\n- **静态方法**：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。\n- **静态初始化块**：用于初始化静态变量，当类被加载时执行一次。提示程序性能。\n\n### 7.final\n\n`final` 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 `final` 关键字的一些主要用途：\n\n- **最终变量**：一旦被初始化，其值就不能被改变。\n- **最终方法**：不能被子类重写。\n- **最终类**：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。\n\n## 七、接口和抽象类\n\n在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于**定义规范和提供代码复用**，但它们在功能、用途和语法上有很大的区别。\n\n### 一、定义\n\n1. **接口(Interface)**\n   - 接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 `public` 和 `abstract` 的，字段默认是 `public static final` 的。\n   - 接口的目的是定义一组行为规范，**任何实现了该接口的类都必须实现接口中定义的所有方法**。\n   - 接口可以被多个类实现，从而实现多继承的效果。\n2. **抽象类(Abstract Class)**\n   - 抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。\n   - 抽象类的主要目的是**为子类提供一个通用的模板**，**子类必须实现抽象类中的所有抽象方法**。\n   - 抽象类只能被单个类继承，不能实现多继承。\n\n### 二、区别\n\n1. **方法实现**\n   - **接口**：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(`default`)和静态方法(`static`)，但这些方法的使用场景相对有限。\n   - **抽象类**：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。\n2. **字段**\n   - **接口**：接口中的字段默认是 `public static final` 的，即常量。它们必须在声明时初始化，且不能被修改。\n   - **抽象类**：抽象类可以包含普通字段(实例变量)，这些字段可以是 `public`、`protected` 或 `private` 的，也可以是静态的或非静态的。\n3. **继承和实现**\n   - **接口**：一个类可以实现多个接口。这是实现多继承的一种方式。\n   - **抽象类**：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。\n4. **构造方法**\n   - **接口**：接口不能有构造方法，因为接口不能被实例化。\n   - **抽象类**：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。\n5. **实例化**\n   - **接口**：接口不能被实例化。\n   - **抽象类**：抽象类也不能被实例化，但可以通过子类来实例化。\n\n### 三、使用场景\n\n1. **接口**\n   - 当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 `Animal` 接口，其中包含 `eat()` 和 `move()` 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。\n   - 当**需要实现多继承时**，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。\n2. **抽象类**\n   - 当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 `Vehicle` 抽象类，其中包含 `move()` 抽象方法和一些通用字段(如 `speed`、`color` 等)，然后让 `Car`、`Bike` 等子类继承并实现具体的行为。\n   - 当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。\n\n## 八、异常\n\nException位于**java.lang**包下，它是一种顶级接口，继承于**Throwable**类，**Throwable类是Java语言中所以错误(error)和异常(exception)类的父类**。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。\n\n在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。\n\n### 一、异常的分类\n\nJava中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。\n\n1. **受检查的异常(Checked Exception)**\n   - 这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(`FileNotFoundException`)、网络连接失败(`IOException`)等。\n   - 受检查的异常必须在代码中显式处理，否则编译器会报错。\n   - 受检查的异常继承自`Exception`类，但不包括`RuntimeException`及其子类。\n2. **非受检查的异常(Unchecked Exception)**\n   - 这些异常是程序逻辑错误或运行时错误，例如空指针异常(`NullPointerException`)、数组越界异常(`ArrayIndexOutOfBoundsException`)等。\n   - 非受检查的异常继承自`RuntimeException`类，编译器不会强制要求处理这些异常。\n   - 但为了程序的健壮性，通常也会对这些异常进行捕获和处理。\n3. **错误(Error)**\n   - 错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(`VirtualMachineError`)、线程死亡(`ThreadDeath`)等。\n   - 错误继承自`Error`类，通常不需要程序员处理，因为它们通常表示系统级别的问题。\n\n### 二、异常处理机制\n\nJava提供了以下几种机制来处理异常：\n\n1. **try-catch**\n   - `try`块用于包裹可能会抛出异常的代码，`catch`块用于捕获和处理异常。\n   - 可以有多个`catch`块来捕获不同类型的异常。\n2. **finally**\n   - `finally`块用于在`try-catch`块执行完毕后执行清理操作，无论是否捕获到异常，`finally`块都会执行。\n   - 常用于关闭文件流、释放资源等操作。\n3. **throw**\n   - `throw`关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。\n4. **throws**\n   - `throws`关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。\n\n### 三、异常处理的流程\n\n1. **抛出异常**\n   - 当程序运行时遇到错误，会创建一个异常对象并抛出。\n   - 异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。\n2. **捕获异常**\n   - 使用`try-catch`块捕获异常，捕获到异常后可以在`catch`块中进行处理。\n3. **处理异常**\n   - 在`catch`块中可以记录日志、提示用户、尝试恢复等操作。\n4. **清理资源**\n   - 使用`finally`块进行资源清理，确保资源被正确释放。\n\n### 四、示例代码\n\n以下是一个简单的Java异常处理示例：\n\n```java\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        try {\n            // 可能会抛出异常的代码\n            int result = divide(10, 0);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            // 捕获并处理特定类型的异常\n            System.out.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            // 捕获其他类型的异常\n            System.out.println(\"General Error: \" + e.getMessage());\n        } finally {\n            // 无论是否捕获到异常，finally块都会执行\n            System.out.println(\"Finally block executed.\");\n        }\n    }\n\n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### 五、自定义异常\n\nJava允许程序员定义自己的异常类，自定义异常类通常继承自`Exception`类或其子类。自定义异常可以提供更具体的错误信息。\n\n```java\npublic class MyCustomException extends Exception {\n    public MyCustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            checkAge(15);\n        } catch (MyCustomException e) {\n            System.out.println(\"Caught custom exception: \" + e.getMessage());\n        }\n    }\n\n    public static void checkAge(int age) throws MyCustomException {\n        if (age < 18) {\n            throw new MyCustomException(\"Age must be at least 18.\");\n        }\n        System.out.println(\"Age is valid.\");\n    }\n}\n```\n\n### 六、如何实践\n\n1. **明确异常的用途**\n   - 受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。\n2. **合理使用`try-catch`**\n   - 不要捕获所有异常，只捕获需要处理的异常。\n3. **避免空的`catch`块**\n   - 捕获异常后应该进行处理，而不是忽略异常。\n4. **使用`finally`块清理资源**\n   - 确保资源被正确释放，避免资源泄漏。\n5. **自定义异常**\n   - 当系统提供的异常类不足以描述错误时，可以定义自定义异常。\n\n### 七、异常处理的优缺点\n\n**优点**\n\n- 提高程序的健壮性，避免程序因错误而崩溃。\n- 提供详细的错误信息，方便调试和修复。\n- 可以通过异常处理机制实现程序的容错机制。\n\n**缺点**\n\n- 异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。\n- 如果滥用异常处理机制，可能会导致程序性能下降。\n\n总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。\n\n## 九、内部类\n\n写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。\n\n### 作用：\n\n**1.实现多继承**，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。\n\n2.**实现回调机制**，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。\n\n3.**封装逻辑**，避免暴露具体实现。\n\n内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。\n\n普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:\n\n```java\nOuter.Inner inner = outer.new Inner(); // 创建内部类实例\n```\n\n匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：\n\n```java\ninterface MyInterface {\n    void display();\n}\n\nclass Outer {\n    void method() {\n        MyInterface mi = new MyInterface() {\n            @Override\n            public void display() {\n                System.out.println(\"Anonymous inner class\");\n            }\n        };\n        mi.display();\n    }\n}\n```\n\n## 十、集合\n\n### collections框架图\n\n![image-20250216221349436](Java基础复盘/image-20250216221349436.png)\n\n### iterable接口\n\n定义了一种方法`iterator()`，允许以统一的方式(增强for)遍历集合。\n\n### 顶层接口\n\n**Collection** 是一个顶层接口，它主要用来定义集合的约定\n**List**接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类\n**Set**接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。\n\n**Queue**是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。\n\nSortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。\n\nMap是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。\n\n### 类(数据结构)\n\n1. **ArrayList**：动态数组实现的列表，支持快速随机访问。\n2. **Vector**：与`ArrayList`类似，但它是同步的，适用于多线程环境。\n3. **LinkedList 类**：双向链表实现的列表，支持快速插入和删除。\n4. **Stack**：后进先出（LIFO）的栈，基于`Vector`实现。\n5. **HashSet**：基于哈希表实现的集合，不允许重复元素。\n6. **TreeSet**：基于红黑树实现的有序集合。\n7. **LinkedHashSet 类**：`HashSet`的链表版本，维护元素插入顺序。\n8. **PriorityQueue**：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。\n9. **HashMap**：基于哈希表实现的映射，允许一个null键和多个null值。\n10. **TreeMap 类**：基于红黑树实现的有序映射。\n11. **LinkedHashMap 类**：`HashMap`的链表版本，维护元素插入或访问顺序。\n12. **Hashtable 类**：与`HashMap`类似，但它是同步的，适用于多线程环境。\n13. **IdentityHashMap 类**：`HashMap`的变体，使用引用相等性而不是对象相等性。\n14. **WeakHashMap 类**：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。\n15. **Collections 类**：提供对集合的静态方法操作，如排序、搜索和修改。\n\n### 集合实现类特征图\n\n![image-20250216222117731](Java基础复盘/image-20250216222117731.png)\n\n## 十一、泛型\n\n一种语言特性，允许开发者在定义类，接口或方法时使用**类型参数**，从而**提高代码的复用性和灵活性**。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时**保持类型安全**。\n\n### **类型参数**\n\n类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。\n\n**类型参数的命名规范**\n\n- 通常使用单个大写字母表示类型参数，常见的有：\n  - `T`（Type）：表示任意类型。\n  - `E`（Element）：表示集合中的元素类型。\n  - `K`（Key）：表示键的类型。\n  - `V`（Value）：表示值的类型。\n  - `N`（Number）：表示数字类型。\n  - `S`、`U`、`V` 等：用于多个类型参数的区分。\n\n### **类型擦除**\n\nJava泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组\n\n```java\nBox<String>[] boxes = new Box<String>[10]; // 编译错误\n```\n\n但是可以通过强制类型转换创建\n\n```java\nBox<String>[] boxes = (Box<String>[]) new Box[10]; // 需要强制类型转换\n```\n\n### 类型限制\n\n1.**不能使用原始数据类型，只能使用包装类**\n\n2.**不能创建泛型的静态字段**，因为静态字段属于类，而泛型类型是实例相关的。\n\n```java\npublic class Box<T> {\n    private static T value; // 编译错误\n}\n```\n\n3.**不能实例化泛型类型参数**：\n\n```java\npublic class Box<T> {\n    public void set(T value) {\n        T newValue = new T(); // 编译错误\n    }\n}\n```\n\n### 通配符\n\n通配符（`?`）用于表示未知类型，分为无界通配符和有界通配符：\n\n1. **无界通配符**：\n\n   ```java\n   Box<?> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是未知的，可以是任何类型。\n\n2. **有界通配符**：\n\n   上界\n\n   ```java\n   Box<? extends Number> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Number` 或其子类。\n\n   ```java\n   List<String> stringList = new ArrayList<>();\n   List<? extends Object> objectList = stringList; // 协变\n   ```\n\n   下界\n\n   ```java\n   Box<? super Integer> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Integer` 或其父类。\n\n   ```java\n   List<Object> objectList = new ArrayList<>();\n   List<? super String> stringList = objectList; // 逆变\n   ```\n\n## 十二、反射\n\n啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。\n\n![image-20250220123104283](Java基础复盘/image-20250220123104283.png)\n\n### 获取对象\n\n```java\npackage com.dmw.basedemo.reflect;\n\npublic class Demo {\n    public static void main(String[] args) throws ClassNotFoundException {\n        /*\n        * 获取class对象的三种方式：\n        *   1.Class.forName(\"全类名\");\n        *   2.类名.class\n        *   3.对象.getClass();\n        * */\n\n        //第一种方式\n        //全类名：包名+类名\n        //最为常用\n        Class clazz1 = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n\n        //第二种方式\n        //一般用于传参\n        Class clazz2 = Student.class;\n\n        //第三种方式\n        //当我们已经有了这个类的对象时，才可以使用。\n        Student student = new Student();\n        Class clazz3 = student.getClass();\n\n        System.out.println(clazz1 == clazz2);\n        System.out.println(clazz1 == clazz3);\n    }\n}\n```\n\n![image-20250220122408100](Java基础复盘/image-20250220122408100.png)\n\n### 获取对象的构造方法\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Parameter;\n\npublic class Demo2Constructor {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        /*\n        * Class类中用于获取构造方法的方法\n        *   Constructor<?>[] getConstructors()获取公共的构造方法\n        *   Constructor<?>[] getDeclaredConstructors()获取所有构造方法\n        *   Constructor<?>[] getConstructor(Class<?>...parameterTypes)获取公共的某个构造方法\n        *   Constructor<?>[] getConstructors(Class<?>...parameterTypes)获取某个构造方法\n        * */\n\n        //1.获取class字节码文件对象\n        Class clazz= Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2获取构造方法\n        Constructor[] cons = clazz.getConstructors();\n        for(Constructor c : cons) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor[] cons1 = clazz.getDeclaredConstructors();\n        for(Constructor c : cons1) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor cons2 = clazz.getDeclaredConstructor(int.class);\n        System.out.println(cons2);\n        System.out.println(\"---------------\");\n        Constructor cons3 = clazz.getDeclaredConstructor(String.class);\n        System.out.println(cons3);\n        System.out.println(\"---------------\");\n        Constructor cons4 = clazz.getDeclaredConstructor(String.class, int.class);\n        System.out.println(cons4);\n        System.out.println(\"---------------\");\n        //获取权限修饰符\n        int Modifiers = cons4.getModifiers();\n        System.out.println(Modifiers);//其中1为public，2为protected，4为private\n        System.out.println(\"---------------\");\n        //获取参数\n        Parameter[] parameters = cons4.getParameters();\n        for(Parameter p : parameters) {\n            System.out.println(p);\n        }\n        //暴力反射：表示临时取消权限校验\n        cons4.setAccessible(true);\n        //利用获取到的构造方法来构造对象\n        Student stu = (Student) cons4.newInstance(\"张三\", 23);\n        System.out.println(stu);\n    }\n}\n\n```\n\n![image-20250222225338830](Java基础复盘/image-20250222225338830.png)\n\n其中**权限修饰符常量字段值**如下\n\n![](Java基础复盘/image-20250222224835797.png)\n\n### 获取对象的成员变量\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Field;\n\npublic class Demo3Var {\n    /*\n    * Class类中用于获取成员变量的方法\n    * Field[] getFields();//返回所有公共成员变量对象的数组\n    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组\n    * Field getField(String name);//返回单个公共成员变量对象\n    * Field[] getDeclareField(String name);//返回单个成员变量对象\n    * */\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n        //1.获取class字节码文件对象\n        Class clazz = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2.获取所有的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n        //获取单个的成员变量\n        Field age = clazz.getDeclaredField(\"age\");\n        age.setAccessible(true);\n        System.out.println(age);\n        //获取权限修饰符\n        int modifiers = age.getModifiers();\n        System.out.println(modifiers);\n        //获取成员变量的名字\n        String n = age.getName();\n        System.out.println(n);\n        //获取成员变量的类型\n        Class<?> type = age.getType();\n        System.out.println(type);\n        //获取成员变量记录的值\n        Student student = new Student(\"zhangsan\", 18);\n        age.setAccessible(true);\n        Object o = age.get(student);//获取student这个对象age记录的值\n        System.out.println(o);\n    }\n}\n```\n\n![image-20250223163956807](Java基础复盘/image-20250223163956807.png)\n\n### 获取对象中的成员方法\n\n```java\n/*\n* Class类中用于获取对象中的成员方法\n* Method[] getMethods();//获取当前类及其父类的所有公有方法。\n* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。\n* Method getMethod(String name, Class<?>... parameterTypes)：获取公有方法（包括父类方法）\n* Method getDeclaredMethod(String name, Class<?>... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。\n*\n* 调用方法\n* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：\n    obj是目标对象实例。即调用者\n    args是方法的参数。\n    如果目标方法是静态方法，则obj可以为null。\n* */\n```\n\n### 反射的使用\n\n**1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑**\n\n```\npackage com.dmw.basedemo.reflect;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\n\npublic class Demo5Application {\n\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)\n    public static void main(String[] args) throws IOException, IllegalAccessException {\n        Student s = new Student(\"dmw\",23);\n        saveObject(s);\n    }\n\n    public static void saveObject(Object o) throws IOException, IllegalAccessException {\n        //1.获取class字节码文件\n        Class c = o.getClass();\n        //2.创建IO流\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"src\\\\a.txt\"));\n        //3.获取所有的成员变量\n        Field[] fields = c.getDeclaredFields();\n        for (Field f : fields) {\n            f.setAccessible(true);\n            String name = f.getName();\n            Object value = f.get(o);\n            bw.write(name+\":\"+value);\n            bw.newLine();\n        }\n        bw.close();\n    }\n}\n```\n\n![image-20250223191142600](Java基础复盘/image-20250223191142600.png)\n\n**2.跟配置文件相结合动态的创建对象，并调用方法**\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Objects;\nimport java.util.Properties;\n\npublic class Demo6Application2 {\n    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        //1.读取配置文件的信息\n        Properties prop = new Properties();\n        FileInputStream fis = new FileInputStream(\"src/prop.properties\");\n        prop.load(fis);\n        fis.close();\n        System.out.println(prop);\n\n        //2.获取全类名和方法名\n        String className = (String) prop.get(\"classname\");\n        String methodName = (String) prop.get(\"method\");\n        System.out.println(className);\n        System.out.println(methodName);\n\n        //3.利用反射创建对象并运行方法\n        Class clazz = Class.forName(className);\n        //获取构造方法\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        Object o = constructor.newInstance();\n        System.out.println(o);\n        Method method = clazz.getDeclaredMethod(methodName);\n        method.setAccessible(true);\n        method.invoke(o);//利用构造方法创建的对象调用此方法\n    }\n}\n```\n\n```properties\nclassname=com.dmw.basedemo.reflect.Student\nmethod=study\n```\n\n![image-20250223200310462](Java基础复盘/image-20250223200310462.png)\n\n## 十三、枚举\n\n## 十四、I/O\n\n### 1.File类\n\n### 2.基础IO类和相关方法\n\n## 十五、注解\n\n## 十六、关于null的几种处理方式\n\n","source":"_posts/Java基础复盘.md","raw":"---\ntitle: Java基础复盘\ndate: 2025-02-04\nupdated: 2025-02-17\ntags: java基础\ncategories: java\nswiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n\n## 一、Java概述\n\n### 1.Java定义\n\n由Sun公司于1995发布的一种编程语言和计算平台。\n\n主要分为三个版本：JavaSE---标准版，JavaEE---企业版，JavaME---微型版。\n\n### 2.Java特点\n\n1.**面向对象**，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。\n\n2.**静态语言**。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。\n\n3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。\n\n4.**容易实现多线程**。在用户空间中实现多线程。\n\n5.**高性能**。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。\n\n6.**自动管理对象的生命周期**。安全。\n\n7.功能强大和简单易用。\n\n## 二、Java开发环境\n\nJDK包括jre和核心类库。jre包括jvm。\n\njre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。\n\n## 三、Java基础语法\n\n### 1.数据类型\n\n四类八种：\n\n1.整数型：\nbyte一个字节即8位(-128-127)，\nshort两个字节即16位(-32768-32767)，\nint4个字节即32位(-2147283648-2147483647)，\nlong八个字节即64位(-9e18-9e18)---后加L\n\n2.浮点型：\nfloat4字节即32位---精确到到小数点后六位---后加f，\ndouble8字节即64位精确到小数点后15位---后加d。\n\n3.字符型：\nchar类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。\n\n4.布尔型Boolean类型：只有true或false。\n\n### 2.基础语法\n\n1.大小写敏感\n\n2.类名采用大驼峰命名法(即MyClass类似的)\n\n3.包名小写(网址倒序)\n\n4方法名采用小驼峰命名法(即myFirstMethod类似的)\n\n### 3.运算符\n\n1.**赋值运算符’=‘**，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：\n\n- **浅拷贝**：复制对象的字段值，但引用类型的字段仍然指向同一个对象。\n\n- **深拷贝**：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。  \n\n2.自增自减运算符：\n\n![](Java基础复盘/image-20250201135214019.png)\n\n3.算数运算符与比较运算符和数学差不多\n\n4.逻辑运算符与数学差不多，按位运算符比较的是二进制位\n\n5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：\n\n​\t8>>1=4;9<<2=36;\n\n6.三元运算符：语法为：\n\n​\t**条件表达式？表达式1：表达式2**\n\n条件表达式为true就调用表达式1，否则调用表达式2.\n\n\n\n## 四、Java执行流程控制\n\n### 1.条件语句\n\n1.if...else\n\n`if(表达式) {`\n\n​\t`表达式为真执行；`\n\n`}`\n\n`else {`\n\n​\t`否则执行`\n\n`}`\n\n2.switch用于小范围单个值\n\n`switch(变量) {`\n\n​\t`case 值1：`\n\n​\t\t`表达式1；`\n\n​\t\t`break；`\n\n​\t`case 值2：`\n\n​\t\t`表达式2：`\n\n​\t\t`break；`\n\n​\t`......`\n\n​\t`default：`\n\n​\t\t`表达式n;`\n\n​\t\t`break;`\n\n`}`\n\n注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的`case`开始执行，直到遇到`break`语句或`switch`块的末尾为止，而不会自动停止。\n\n### 2.循环语句\n\nwhile，do...while，for和for-each\n\nwhile(表达式) {\n\n​\t为真执行并再次调用while()；\n\n}\n\ndo {\n\n​\t第一次直接执行，后续满足表达式执行；\n\n}while(表达式)；\n\nfor( 初始化;条件 ;步进 ) { 条件为真执行}\n\nfor-each例如:\n\n​\tint array[]={1,2,3}\n\n​\tfor(auto arr: array) {\n\n​\t\tSystem.out.println(arr);\n\n​\t}\n\n打印数组。\n\n### 3.跳转语句\n\n有break，continue和return\n\nbreak用于退出当前循环\n\ncontinue用于退出当次循环进入下一次循环\n\nreturn直接结束本次函数调用\n\n## 五、面向对象\n\n### 1.类和对象\n\n类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。\n\n### 2.对象的创建\n\n1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：\n\n`Car carKey；`\n\n但是我们一般在创建对象引用时会同时把一个对象赋给它如：\n\n`Car carKey = new Car();`\n\n### 3.属性和方法\n\n属性也被称为字段，属性可以是对象，也可以是基本数据类型。\n\n方法也就是函数，意思是做某些事情。\n\n方法的示例：\n\n访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){\n\n​\t方法体;\n\n} \n\n如果没有指定修饰符默认同包访问权限(package-private)；\n\n#### (1)构造方法\n\n构造方法也称构造器，构造函数，它是一种特殊的方法。\n\n特点：\n\n1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。\n\n2.它的方法名称必须和类名相同，\n\n3.没有返回值类型(连void都没有)。\n\n4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。\n\n5.可以重载，只要参数列表不同。\n\n6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。\n\n7.构造方法不能被继承或重写，但可以通过`super()`调用父类的构造方法。\n\n#### (2)方法重载\n\n方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。\n\n#### (3)方法的重写\n\n方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。\n\n要实现方法重写，必须满足以下条件：\n\n1. **继承关系**：子类必须继承父类。\n2. **方法名和参数列表相同**：子类中的方法必须与父类中的方法具有相同的名称和参数列表。\n3. **返回值类型相同或兼容**：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。\n4. **访问修饰符的限制**：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是`public`，子类方法不能是`protected`或`private`。\n5. **异常声明的限制**：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。\n\n### 4.初始化\n\n在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：\n\n#### (1) 类的初始化\n\n类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：\n\n- **加载**：将类的`.class`文件加载到JVM内存中。\n- **连接**：\n  - **验证**：检查类的结构是否正确，是否符合Java规范。\n  - **准备**：为类的静态变量分配内存，并设置默认初始值。\n  - **解析**：将类、接口、字段和方法的符号引用转换为直接引用。\n- **初始化**：执行类构造器`<clinit>`方法，完成静态变量的赋值和静态代码块的执行。\n\n**示例**：\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块执行\");\n    }\n    static int staticVar = 10;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(MyClass.staticVar); // 触发类的初始化\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块执行\n10\n```\n\n#### (2) 成员初始化\n\n成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：\n\n- **默认初始化**：由JVM自动为成员变量赋予默认值。例如，`int`类型默认为`0`，`double`类型默认为`0.0`，`boolean`类型默认为`false`，对象引用类型默认为`null`。\n- **显式初始化**：在成员变量声明时直接赋值。\n- **构造器初始化**：通过构造器为成员变量赋值。\n\n**示例**：\n\n```java\nclass MyClass {\n    int instanceVar = 10; // 显式初始化\n    static int staticVar = 20; // 显式初始化\n    int anotherVar; // 默认初始化为0\n}\n```\n\n#### (3) 构造器初始化\n\n构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    int instanceVar;\n\n    // 构造器\n    public MyClass(int value) {\n        instanceVar = value; // 构造器初始化\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(100);\n        System.out.println(obj.instanceVar); // 输出100\n    }\n}\n```\n\n#### (4) 数组初始化\n\n数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：\n\n- **静态初始化**：在声明数组时直接指定数组元素的值。\n- **动态初始化**：指定数组的长度，由JVM自动为数组元素赋予默认值。\n\n**示例**：\n\njava复制\n\n```java\n// 静态初始化\nint[] arr1 = {1, 2, 3, 4, 5};\n\n// 动态初始化\nint[] arr2 = new int[5]; // 默认初始化为0\n```\n\n#### (5) 初始化顺序\n\nJava中对象的初始化顺序如下：\n\n1. **加载类**：加载类的`.class`文件。\n2. **静态变量和静态方法块初始化**：按照代码的顺序，先初始化静态变量，再执行静态代码块。\n3. **实例变量初始化**：按照代码的顺序，先初始化实例变量，再执行实例代码块。\n4. **构造器初始化**：执行构造器，为对象的成员变量赋值。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块1\");\n    }\n\n    static int staticVar = 10; // 静态变量初始化\n\n    {\n        System.out.println(\"实例代码块1\");\n    }\n\n    int instanceVar = 20; // 实例变量初始化\n\n    public MyClass() {\n        System.out.println(\"构造器\");\n    }\n\n    static {\n        System.out.println(\"静态代码块2\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块1\n静态代码块2\n实例代码块1\n构造器\n```\n\n### 总结\n\n- **类初始化**：加载类、静态变量初始化和执行静态代码块。\n- **成员初始化**：包括默认初始化、显式初始化和构造器初始化。\n- **构造器初始化**：通过构造器为对象的成员变量赋值。\n- **数组初始化**：静态初始化和动态初始化。\n- **初始化顺序**：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。\n\n### 5.对象的销毁\n\nJava和c/c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由**Java虚拟机**进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。\n\n#### (1)对象作用域\n\n绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。\n\n`{`\n\n​\t`int a = 11;`\n\n​\t`{`\n\n​\t\t`int b = 22;`\n\n​\t`}`\n\n`}`\n\n变量a会在两个{}中生效，而变量b只在自己的{}内生效。\n\n#### (2)this和super\n\n二者都是关键字。\n\n**this**作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。\n\n调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。![](Java基础复盘/image-20250207203153099.png)\n\nthis用在构造方法时this(参数)需要放在第一行，否则编译不通过。\n\n**super**可以调用父类的方法，属性，指向父类。其他同this。\n\n## 六、访问控制权限\n\n访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。\n\nJava中成员的访问权限一共有四种，分别是public，protected，default，private。如下\n\n![image-20250207211115238](Java基础复盘/image-20250207211115238.png)\n\n### 1.继承\n\n三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。\n\n![image-20250207212537344](Java基础复盘/image-20250207212537344.png)\n\n继承的关键字是**extends**，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：\n\n`class Father{}`\n\n`class Son extends Father{}`\n\n子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。\n\n### 2.多态\n\n三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。\n\n如何实现多态？达成三个充要条件：\n\n- 继承\n- 重写父类方法\n- 父类引用指向子类对象  \n\n比如以下代码：\n\n```java\nclass Fruit{\n    int num;\n\n    public void eat() {\n        System.out.println(\"eat Fruit\");\n    }\n}\nclass Pear extends Fruit{\n    @Override\n    public void eat() {\n        super.num = 10;\n        System.out.println(\"eat\"+num+\"Pear\");\n    }\n}\n\npublic class DuoTai {\n    public static void main(String[] args) {\n        Fruit fruit = new Pear();\n        fruit.eat();\n    }\n}\n```\n\n可以发现main方法中Fruit fruit = new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态->父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。\n\n### 3.组合\n\n组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话**多用组合，少用继承**。二者关系如下：\n\n![image-20250207222214122](Java基础复盘/image-20250207222214122.png)\n\n### 4.动态代理\n\n为什么需要代理：代理可以无侵入式的给对象增加其他功能。\n\n代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：\n\n![image-20250220105056954](Java基础复盘/image-20250220105056954.png)\n\njava如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。\n\n![](Java基础复盘/image-20250223201954533.png)\n\n**定义一个接口**\n\n```java\npublic interface HelloService {\n    void sayHello(String name);\n}\n```\n\n**实现该接口**\n\n```java\npublic class HelloServiceImpl implements HelloService {\n    @Override\n    public void sayHello(String name) {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}\n```\n\n**创建一个`InvocationHandler`实现类**\n\n```java\nimport java.lang.reflect.*;\n\npublic class MyInvocationHandler implements InvocationHandler {\n    private final Object target; // 被代理对象\n\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 在方法调用之前执行的操作\n        System.out.println(\"Before calling: \" + method.getName());\n        // 调用原始方法\n        Object result = method.invoke(target, args);\n        // 在方法调用之后执行的操作\n        System.out.println(\"After calling: \" + method.getName());\n        return result;\n    }\n}\n```\n\n**使用`Proxy`生成代理对象**\n\n```java\npublic class JdkProxyDemo {\n    public static void main(String[] args) {\n        // 创建目标对象\n        HelloService target = new HelloServiceImpl();\n        // 创建InvocationHandler实例\n        MyInvocationHandler handler = new MyInvocationHandler(target);\n        // 生成代理对象\n        HelloService proxy = (HelloService) Proxy.newProxyInstance(\n                HelloService.class.getClassLoader(), // 目标类的类加载器\n                new Class<?>[]{HelloService.class}, // 目标类实现的接口\n                handler // InvocationHandler\n        );\n        // 调用代理对象的方法\n        proxy.sayHello(\"Kimi\");\n    }\n}\n```\n\n**输出结果**\n\n```\nBefore calling: sayHello\nHello, Kimi!\nAfter calling: sayHello\n```\n\n### 5.向上转型\n\n向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。\n\n向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。\n\n向下转型相反而且不是自动完成，需要强制指定。\n\n### 6.statics\n\n`static` 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 `static` 关键字的一些主要用途：\n\n- **静态变量**：定义类的全局变量，所有实例共享。\n- **静态方法**：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。\n- **静态初始化块**：用于初始化静态变量，当类被加载时执行一次。提示程序性能。\n\n### 7.final\n\n`final` 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 `final` 关键字的一些主要用途：\n\n- **最终变量**：一旦被初始化，其值就不能被改变。\n- **最终方法**：不能被子类重写。\n- **最终类**：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。\n\n## 七、接口和抽象类\n\n在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于**定义规范和提供代码复用**，但它们在功能、用途和语法上有很大的区别。\n\n### 一、定义\n\n1. **接口(Interface)**\n   - 接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 `public` 和 `abstract` 的，字段默认是 `public static final` 的。\n   - 接口的目的是定义一组行为规范，**任何实现了该接口的类都必须实现接口中定义的所有方法**。\n   - 接口可以被多个类实现，从而实现多继承的效果。\n2. **抽象类(Abstract Class)**\n   - 抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。\n   - 抽象类的主要目的是**为子类提供一个通用的模板**，**子类必须实现抽象类中的所有抽象方法**。\n   - 抽象类只能被单个类继承，不能实现多继承。\n\n### 二、区别\n\n1. **方法实现**\n   - **接口**：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(`default`)和静态方法(`static`)，但这些方法的使用场景相对有限。\n   - **抽象类**：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。\n2. **字段**\n   - **接口**：接口中的字段默认是 `public static final` 的，即常量。它们必须在声明时初始化，且不能被修改。\n   - **抽象类**：抽象类可以包含普通字段(实例变量)，这些字段可以是 `public`、`protected` 或 `private` 的，也可以是静态的或非静态的。\n3. **继承和实现**\n   - **接口**：一个类可以实现多个接口。这是实现多继承的一种方式。\n   - **抽象类**：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。\n4. **构造方法**\n   - **接口**：接口不能有构造方法，因为接口不能被实例化。\n   - **抽象类**：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。\n5. **实例化**\n   - **接口**：接口不能被实例化。\n   - **抽象类**：抽象类也不能被实例化，但可以通过子类来实例化。\n\n### 三、使用场景\n\n1. **接口**\n   - 当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 `Animal` 接口，其中包含 `eat()` 和 `move()` 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。\n   - 当**需要实现多继承时**，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。\n2. **抽象类**\n   - 当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 `Vehicle` 抽象类，其中包含 `move()` 抽象方法和一些通用字段(如 `speed`、`color` 等)，然后让 `Car`、`Bike` 等子类继承并实现具体的行为。\n   - 当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。\n\n## 八、异常\n\nException位于**java.lang**包下，它是一种顶级接口，继承于**Throwable**类，**Throwable类是Java语言中所以错误(error)和异常(exception)类的父类**。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。\n\n在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。\n\n### 一、异常的分类\n\nJava中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。\n\n1. **受检查的异常(Checked Exception)**\n   - 这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(`FileNotFoundException`)、网络连接失败(`IOException`)等。\n   - 受检查的异常必须在代码中显式处理，否则编译器会报错。\n   - 受检查的异常继承自`Exception`类，但不包括`RuntimeException`及其子类。\n2. **非受检查的异常(Unchecked Exception)**\n   - 这些异常是程序逻辑错误或运行时错误，例如空指针异常(`NullPointerException`)、数组越界异常(`ArrayIndexOutOfBoundsException`)等。\n   - 非受检查的异常继承自`RuntimeException`类，编译器不会强制要求处理这些异常。\n   - 但为了程序的健壮性，通常也会对这些异常进行捕获和处理。\n3. **错误(Error)**\n   - 错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(`VirtualMachineError`)、线程死亡(`ThreadDeath`)等。\n   - 错误继承自`Error`类，通常不需要程序员处理，因为它们通常表示系统级别的问题。\n\n### 二、异常处理机制\n\nJava提供了以下几种机制来处理异常：\n\n1. **try-catch**\n   - `try`块用于包裹可能会抛出异常的代码，`catch`块用于捕获和处理异常。\n   - 可以有多个`catch`块来捕获不同类型的异常。\n2. **finally**\n   - `finally`块用于在`try-catch`块执行完毕后执行清理操作，无论是否捕获到异常，`finally`块都会执行。\n   - 常用于关闭文件流、释放资源等操作。\n3. **throw**\n   - `throw`关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。\n4. **throws**\n   - `throws`关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。\n\n### 三、异常处理的流程\n\n1. **抛出异常**\n   - 当程序运行时遇到错误，会创建一个异常对象并抛出。\n   - 异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。\n2. **捕获异常**\n   - 使用`try-catch`块捕获异常，捕获到异常后可以在`catch`块中进行处理。\n3. **处理异常**\n   - 在`catch`块中可以记录日志、提示用户、尝试恢复等操作。\n4. **清理资源**\n   - 使用`finally`块进行资源清理，确保资源被正确释放。\n\n### 四、示例代码\n\n以下是一个简单的Java异常处理示例：\n\n```java\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        try {\n            // 可能会抛出异常的代码\n            int result = divide(10, 0);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            // 捕获并处理特定类型的异常\n            System.out.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            // 捕获其他类型的异常\n            System.out.println(\"General Error: \" + e.getMessage());\n        } finally {\n            // 无论是否捕获到异常，finally块都会执行\n            System.out.println(\"Finally block executed.\");\n        }\n    }\n\n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### 五、自定义异常\n\nJava允许程序员定义自己的异常类，自定义异常类通常继承自`Exception`类或其子类。自定义异常可以提供更具体的错误信息。\n\n```java\npublic class MyCustomException extends Exception {\n    public MyCustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            checkAge(15);\n        } catch (MyCustomException e) {\n            System.out.println(\"Caught custom exception: \" + e.getMessage());\n        }\n    }\n\n    public static void checkAge(int age) throws MyCustomException {\n        if (age < 18) {\n            throw new MyCustomException(\"Age must be at least 18.\");\n        }\n        System.out.println(\"Age is valid.\");\n    }\n}\n```\n\n### 六、如何实践\n\n1. **明确异常的用途**\n   - 受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。\n2. **合理使用`try-catch`**\n   - 不要捕获所有异常，只捕获需要处理的异常。\n3. **避免空的`catch`块**\n   - 捕获异常后应该进行处理，而不是忽略异常。\n4. **使用`finally`块清理资源**\n   - 确保资源被正确释放，避免资源泄漏。\n5. **自定义异常**\n   - 当系统提供的异常类不足以描述错误时，可以定义自定义异常。\n\n### 七、异常处理的优缺点\n\n**优点**\n\n- 提高程序的健壮性，避免程序因错误而崩溃。\n- 提供详细的错误信息，方便调试和修复。\n- 可以通过异常处理机制实现程序的容错机制。\n\n**缺点**\n\n- 异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。\n- 如果滥用异常处理机制，可能会导致程序性能下降。\n\n总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。\n\n## 九、内部类\n\n写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。\n\n### 作用：\n\n**1.实现多继承**，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。\n\n2.**实现回调机制**，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。\n\n3.**封装逻辑**，避免暴露具体实现。\n\n内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。\n\n普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:\n\n```java\nOuter.Inner inner = outer.new Inner(); // 创建内部类实例\n```\n\n匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：\n\n```java\ninterface MyInterface {\n    void display();\n}\n\nclass Outer {\n    void method() {\n        MyInterface mi = new MyInterface() {\n            @Override\n            public void display() {\n                System.out.println(\"Anonymous inner class\");\n            }\n        };\n        mi.display();\n    }\n}\n```\n\n## 十、集合\n\n### collections框架图\n\n![image-20250216221349436](Java基础复盘/image-20250216221349436.png)\n\n### iterable接口\n\n定义了一种方法`iterator()`，允许以统一的方式(增强for)遍历集合。\n\n### 顶层接口\n\n**Collection** 是一个顶层接口，它主要用来定义集合的约定\n**List**接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类\n**Set**接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。\n\n**Queue**是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。\n\nSortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。\n\nMap是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。\n\n### 类(数据结构)\n\n1. **ArrayList**：动态数组实现的列表，支持快速随机访问。\n2. **Vector**：与`ArrayList`类似，但它是同步的，适用于多线程环境。\n3. **LinkedList 类**：双向链表实现的列表，支持快速插入和删除。\n4. **Stack**：后进先出（LIFO）的栈，基于`Vector`实现。\n5. **HashSet**：基于哈希表实现的集合，不允许重复元素。\n6. **TreeSet**：基于红黑树实现的有序集合。\n7. **LinkedHashSet 类**：`HashSet`的链表版本，维护元素插入顺序。\n8. **PriorityQueue**：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。\n9. **HashMap**：基于哈希表实现的映射，允许一个null键和多个null值。\n10. **TreeMap 类**：基于红黑树实现的有序映射。\n11. **LinkedHashMap 类**：`HashMap`的链表版本，维护元素插入或访问顺序。\n12. **Hashtable 类**：与`HashMap`类似，但它是同步的，适用于多线程环境。\n13. **IdentityHashMap 类**：`HashMap`的变体，使用引用相等性而不是对象相等性。\n14. **WeakHashMap 类**：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。\n15. **Collections 类**：提供对集合的静态方法操作，如排序、搜索和修改。\n\n### 集合实现类特征图\n\n![image-20250216222117731](Java基础复盘/image-20250216222117731.png)\n\n## 十一、泛型\n\n一种语言特性，允许开发者在定义类，接口或方法时使用**类型参数**，从而**提高代码的复用性和灵活性**。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时**保持类型安全**。\n\n### **类型参数**\n\n类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。\n\n**类型参数的命名规范**\n\n- 通常使用单个大写字母表示类型参数，常见的有：\n  - `T`（Type）：表示任意类型。\n  - `E`（Element）：表示集合中的元素类型。\n  - `K`（Key）：表示键的类型。\n  - `V`（Value）：表示值的类型。\n  - `N`（Number）：表示数字类型。\n  - `S`、`U`、`V` 等：用于多个类型参数的区分。\n\n### **类型擦除**\n\nJava泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组\n\n```java\nBox<String>[] boxes = new Box<String>[10]; // 编译错误\n```\n\n但是可以通过强制类型转换创建\n\n```java\nBox<String>[] boxes = (Box<String>[]) new Box[10]; // 需要强制类型转换\n```\n\n### 类型限制\n\n1.**不能使用原始数据类型，只能使用包装类**\n\n2.**不能创建泛型的静态字段**，因为静态字段属于类，而泛型类型是实例相关的。\n\n```java\npublic class Box<T> {\n    private static T value; // 编译错误\n}\n```\n\n3.**不能实例化泛型类型参数**：\n\n```java\npublic class Box<T> {\n    public void set(T value) {\n        T newValue = new T(); // 编译错误\n    }\n}\n```\n\n### 通配符\n\n通配符（`?`）用于表示未知类型，分为无界通配符和有界通配符：\n\n1. **无界通配符**：\n\n   ```java\n   Box<?> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是未知的，可以是任何类型。\n\n2. **有界通配符**：\n\n   上界\n\n   ```java\n   Box<? extends Number> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Number` 或其子类。\n\n   ```java\n   List<String> stringList = new ArrayList<>();\n   List<? extends Object> objectList = stringList; // 协变\n   ```\n\n   下界\n\n   ```java\n   Box<? super Integer> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Integer` 或其父类。\n\n   ```java\n   List<Object> objectList = new ArrayList<>();\n   List<? super String> stringList = objectList; // 逆变\n   ```\n\n## 十二、反射\n\n啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。\n\n![image-20250220123104283](Java基础复盘/image-20250220123104283.png)\n\n### 获取对象\n\n```java\npackage com.dmw.basedemo.reflect;\n\npublic class Demo {\n    public static void main(String[] args) throws ClassNotFoundException {\n        /*\n        * 获取class对象的三种方式：\n        *   1.Class.forName(\"全类名\");\n        *   2.类名.class\n        *   3.对象.getClass();\n        * */\n\n        //第一种方式\n        //全类名：包名+类名\n        //最为常用\n        Class clazz1 = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n\n        //第二种方式\n        //一般用于传参\n        Class clazz2 = Student.class;\n\n        //第三种方式\n        //当我们已经有了这个类的对象时，才可以使用。\n        Student student = new Student();\n        Class clazz3 = student.getClass();\n\n        System.out.println(clazz1 == clazz2);\n        System.out.println(clazz1 == clazz3);\n    }\n}\n```\n\n![image-20250220122408100](Java基础复盘/image-20250220122408100.png)\n\n### 获取对象的构造方法\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Parameter;\n\npublic class Demo2Constructor {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        /*\n        * Class类中用于获取构造方法的方法\n        *   Constructor<?>[] getConstructors()获取公共的构造方法\n        *   Constructor<?>[] getDeclaredConstructors()获取所有构造方法\n        *   Constructor<?>[] getConstructor(Class<?>...parameterTypes)获取公共的某个构造方法\n        *   Constructor<?>[] getConstructors(Class<?>...parameterTypes)获取某个构造方法\n        * */\n\n        //1.获取class字节码文件对象\n        Class clazz= Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2获取构造方法\n        Constructor[] cons = clazz.getConstructors();\n        for(Constructor c : cons) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor[] cons1 = clazz.getDeclaredConstructors();\n        for(Constructor c : cons1) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor cons2 = clazz.getDeclaredConstructor(int.class);\n        System.out.println(cons2);\n        System.out.println(\"---------------\");\n        Constructor cons3 = clazz.getDeclaredConstructor(String.class);\n        System.out.println(cons3);\n        System.out.println(\"---------------\");\n        Constructor cons4 = clazz.getDeclaredConstructor(String.class, int.class);\n        System.out.println(cons4);\n        System.out.println(\"---------------\");\n        //获取权限修饰符\n        int Modifiers = cons4.getModifiers();\n        System.out.println(Modifiers);//其中1为public，2为protected，4为private\n        System.out.println(\"---------------\");\n        //获取参数\n        Parameter[] parameters = cons4.getParameters();\n        for(Parameter p : parameters) {\n            System.out.println(p);\n        }\n        //暴力反射：表示临时取消权限校验\n        cons4.setAccessible(true);\n        //利用获取到的构造方法来构造对象\n        Student stu = (Student) cons4.newInstance(\"张三\", 23);\n        System.out.println(stu);\n    }\n}\n\n```\n\n![image-20250222225338830](Java基础复盘/image-20250222225338830.png)\n\n其中**权限修饰符常量字段值**如下\n\n![](Java基础复盘/image-20250222224835797.png)\n\n### 获取对象的成员变量\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Field;\n\npublic class Demo3Var {\n    /*\n    * Class类中用于获取成员变量的方法\n    * Field[] getFields();//返回所有公共成员变量对象的数组\n    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组\n    * Field getField(String name);//返回单个公共成员变量对象\n    * Field[] getDeclareField(String name);//返回单个成员变量对象\n    * */\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n        //1.获取class字节码文件对象\n        Class clazz = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2.获取所有的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n        //获取单个的成员变量\n        Field age = clazz.getDeclaredField(\"age\");\n        age.setAccessible(true);\n        System.out.println(age);\n        //获取权限修饰符\n        int modifiers = age.getModifiers();\n        System.out.println(modifiers);\n        //获取成员变量的名字\n        String n = age.getName();\n        System.out.println(n);\n        //获取成员变量的类型\n        Class<?> type = age.getType();\n        System.out.println(type);\n        //获取成员变量记录的值\n        Student student = new Student(\"zhangsan\", 18);\n        age.setAccessible(true);\n        Object o = age.get(student);//获取student这个对象age记录的值\n        System.out.println(o);\n    }\n}\n```\n\n![image-20250223163956807](Java基础复盘/image-20250223163956807.png)\n\n### 获取对象中的成员方法\n\n```java\n/*\n* Class类中用于获取对象中的成员方法\n* Method[] getMethods();//获取当前类及其父类的所有公有方法。\n* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。\n* Method getMethod(String name, Class<?>... parameterTypes)：获取公有方法（包括父类方法）\n* Method getDeclaredMethod(String name, Class<?>... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。\n*\n* 调用方法\n* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：\n    obj是目标对象实例。即调用者\n    args是方法的参数。\n    如果目标方法是静态方法，则obj可以为null。\n* */\n```\n\n### 反射的使用\n\n**1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑**\n\n```\npackage com.dmw.basedemo.reflect;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\n\npublic class Demo5Application {\n\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)\n    public static void main(String[] args) throws IOException, IllegalAccessException {\n        Student s = new Student(\"dmw\",23);\n        saveObject(s);\n    }\n\n    public static void saveObject(Object o) throws IOException, IllegalAccessException {\n        //1.获取class字节码文件\n        Class c = o.getClass();\n        //2.创建IO流\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"src\\\\a.txt\"));\n        //3.获取所有的成员变量\n        Field[] fields = c.getDeclaredFields();\n        for (Field f : fields) {\n            f.setAccessible(true);\n            String name = f.getName();\n            Object value = f.get(o);\n            bw.write(name+\":\"+value);\n            bw.newLine();\n        }\n        bw.close();\n    }\n}\n```\n\n![image-20250223191142600](Java基础复盘/image-20250223191142600.png)\n\n**2.跟配置文件相结合动态的创建对象，并调用方法**\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Objects;\nimport java.util.Properties;\n\npublic class Demo6Application2 {\n    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        //1.读取配置文件的信息\n        Properties prop = new Properties();\n        FileInputStream fis = new FileInputStream(\"src/prop.properties\");\n        prop.load(fis);\n        fis.close();\n        System.out.println(prop);\n\n        //2.获取全类名和方法名\n        String className = (String) prop.get(\"classname\");\n        String methodName = (String) prop.get(\"method\");\n        System.out.println(className);\n        System.out.println(methodName);\n\n        //3.利用反射创建对象并运行方法\n        Class clazz = Class.forName(className);\n        //获取构造方法\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        Object o = constructor.newInstance();\n        System.out.println(o);\n        Method method = clazz.getDeclaredMethod(methodName);\n        method.setAccessible(true);\n        method.invoke(o);//利用构造方法创建的对象调用此方法\n    }\n}\n```\n\n```properties\nclassname=com.dmw.basedemo.reflect.Student\nmethod=study\n```\n\n![image-20250223200310462](Java基础复盘/image-20250223200310462.png)\n\n## 十三、枚举\n\n## 十四、I/O\n\n### 1.File类\n\n### 2.基础IO类和相关方法\n\n## 十五、注解\n\n## 十六、关于null的几种处理方式\n\n","slug":"Java基础复盘","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19ap60003poot2mt12m78","content":"<h2 id=\"一、Java概述\"><a href=\"#一、Java概述\" class=\"headerlink\" title=\"一、Java概述\"></a>一、Java概述</h2><h3 id=\"1-Java定义\"><a href=\"#1-Java定义\" class=\"headerlink\" title=\"1.Java定义\"></a>1.Java定义</h3><p>由Sun公司于1995发布的一种编程语言和计算平台。</p>\n<p>主要分为三个版本：JavaSE—标准版，JavaEE—企业版，JavaME—微型版。</p>\n<h3 id=\"2-Java特点\"><a href=\"#2-Java特点\" class=\"headerlink\" title=\"2.Java特点\"></a>2.Java特点</h3><p>1.<strong>面向对象</strong>，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。</p>\n<p>2.<strong>静态语言</strong>。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。</p>\n<p>3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。</p>\n<p>4.<strong>容易实现多线程</strong>。在用户空间中实现多线程。</p>\n<p>5.<strong>高性能</strong>。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。</p>\n<p>6.<strong>自动管理对象的生命周期</strong>。安全。</p>\n<p>7.功能强大和简单易用。</p>\n<h2 id=\"二、Java开发环境\"><a href=\"#二、Java开发环境\" class=\"headerlink\" title=\"二、Java开发环境\"></a>二、Java开发环境</h2><p>JDK包括jre和核心类库。jre包括jvm。</p>\n<p>jre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。</p>\n<h2 id=\"三、Java基础语法\"><a href=\"#三、Java基础语法\" class=\"headerlink\" title=\"三、Java基础语法\"></a>三、Java基础语法</h2><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h3><p>四类八种：</p>\n<p>1.整数型：<br>byte一个字节即8位(-128-127)，<br>short两个字节即16位(-32768-32767)，<br>int4个字节即32位(-2147283648-2147483647)，<br>long八个字节即64位(-9e18-9e18)—后加L</p>\n<p>2.浮点型：<br>float4字节即32位—精确到到小数点后六位—后加f，<br>double8字节即64位精确到小数点后15位—后加d。</p>\n<p>3.字符型：<br>char类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。</p>\n<p>4.布尔型Boolean类型：只有true或false。</p>\n<h3 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h3><p>1.大小写敏感</p>\n<p>2.类名采用大驼峰命名法(即MyClass类似的)</p>\n<p>3.包名小写(网址倒序)</p>\n<p>4方法名采用小驼峰命名法(即myFirstMethod类似的)</p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3.运算符\"></a>3.运算符</h3><p>1.<strong>赋值运算符’&#x3D;‘</strong>，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：</p>\n<ul>\n<li><p><strong>浅拷贝</strong>：复制对象的字段值，但引用类型的字段仍然指向同一个对象。</p>\n</li>\n<li><p><strong>深拷贝</strong>：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。</p>\n</li>\n</ul>\n<p>2.自增自减运算符：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250201135214019.png\"></p>\n<p>3.算数运算符与比较运算符和数学差不多</p>\n<p>4.逻辑运算符与数学差不多，按位运算符比较的是二进制位</p>\n<p>5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：</p>\n<p>​\t8&gt;&gt;1&#x3D;4;9&lt;&lt;2&#x3D;36;</p>\n<p>6.三元运算符：语法为：</p>\n<p>​\t<strong>条件表达式？表达式1：表达式2</strong></p>\n<p>条件表达式为true就调用表达式1，否则调用表达式2.</p>\n<h2 id=\"四、Java执行流程控制\"><a href=\"#四、Java执行流程控制\" class=\"headerlink\" title=\"四、Java执行流程控制\"></a>四、Java执行流程控制</h2><h3 id=\"1-条件语句\"><a href=\"#1-条件语句\" class=\"headerlink\" title=\"1.条件语句\"></a>1.条件语句</h3><p>1.if…else</p>\n<p><code>if(表达式) &#123;</code></p>\n<p>​\t<code>表达式为真执行；</code></p>\n<p><code>&#125;</code></p>\n<p><code>else &#123;</code></p>\n<p>​\t<code>否则执行</code></p>\n<p><code>&#125;</code></p>\n<p>2.switch用于小范围单个值</p>\n<p><code>switch(变量) &#123;</code></p>\n<p>​\t<code>case 值1：</code></p>\n<p>​\t\t<code>表达式1；</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>case 值2：</code></p>\n<p>​\t\t<code>表达式2：</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>......</code></p>\n<p>​\t<code>default：</code></p>\n<p>​\t\t<code>表达式n;</code></p>\n<p>​\t\t<code>break;</code></p>\n<p><code>&#125;</code></p>\n<p>注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的<code>case</code>开始执行，直到遇到<code>break</code>语句或<code>switch</code>块的末尾为止，而不会自动停止。</p>\n<h3 id=\"2-循环语句\"><a href=\"#2-循环语句\" class=\"headerlink\" title=\"2.循环语句\"></a>2.循环语句</h3><p>while，do…while，for和for-each</p>\n<p>while(表达式) {</p>\n<p>​\t为真执行并再次调用while()；</p>\n<p>}</p>\n<p>do {</p>\n<p>​\t第一次直接执行，后续满足表达式执行；</p>\n<p>}while(表达式)；</p>\n<p>for( 初始化;条件 ;步进 ) { 条件为真执行}</p>\n<p>for-each例如:</p>\n<p>​\tint array[]&#x3D;{1,2,3}</p>\n<p>​\tfor(auto arr: array) {</p>\n<p>​\t\tSystem.out.println(arr);</p>\n<p>​\t}</p>\n<p>打印数组。</p>\n<h3 id=\"3-跳转语句\"><a href=\"#3-跳转语句\" class=\"headerlink\" title=\"3.跳转语句\"></a>3.跳转语句</h3><p>有break，continue和return</p>\n<p>break用于退出当前循环</p>\n<p>continue用于退出当次循环进入下一次循环</p>\n<p>return直接结束本次函数调用</p>\n<h2 id=\"五、面向对象\"><a href=\"#五、面向对象\" class=\"headerlink\" title=\"五、面向对象\"></a>五、面向对象</h2><h3 id=\"1-类和对象\"><a href=\"#1-类和对象\" class=\"headerlink\" title=\"1.类和对象\"></a>1.类和对象</h3><p>类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。</p>\n<h3 id=\"2-对象的创建\"><a href=\"#2-对象的创建\" class=\"headerlink\" title=\"2.对象的创建\"></a>2.对象的创建</h3><p>1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：</p>\n<p><code>Car carKey；</code></p>\n<p>但是我们一般在创建对象引用时会同时把一个对象赋给它如：</p>\n<p><code>Car carKey = new Car();</code></p>\n<h3 id=\"3-属性和方法\"><a href=\"#3-属性和方法\" class=\"headerlink\" title=\"3.属性和方法\"></a>3.属性和方法</h3><p>属性也被称为字段，属性可以是对象，也可以是基本数据类型。</p>\n<p>方法也就是函数，意思是做某些事情。</p>\n<p>方法的示例：</p>\n<p>访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){</p>\n<p>​\t方法体;</p>\n<p>} </p>\n<p>如果没有指定修饰符默认同包访问权限(package-private)；</p>\n<h4 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"(1)构造方法\"></a>(1)构造方法</h4><p>构造方法也称构造器，构造函数，它是一种特殊的方法。</p>\n<p>特点：</p>\n<p>1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。</p>\n<p>2.它的方法名称必须和类名相同，</p>\n<p>3.没有返回值类型(连void都没有)。</p>\n<p>4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。</p>\n<p>5.可以重载，只要参数列表不同。</p>\n<p>6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。</p>\n<p>7.构造方法不能被继承或重写，但可以通过<code>super()</code>调用父类的构造方法。</p>\n<h4 id=\"2-方法重载\"><a href=\"#2-方法重载\" class=\"headerlink\" title=\"(2)方法重载\"></a>(2)方法重载</h4><p>方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。</p>\n<h4 id=\"3-方法的重写\"><a href=\"#3-方法的重写\" class=\"headerlink\" title=\"(3)方法的重写\"></a>(3)方法的重写</h4><p>方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。</p>\n<p>要实现方法重写，必须满足以下条件：</p>\n<ol>\n<li><strong>继承关系</strong>：子类必须继承父类。</li>\n<li><strong>方法名和参数列表相同</strong>：子类中的方法必须与父类中的方法具有相同的名称和参数列表。</li>\n<li><strong>返回值类型相同或兼容</strong>：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。</li>\n<li><strong>访问修饰符的限制</strong>：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是<code>public</code>，子类方法不能是<code>protected</code>或<code>private</code>。</li>\n<li><strong>异常声明的限制</strong>：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。</li>\n</ol>\n<h3 id=\"4-初始化\"><a href=\"#4-初始化\" class=\"headerlink\" title=\"4.初始化\"></a>4.初始化</h3><p>在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：</p>\n<h4 id=\"1-类的初始化\"><a href=\"#1-类的初始化\" class=\"headerlink\" title=\"(1) 类的初始化\"></a>(1) 类的初始化</h4><p>类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：</p>\n<ul>\n<li><strong>加载</strong>：将类的<code>.class</code>文件加载到JVM内存中。</li>\n<li><strong>连接</strong>：<ul>\n<li><strong>验证</strong>：检查类的结构是否正确，是否符合Java规范。</li>\n<li><strong>准备</strong>：为类的静态变量分配内存，并设置默认初始值。</li>\n<li><strong>解析</strong>：将类、接口、字段和方法的符号引用转换为直接引用。</li>\n</ul>\n</li>\n<li><strong>初始化</strong>：执行类构造器<code>&lt;clinit&gt;</code>方法，完成静态变量的赋值和静态代码块的执行。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(MyClass.staticVar); <span class=\"comment\">// 触发类的初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块执行</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-成员初始化\"><a href=\"#2-成员初始化\" class=\"headerlink\" title=\"(2) 成员初始化\"></a>(2) 成员初始化</h4><p>成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：</p>\n<ul>\n<li><strong>默认初始化</strong>：由JVM自动为成员变量赋予默认值。例如，<code>int</code>类型默认为<code>0</code>，<code>double</code>类型默认为<code>0.0</code>，<code>boolean</code>类型默认为<code>false</code>，对象引用类型默认为<code>null</code>。</li>\n<li><strong>显式初始化</strong>：在成员变量声明时直接赋值。</li>\n<li><strong>构造器初始化</strong>：通过构造器为成员变量赋值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> anotherVar; <span class=\"comment\">// 默认初始化为0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造器初始化\"><a href=\"#3-构造器初始化\" class=\"headerlink\" title=\"(3) 构造器初始化\"></a>(3) 构造器初始化</h4><p>构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。</p>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> instanceVar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        instanceVar = value; <span class=\"comment\">// 构造器初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(obj.instanceVar); <span class=\"comment\">// 输出100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-数组初始化\"><a href=\"#4-数组初始化\" class=\"headerlink\" title=\"(4) 数组初始化\"></a>(4) 数组初始化</h4><p>数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：</p>\n<ul>\n<li><strong>静态初始化</strong>：在声明数组时直接指定数组元素的值。</li>\n<li><strong>动态初始化</strong>：指定数组的长度，由JVM自动为数组元素赋予默认值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>]; <span class=\"comment\">// 默认初始化为0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-初始化顺序\"><a href=\"#5-初始化顺序\" class=\"headerlink\" title=\"(5) 初始化顺序\"></a>(5) 初始化顺序</h4><p>Java中对象的初始化顺序如下：</p>\n<ol>\n<li><strong>加载类</strong>：加载类的<code>.class</code>文件。</li>\n<li><strong>静态变量和静态方法块初始化</strong>：按照代码的顺序，先初始化静态变量，再执行静态代码块。</li>\n<li><strong>实例变量初始化</strong>：按照代码的顺序，先初始化实例变量，再执行实例代码块。</li>\n<li><strong>构造器初始化</strong>：执行构造器，为对象的成员变量赋值。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 静态变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实例代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 实例变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块1</span><br><span class=\"line\">静态代码块2</span><br><span class=\"line\">实例代码块1</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>类初始化</strong>：加载类、静态变量初始化和执行静态代码块。</li>\n<li><strong>成员初始化</strong>：包括默认初始化、显式初始化和构造器初始化。</li>\n<li><strong>构造器初始化</strong>：通过构造器为对象的成员变量赋值。</li>\n<li><strong>数组初始化</strong>：静态初始化和动态初始化。</li>\n<li><strong>初始化顺序</strong>：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。</li>\n</ul>\n<h3 id=\"5-对象的销毁\"><a href=\"#5-对象的销毁\" class=\"headerlink\" title=\"5.对象的销毁\"></a>5.对象的销毁</h3><p>Java和c&#x2F;c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由<strong>Java虚拟机</strong>进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。</p>\n<h4 id=\"1-对象作用域\"><a href=\"#1-对象作用域\" class=\"headerlink\" title=\"(1)对象作用域\"></a>(1)对象作用域</h4><p>绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。</p>\n<p><code>&#123;</code></p>\n<p>​\t<code>int a = 11;</code></p>\n<p>​\t<code>&#123;</code></p>\n<p>​\t\t<code>int b = 22;</code></p>\n<p>​\t<code>&#125;</code></p>\n<p><code>&#125;</code></p>\n<p>变量a会在两个{}中生效，而变量b只在自己的{}内生效。</p>\n<h4 id=\"2-this和super\"><a href=\"#2-this和super\" class=\"headerlink\" title=\"(2)this和super\"></a>(2)this和super</h4><p>二者都是关键字。</p>\n<p><strong>this</strong>作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。</p>\n<p>调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。<img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207203153099.png\"></p>\n<p>this用在构造方法时this(参数)需要放在第一行，否则编译不通过。</p>\n<p><strong>super</strong>可以调用父类的方法，属性，指向父类。其他同this。</p>\n<h2 id=\"六、访问控制权限\"><a href=\"#六、访问控制权限\" class=\"headerlink\" title=\"六、访问控制权限\"></a>六、访问控制权限</h2><p>访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。</p>\n<p>Java中成员的访问权限一共有四种，分别是public，protected，default，private。如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207211115238.png\" alt=\"image-20250207211115238\"></p>\n<h3 id=\"1-继承\"><a href=\"#1-继承\" class=\"headerlink\" title=\"1.继承\"></a>1.继承</h3><p>三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207212537344.png\" alt=\"image-20250207212537344\"></p>\n<p>继承的关键字是<strong>extends</strong>，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：</p>\n<p><code>class Father&#123;&#125;</code></p>\n<p><code>class Son extends Father&#123;&#125;</code></p>\n<p>子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2.多态\"></a>2.多态</h3><p>三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。</p>\n<p>如何实现多态？达成三个充要条件：</p>\n<ul>\n<li>继承</li>\n<li>重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n<p>比如以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat Fruit&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pear</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.num = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat&quot;</span>+num+<span class=\"string\">&quot;Pear&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuoTai</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pear</span>();</span><br><span class=\"line\">        fruit.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现main方法中Fruit fruit &#x3D; new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态-&gt;父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。</p>\n<h3 id=\"3-组合\"><a href=\"#3-组合\" class=\"headerlink\" title=\"3.组合\"></a>3.组合</h3><p>组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话<strong>多用组合，少用继承</strong>。二者关系如下：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207222214122.png\" alt=\"image-20250207222214122\"></p>\n<h3 id=\"4-动态代理\"><a href=\"#4-动态代理\" class=\"headerlink\" title=\"4.动态代理\"></a>4.动态代理</h3><p>为什么需要代理：代理可以无侵入式的给对象增加其他功能。</p>\n<p>代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220105056954.png\" alt=\"image-20250220105056954\"></p>\n<p>java如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223201954533.png\"></p>\n<p><strong>定义一个接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现该接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个<code>InvocationHandler</code>实现类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target; <span class=\"comment\">// 被代理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之前执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之后执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用<code>Proxy</code>生成代理对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建目标对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建InvocationHandler实例</span></span><br><span class=\"line\">        <span class=\"type\">MyInvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInvocationHandler</span>(target);</span><br><span class=\"line\">        <span class=\"comment\">// 生成代理对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (HelloService) Proxy.newProxyInstance(</span><br><span class=\"line\">                HelloService.class.getClassLoader(), <span class=\"comment\">// 目标类的类加载器</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>&lt;?&gt;[]&#123;HelloService.class&#125;, <span class=\"comment\">// 目标类实现的接口</span></span><br><span class=\"line\">                handler <span class=\"comment\">// InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的方法</span></span><br><span class=\"line\">        proxy.sayHello(<span class=\"string\">&quot;Kimi&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before calling: sayHello</span><br><span class=\"line\">Hello, Kimi!</span><br><span class=\"line\">After calling: sayHello</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-向上转型\"><a href=\"#5-向上转型\" class=\"headerlink\" title=\"5.向上转型\"></a>5.向上转型</h3><p>向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。</p>\n<p>向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。</p>\n<p>向下转型相反而且不是自动完成，需要强制指定。</p>\n<h3 id=\"6-statics\"><a href=\"#6-statics\" class=\"headerlink\" title=\"6.statics\"></a>6.statics</h3><p><code>static</code> 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 <code>static</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>静态变量</strong>：定义类的全局变量，所有实例共享。</li>\n<li><strong>静态方法</strong>：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。</li>\n<li><strong>静态初始化块</strong>：用于初始化静态变量，当类被加载时执行一次。提示程序性能。</li>\n</ul>\n<h3 id=\"7-final\"><a href=\"#7-final\" class=\"headerlink\" title=\"7.final\"></a>7.final</h3><p><code>final</code> 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 <code>final</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>最终变量</strong>：一旦被初始化，其值就不能被改变。</li>\n<li><strong>最终方法</strong>：不能被子类重写。</li>\n<li><strong>最终类</strong>：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。</li>\n</ul>\n<h2 id=\"七、接口和抽象类\"><a href=\"#七、接口和抽象类\" class=\"headerlink\" title=\"七、接口和抽象类\"></a>七、接口和抽象类</h2><p>在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于<strong>定义规范和提供代码复用</strong>，但它们在功能、用途和语法上有很大的区别。</p>\n<h3 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h3><ol>\n<li><strong>接口(Interface)</strong><ul>\n<li>接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 <code>public</code> 和 <code>abstract</code> 的，字段默认是 <code>public static final</code> 的。</li>\n<li>接口的目的是定义一组行为规范，<strong>任何实现了该接口的类都必须实现接口中定义的所有方法</strong>。</li>\n<li>接口可以被多个类实现，从而实现多继承的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类(Abstract Class)</strong><ul>\n<li>抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。</li>\n<li>抽象类的主要目的是<strong>为子类提供一个通用的模板</strong>，<strong>子类必须实现抽象类中的所有抽象方法</strong>。</li>\n<li>抽象类只能被单个类继承，不能实现多继承。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h3><ol>\n<li><strong>方法实现</strong><ul>\n<li><strong>接口</strong>：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(<code>default</code>)和静态方法(<code>static</code>)，但这些方法的使用场景相对有限。</li>\n<li><strong>抽象类</strong>：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。</li>\n</ul>\n</li>\n<li><strong>字段</strong><ul>\n<li><strong>接口</strong>：接口中的字段默认是 <code>public static final</code> 的，即常量。它们必须在声明时初始化，且不能被修改。</li>\n<li><strong>抽象类</strong>：抽象类可以包含普通字段(实例变量)，这些字段可以是 <code>public</code>、<code>protected</code> 或 <code>private</code> 的，也可以是静态的或非静态的。</li>\n</ul>\n</li>\n<li><strong>继承和实现</strong><ul>\n<li><strong>接口</strong>：一个类可以实现多个接口。这是实现多继承的一种方式。</li>\n<li><strong>抽象类</strong>：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。</li>\n</ul>\n</li>\n<li><strong>构造方法</strong><ul>\n<li><strong>接口</strong>：接口不能有构造方法，因为接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。</li>\n</ul>\n</li>\n<li><strong>实例化</strong><ul>\n<li><strong>接口</strong>：接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类也不能被实例化，但可以通过子类来实例化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h3><ol>\n<li><strong>接口</strong><ul>\n<li>当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 <code>Animal</code> 接口，其中包含 <code>eat()</code> 和 <code>move()</code> 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。</li>\n<li>当<strong>需要实现多继承时</strong>，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类</strong><ul>\n<li>当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 <code>Vehicle</code> 抽象类，其中包含 <code>move()</code> 抽象方法和一些通用字段(如 <code>speed</code>、<code>color</code> 等)，然后让 <code>Car</code>、<code>Bike</code> 等子类继承并实现具体的行为。</li>\n<li>当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八、异常\"><a href=\"#八、异常\" class=\"headerlink\" title=\"八、异常\"></a>八、异常</h2><p>Exception位于<strong>java.lang</strong>包下，它是一种顶级接口，继承于<strong>Throwable</strong>类，<strong>Throwable类是Java语言中所以错误(error)和异常(exception)类的父类</strong>。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。</p>\n<p>在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。</p>\n<h3 id=\"一、异常的分类\"><a href=\"#一、异常的分类\" class=\"headerlink\" title=\"一、异常的分类\"></a>一、异常的分类</h3><p>Java中的异常主要分为两大类：<strong>受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)</strong>。</p>\n<ol>\n<li><strong>受检查的异常(Checked Exception)</strong><ul>\n<li>这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(<code>FileNotFoundException</code>)、网络连接失败(<code>IOException</code>)等。</li>\n<li>受检查的异常必须在代码中显式处理，否则编译器会报错。</li>\n<li>受检查的异常继承自<code>Exception</code>类，但不包括<code>RuntimeException</code>及其子类。</li>\n</ul>\n</li>\n<li><strong>非受检查的异常(Unchecked Exception)</strong><ul>\n<li>这些异常是程序逻辑错误或运行时错误，例如空指针异常(<code>NullPointerException</code>)、数组越界异常(<code>ArrayIndexOutOfBoundsException</code>)等。</li>\n<li>非受检查的异常继承自<code>RuntimeException</code>类，编译器不会强制要求处理这些异常。</li>\n<li>但为了程序的健壮性，通常也会对这些异常进行捕获和处理。</li>\n</ul>\n</li>\n<li><strong>错误(Error)</strong><ul>\n<li>错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(<code>VirtualMachineError</code>)、线程死亡(<code>ThreadDeath</code>)等。</li>\n<li>错误继承自<code>Error</code>类，通常不需要程序员处理，因为它们通常表示系统级别的问题。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、异常处理机制\"><a href=\"#二、异常处理机制\" class=\"headerlink\" title=\"二、异常处理机制\"></a>二、异常处理机制</h3><p>Java提供了以下几种机制来处理异常：</p>\n<ol>\n<li><strong>try-catch</strong><ul>\n<li><code>try</code>块用于包裹可能会抛出异常的代码，<code>catch</code>块用于捕获和处理异常。</li>\n<li>可以有多个<code>catch</code>块来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><strong>finally</strong><ul>\n<li><code>finally</code>块用于在<code>try-catch</code>块执行完毕后执行清理操作，无论是否捕获到异常，<code>finally</code>块都会执行。</li>\n<li>常用于关闭文件流、释放资源等操作。</li>\n</ul>\n</li>\n<li><strong>throw</strong><ul>\n<li><code>throw</code>关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。</li>\n</ul>\n</li>\n<li><strong>throws</strong><ul>\n<li><code>throws</code>关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、异常处理的流程\"><a href=\"#三、异常处理的流程\" class=\"headerlink\" title=\"三、异常处理的流程\"></a>三、异常处理的流程</h3><ol>\n<li><strong>抛出异常</strong><ul>\n<li>当程序运行时遇到错误，会创建一个异常对象并抛出。</li>\n<li>异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。</li>\n</ul>\n</li>\n<li><strong>捕获异常</strong><ul>\n<li>使用<code>try-catch</code>块捕获异常，捕获到异常后可以在<code>catch</code>块中进行处理。</li>\n</ul>\n</li>\n<li><strong>处理异常</strong><ul>\n<li>在<code>catch</code>块中可以记录日志、提示用户、尝试恢复等操作。</li>\n</ul>\n</li>\n<li><strong>清理资源</strong><ul>\n<li>使用<code>finally</code>块进行资源清理，确保资源被正确释放。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、示例代码\"><a href=\"#四、示例代码\" class=\"headerlink\" title=\"四、示例代码\"></a>四、示例代码</h3><p>以下是一个简单的Java异常处理示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可能会抛出异常的代码</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Result: &quot;</span> + result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理特定类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获其他类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;General Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否捕获到异常，finally块都会执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Finally block executed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;Division by zero is not allowed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、自定义异常\"><a href=\"#五、自定义异常\" class=\"headerlink\" title=\"五、自定义异常\"></a>五、自定义异常</h3><p>Java允许程序员定义自己的异常类，自定义异常类通常继承自<code>Exception</code>类或其子类。自定义异常可以提供更具体的错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCustomException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyCustomException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            checkAge(<span class=\"number\">15</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyCustomException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Caught custom exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> <span class=\"keyword\">throws</span> MyCustomException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCustomException</span>(<span class=\"string\">&quot;Age must be at least 18.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age is valid.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、如何实践\"><a href=\"#六、如何实践\" class=\"headerlink\" title=\"六、如何实践\"></a>六、如何实践</h3><ol>\n<li><strong>明确异常的用途</strong><ul>\n<li>受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。</li>\n</ul>\n</li>\n<li><strong>合理使用<code>try-catch</code></strong><ul>\n<li>不要捕获所有异常，只捕获需要处理的异常。</li>\n</ul>\n</li>\n<li><strong>避免空的<code>catch</code>块</strong><ul>\n<li>捕获异常后应该进行处理，而不是忽略异常。</li>\n</ul>\n</li>\n<li><strong>使用<code>finally</code>块清理资源</strong><ul>\n<li>确保资源被正确释放，避免资源泄漏。</li>\n</ul>\n</li>\n<li><strong>自定义异常</strong><ul>\n<li>当系统提供的异常类不足以描述错误时，可以定义自定义异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"七、异常处理的优缺点\"><a href=\"#七、异常处理的优缺点\" class=\"headerlink\" title=\"七、异常处理的优缺点\"></a>七、异常处理的优缺点</h3><p><strong>优点</strong></p>\n<ul>\n<li>提高程序的健壮性，避免程序因错误而崩溃。</li>\n<li>提供详细的错误信息，方便调试和修复。</li>\n<li>可以通过异常处理机制实现程序的容错机制。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。</li>\n<li>如果滥用异常处理机制，可能会导致程序性能下降。</li>\n</ul>\n<p>总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。</p>\n<h2 id=\"九、内部类\"><a href=\"#九、内部类\" class=\"headerlink\" title=\"九、内部类\"></a>九、内部类</h2><p>写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。</p>\n<h3 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h3><p><strong>1.实现多继承</strong>，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。</p>\n<p>2.<strong>实现回调机制</strong>，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。</p>\n<p>3.<strong>封装逻辑</strong>，避免暴露具体实现。</p>\n<p>内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。</p>\n<p>普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>(); <span class=\"comment\">// 创建内部类实例</span></span><br></pre></td></tr></table></figure>\n\n<p>匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyInterface</span> <span class=\"variable\">mi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInterface</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Anonymous inner class&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        mi.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、集合\"><a href=\"#十、集合\" class=\"headerlink\" title=\"十、集合\"></a>十、集合</h2><h3 id=\"collections框架图\"><a href=\"#collections框架图\" class=\"headerlink\" title=\"collections框架图\"></a>collections框架图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216221349436.png\" alt=\"image-20250216221349436\"></p>\n<h3 id=\"iterable接口\"><a href=\"#iterable接口\" class=\"headerlink\" title=\"iterable接口\"></a>iterable接口</h3><p>定义了一种方法<code>iterator()</code>，允许以统一的方式(增强for)遍历集合。</p>\n<h3 id=\"顶层接口\"><a href=\"#顶层接口\" class=\"headerlink\" title=\"顶层接口\"></a>顶层接口</h3><p><strong>Collection</strong> 是一个顶层接口，它主要用来定义集合的约定<br><strong>List</strong>接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类<br><strong>Set</strong>接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。</p>\n<p><strong>Queue</strong>是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。</p>\n<p>SortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。</p>\n<p>Map是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。</p>\n<h3 id=\"类-数据结构\"><a href=\"#类-数据结构\" class=\"headerlink\" title=\"类(数据结构)\"></a>类(数据结构)</h3><ol>\n<li><strong>ArrayList</strong>：动态数组实现的列表，支持快速随机访问。</li>\n<li><strong>Vector</strong>：与<code>ArrayList</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>LinkedList 类</strong>：双向链表实现的列表，支持快速插入和删除。</li>\n<li><strong>Stack</strong>：后进先出（LIFO）的栈，基于<code>Vector</code>实现。</li>\n<li><strong>HashSet</strong>：基于哈希表实现的集合，不允许重复元素。</li>\n<li><strong>TreeSet</strong>：基于红黑树实现的有序集合。</li>\n<li><strong>LinkedHashSet 类</strong>：<code>HashSet</code>的链表版本，维护元素插入顺序。</li>\n<li><strong>PriorityQueue</strong>：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。</li>\n<li><strong>HashMap</strong>：基于哈希表实现的映射，允许一个null键和多个null值。</li>\n<li><strong>TreeMap 类</strong>：基于红黑树实现的有序映射。</li>\n<li><strong>LinkedHashMap 类</strong>：<code>HashMap</code>的链表版本，维护元素插入或访问顺序。</li>\n<li><strong>Hashtable 类</strong>：与<code>HashMap</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>IdentityHashMap 类</strong>：<code>HashMap</code>的变体，使用引用相等性而不是对象相等性。</li>\n<li><strong>WeakHashMap 类</strong>：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。</li>\n<li><strong>Collections 类</strong>：提供对集合的静态方法操作，如排序、搜索和修改。</li>\n</ol>\n<h3 id=\"集合实现类特征图\"><a href=\"#集合实现类特征图\" class=\"headerlink\" title=\"集合实现类特征图\"></a>集合实现类特征图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216222117731.png\" alt=\"image-20250216222117731\"></p>\n<h2 id=\"十一、泛型\"><a href=\"#十一、泛型\" class=\"headerlink\" title=\"十一、泛型\"></a>十一、泛型</h2><p>一种语言特性，允许开发者在定义类，接口或方法时使用<strong>类型参数</strong>，从而<strong>提高代码的复用性和灵活性</strong>。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时<strong>保持类型安全</strong>。</p>\n<h3 id=\"类型参数\"><a href=\"#类型参数\" class=\"headerlink\" title=\"类型参数\"></a><strong>类型参数</strong></h3><p>类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。</p>\n<p><strong>类型参数的命名规范</strong></p>\n<ul>\n<li>通常使用单个大写字母表示类型参数，常见的有：<ul>\n<li><code>T</code>（Type）：表示任意类型。</li>\n<li><code>E</code>（Element）：表示集合中的元素类型。</li>\n<li><code>K</code>（Key）：表示键的类型。</li>\n<li><code>V</code>（Value）：表示值的类型。</li>\n<li><code>N</code>（Number）：表示数字类型。</li>\n<li><code>S</code>、<code>U</code>、<code>V</code> 等：用于多个类型参数的区分。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a><strong>类型擦除</strong></h3><p>Java泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;String&gt;[<span class=\"number\">10</span>]; <span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n\n<p>但是可以通过强制类型转换创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = (Box&lt;String&gt;[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 需要强制类型转换</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型限制\"><a href=\"#类型限制\" class=\"headerlink\" title=\"类型限制\"></a>类型限制</h3><p>1.<strong>不能使用原始数据类型，只能使用包装类</strong></p>\n<p>2.<strong>不能创建泛型的静态字段</strong>，因为静态字段属于类，而泛型类型是实例相关的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T value; <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>不能实例化泛型类型参数</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">T</span>(); <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><p>通配符（<code>?</code>）用于表示未知类型，分为无界通配符和有界通配符：</p>\n<ol>\n<li><p><strong>无界通配符</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;?&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是未知的，可以是任何类型。</p>\n</li>\n<li><p><strong>有界通配符</strong>：</p>\n<p>上界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Number</code> 或其子类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&gt; objectList = stringList; <span class=\"comment\">// 协变</span></span><br></pre></td></tr></table></figure>\n\n<p>下界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"built_in\">super</span> Integer&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Integer</code> 或其父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; objectList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"built_in\">super</span> String&gt; stringList = objectList; <span class=\"comment\">// 逆变</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"十二、反射\"><a href=\"#十二、反射\" class=\"headerlink\" title=\"十二、反射\"></a>十二、反射</h2><p>啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220123104283.png\" alt=\"image-20250220123104283\"></p>\n<h3 id=\"获取对象\"><a href=\"#获取对象\" class=\"headerlink\" title=\"获取对象\"></a>获取对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 获取class对象的三种方式：</span></span><br><span class=\"line\"><span class=\"comment\">        *   1.Class.forName(&quot;全类名&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        *   2.类名.class</span></span><br><span class=\"line\"><span class=\"comment\">        *   3.对象.getClass();</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//全类名：包名+类名</span></span><br><span class=\"line\">        <span class=\"comment\">//最为常用</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第二种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//一般用于传参</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Student.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第三种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//当我们已经有了这个类的对象时，才可以使用。</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> student.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(clazz1 == clazz2);</span><br><span class=\"line\">        System.out.println(clazz1 == clazz3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220122408100.png\" alt=\"image-20250220122408100\"></p>\n<h3 id=\"获取对象的构造方法\"><a href=\"#获取对象的构造方法\" class=\"headerlink\" title=\"获取对象的构造方法\"></a>获取对象的构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Constructor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Class类中用于获取构造方法的方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors()获取公共的构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getDeclaredConstructors()获取所有构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructor(Class&lt;?&gt;...parameterTypes)获取公共的某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors(Class&lt;?&gt;...parameterTypes)获取某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        Class clazz= Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2获取构造方法</span></span><br><span class=\"line\">        Constructor[] cons = clazz.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        Constructor[] cons1 = clazz.getDeclaredConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons1) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons2</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons3</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        System.out.println(cons3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons4</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons4);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">Modifiers</span> <span class=\"operator\">=</span> cons4.getModifiers();</span><br><span class=\"line\">        System.out.println(Modifiers);<span class=\"comment\">//其中1为public，2为protected，4为private</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">        Parameter[] parameters = cons4.getParameters();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Parameter p : parameters) &#123;</span><br><span class=\"line\">            System.out.println(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//暴力反射：表示临时取消权限校验</span></span><br><span class=\"line\">        cons4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//利用获取到的构造方法来构造对象</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> (Student) cons4.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        System.out.println(stu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222225338830.png\" alt=\"image-20250222225338830\"></p>\n<p>其中<strong>权限修饰符常量字段值</strong>如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222224835797.png\"></p>\n<h3 id=\"获取对象的成员变量\"><a href=\"#获取对象的成员变量\" class=\"headerlink\" title=\"获取对象的成员变量\"></a>获取对象的成员变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3Var</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Class类中用于获取成员变量的方法</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getFields();//返回所有公共成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field getField(String name);//返回单个公共成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclareField(String name);//返回单个成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.获取所有的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            System.out.println(field);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取单个的成员变量</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> clazz.getDeclaredField(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">modifiers</span> <span class=\"operator\">=</span> age.getModifiers();</span><br><span class=\"line\">        System.out.println(modifiers);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的名字</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> age.getName();</span><br><span class=\"line\">        System.out.println(n);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的类型</span></span><br><span class=\"line\">        Class&lt;?&gt; type = age.getType();</span><br><span class=\"line\">        System.out.println(type);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量记录的值</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> age.get(student);<span class=\"comment\">//获取student这个对象age记录的值</span></span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223163956807.png\" alt=\"image-20250223163956807\"></p>\n<h3 id=\"获取对象中的成员方法\"><a href=\"#获取对象中的成员方法\" class=\"headerlink\" title=\"获取对象中的成员方法\"></a>获取对象中的成员方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* Class类中用于获取对象中的成员方法</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getMethods();//获取当前类及其父类的所有公有方法。</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。</span></span><br><span class=\"line\"><span class=\"comment\">* Method getMethod(String name, Class&lt;?&gt;... parameterTypes)：获取公有方法（包括父类方法）</span></span><br><span class=\"line\"><span class=\"comment\">* Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：</span></span><br><span class=\"line\"><span class=\"comment\">    obj是目标对象实例。即调用者</span></span><br><span class=\"line\"><span class=\"comment\">    args是方法的参数。</span></span><br><span class=\"line\"><span class=\"comment\">    如果目标方法是静态方法，则obj可以为null。</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反射的使用\"><a href=\"#反射的使用\" class=\"headerlink\" title=\"反射的使用\"></a>反射的使用</h3><p><strong>1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Demo5Application &#123;</span><br><span class=\"line\">\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)</span><br><span class=\"line\">    public static void main(String[] args) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        Student s = new Student(&quot;dmw&quot;,23);</span><br><span class=\"line\">        saveObject(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void saveObject(Object o) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        //1.获取class字节码文件</span><br><span class=\"line\">        Class c = o.getClass();</span><br><span class=\"line\">        //2.创建IO流</span><br><span class=\"line\">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;src\\\\a.txt&quot;));</span><br><span class=\"line\">        //3.获取所有的成员变量</span><br><span class=\"line\">        Field[] fields = c.getDeclaredFields();</span><br><span class=\"line\">        for (Field f : fields) &#123;</span><br><span class=\"line\">            f.setAccessible(true);</span><br><span class=\"line\">            String name = f.getName();</span><br><span class=\"line\">            Object value = f.get(o);</span><br><span class=\"line\">            bw.write(name+&quot;:&quot;+value);</span><br><span class=\"line\">            bw.newLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bw.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223191142600.png\" alt=\"image-20250223191142600\"></p>\n<p><strong>2.跟配置文件相结合动态的创建对象，并调用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo6Application2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.读取配置文件的信息</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src/prop.properties&quot;</span>);</span><br><span class=\"line\">        prop.load(fis);</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">        System.out.println(prop);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.获取全类名和方法名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;classname&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;method&quot;</span>);</span><br><span class=\"line\">        System.out.println(className);</span><br><span class=\"line\">        System.out.println(methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.利用反射创建对象并运行方法</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\">        <span class=\"comment\">//获取构造方法</span></span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(methodName);</span><br><span class=\"line\">        method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        method.invoke(o);<span class=\"comment\">//利用构造方法创建的对象调用此方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">classname</span>=<span class=\"string\">com.dmw.basedemo.reflect.Student</span></span><br><span class=\"line\"><span class=\"attr\">method</span>=<span class=\"string\">study</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223200310462.png\" alt=\"image-20250223200310462\"></p>\n<h2 id=\"十三、枚举\"><a href=\"#十三、枚举\" class=\"headerlink\" title=\"十三、枚举\"></a>十三、枚举</h2><h2 id=\"十四、I-O\"><a href=\"#十四、I-O\" class=\"headerlink\" title=\"十四、I&#x2F;O\"></a>十四、I&#x2F;O</h2><h3 id=\"1-File类\"><a href=\"#1-File类\" class=\"headerlink\" title=\"1.File类\"></a>1.File类</h3><h3 id=\"2-基础IO类和相关方法\"><a href=\"#2-基础IO类和相关方法\" class=\"headerlink\" title=\"2.基础IO类和相关方法\"></a>2.基础IO类和相关方法</h3><h2 id=\"十五、注解\"><a href=\"#十五、注解\" class=\"headerlink\" title=\"十五、注解\"></a>十五、注解</h2><h2 id=\"十六、关于null的几种处理方式\"><a href=\"#十六、关于null的几种处理方式\" class=\"headerlink\" title=\"十六、关于null的几种处理方式\"></a>十六、关于null的几种处理方式</h2>","excerpt":"","more":"<h2 id=\"一、Java概述\"><a href=\"#一、Java概述\" class=\"headerlink\" title=\"一、Java概述\"></a>一、Java概述</h2><h3 id=\"1-Java定义\"><a href=\"#1-Java定义\" class=\"headerlink\" title=\"1.Java定义\"></a>1.Java定义</h3><p>由Sun公司于1995发布的一种编程语言和计算平台。</p>\n<p>主要分为三个版本：JavaSE—标准版，JavaEE—企业版，JavaME—微型版。</p>\n<h3 id=\"2-Java特点\"><a href=\"#2-Java特点\" class=\"headerlink\" title=\"2.Java特点\"></a>2.Java特点</h3><p>1.<strong>面向对象</strong>，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。</p>\n<p>2.<strong>静态语言</strong>。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。</p>\n<p>3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。</p>\n<p>4.<strong>容易实现多线程</strong>。在用户空间中实现多线程。</p>\n<p>5.<strong>高性能</strong>。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。</p>\n<p>6.<strong>自动管理对象的生命周期</strong>。安全。</p>\n<p>7.功能强大和简单易用。</p>\n<h2 id=\"二、Java开发环境\"><a href=\"#二、Java开发环境\" class=\"headerlink\" title=\"二、Java开发环境\"></a>二、Java开发环境</h2><p>JDK包括jre和核心类库。jre包括jvm。</p>\n<p>jre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。</p>\n<h2 id=\"三、Java基础语法\"><a href=\"#三、Java基础语法\" class=\"headerlink\" title=\"三、Java基础语法\"></a>三、Java基础语法</h2><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h3><p>四类八种：</p>\n<p>1.整数型：<br>byte一个字节即8位(-128-127)，<br>short两个字节即16位(-32768-32767)，<br>int4个字节即32位(-2147283648-2147483647)，<br>long八个字节即64位(-9e18-9e18)—后加L</p>\n<p>2.浮点型：<br>float4字节即32位—精确到到小数点后六位—后加f，<br>double8字节即64位精确到小数点后15位—后加d。</p>\n<p>3.字符型：<br>char类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。</p>\n<p>4.布尔型Boolean类型：只有true或false。</p>\n<h3 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h3><p>1.大小写敏感</p>\n<p>2.类名采用大驼峰命名法(即MyClass类似的)</p>\n<p>3.包名小写(网址倒序)</p>\n<p>4方法名采用小驼峰命名法(即myFirstMethod类似的)</p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3.运算符\"></a>3.运算符</h3><p>1.<strong>赋值运算符’&#x3D;‘</strong>，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：</p>\n<ul>\n<li><p><strong>浅拷贝</strong>：复制对象的字段值，但引用类型的字段仍然指向同一个对象。</p>\n</li>\n<li><p><strong>深拷贝</strong>：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。</p>\n</li>\n</ul>\n<p>2.自增自减运算符：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250201135214019.png\"></p>\n<p>3.算数运算符与比较运算符和数学差不多</p>\n<p>4.逻辑运算符与数学差不多，按位运算符比较的是二进制位</p>\n<p>5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：</p>\n<p>​\t8&gt;&gt;1&#x3D;4;9&lt;&lt;2&#x3D;36;</p>\n<p>6.三元运算符：语法为：</p>\n<p>​\t<strong>条件表达式？表达式1：表达式2</strong></p>\n<p>条件表达式为true就调用表达式1，否则调用表达式2.</p>\n<h2 id=\"四、Java执行流程控制\"><a href=\"#四、Java执行流程控制\" class=\"headerlink\" title=\"四、Java执行流程控制\"></a>四、Java执行流程控制</h2><h3 id=\"1-条件语句\"><a href=\"#1-条件语句\" class=\"headerlink\" title=\"1.条件语句\"></a>1.条件语句</h3><p>1.if…else</p>\n<p><code>if(表达式) &#123;</code></p>\n<p>​\t<code>表达式为真执行；</code></p>\n<p><code>&#125;</code></p>\n<p><code>else &#123;</code></p>\n<p>​\t<code>否则执行</code></p>\n<p><code>&#125;</code></p>\n<p>2.switch用于小范围单个值</p>\n<p><code>switch(变量) &#123;</code></p>\n<p>​\t<code>case 值1：</code></p>\n<p>​\t\t<code>表达式1；</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>case 值2：</code></p>\n<p>​\t\t<code>表达式2：</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>......</code></p>\n<p>​\t<code>default：</code></p>\n<p>​\t\t<code>表达式n;</code></p>\n<p>​\t\t<code>break;</code></p>\n<p><code>&#125;</code></p>\n<p>注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的<code>case</code>开始执行，直到遇到<code>break</code>语句或<code>switch</code>块的末尾为止，而不会自动停止。</p>\n<h3 id=\"2-循环语句\"><a href=\"#2-循环语句\" class=\"headerlink\" title=\"2.循环语句\"></a>2.循环语句</h3><p>while，do…while，for和for-each</p>\n<p>while(表达式) {</p>\n<p>​\t为真执行并再次调用while()；</p>\n<p>}</p>\n<p>do {</p>\n<p>​\t第一次直接执行，后续满足表达式执行；</p>\n<p>}while(表达式)；</p>\n<p>for( 初始化;条件 ;步进 ) { 条件为真执行}</p>\n<p>for-each例如:</p>\n<p>​\tint array[]&#x3D;{1,2,3}</p>\n<p>​\tfor(auto arr: array) {</p>\n<p>​\t\tSystem.out.println(arr);</p>\n<p>​\t}</p>\n<p>打印数组。</p>\n<h3 id=\"3-跳转语句\"><a href=\"#3-跳转语句\" class=\"headerlink\" title=\"3.跳转语句\"></a>3.跳转语句</h3><p>有break，continue和return</p>\n<p>break用于退出当前循环</p>\n<p>continue用于退出当次循环进入下一次循环</p>\n<p>return直接结束本次函数调用</p>\n<h2 id=\"五、面向对象\"><a href=\"#五、面向对象\" class=\"headerlink\" title=\"五、面向对象\"></a>五、面向对象</h2><h3 id=\"1-类和对象\"><a href=\"#1-类和对象\" class=\"headerlink\" title=\"1.类和对象\"></a>1.类和对象</h3><p>类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。</p>\n<h3 id=\"2-对象的创建\"><a href=\"#2-对象的创建\" class=\"headerlink\" title=\"2.对象的创建\"></a>2.对象的创建</h3><p>1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：</p>\n<p><code>Car carKey；</code></p>\n<p>但是我们一般在创建对象引用时会同时把一个对象赋给它如：</p>\n<p><code>Car carKey = new Car();</code></p>\n<h3 id=\"3-属性和方法\"><a href=\"#3-属性和方法\" class=\"headerlink\" title=\"3.属性和方法\"></a>3.属性和方法</h3><p>属性也被称为字段，属性可以是对象，也可以是基本数据类型。</p>\n<p>方法也就是函数，意思是做某些事情。</p>\n<p>方法的示例：</p>\n<p>访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){</p>\n<p>​\t方法体;</p>\n<p>} </p>\n<p>如果没有指定修饰符默认同包访问权限(package-private)；</p>\n<h4 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"(1)构造方法\"></a>(1)构造方法</h4><p>构造方法也称构造器，构造函数，它是一种特殊的方法。</p>\n<p>特点：</p>\n<p>1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。</p>\n<p>2.它的方法名称必须和类名相同，</p>\n<p>3.没有返回值类型(连void都没有)。</p>\n<p>4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。</p>\n<p>5.可以重载，只要参数列表不同。</p>\n<p>6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。</p>\n<p>7.构造方法不能被继承或重写，但可以通过<code>super()</code>调用父类的构造方法。</p>\n<h4 id=\"2-方法重载\"><a href=\"#2-方法重载\" class=\"headerlink\" title=\"(2)方法重载\"></a>(2)方法重载</h4><p>方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。</p>\n<h4 id=\"3-方法的重写\"><a href=\"#3-方法的重写\" class=\"headerlink\" title=\"(3)方法的重写\"></a>(3)方法的重写</h4><p>方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。</p>\n<p>要实现方法重写，必须满足以下条件：</p>\n<ol>\n<li><strong>继承关系</strong>：子类必须继承父类。</li>\n<li><strong>方法名和参数列表相同</strong>：子类中的方法必须与父类中的方法具有相同的名称和参数列表。</li>\n<li><strong>返回值类型相同或兼容</strong>：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。</li>\n<li><strong>访问修饰符的限制</strong>：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是<code>public</code>，子类方法不能是<code>protected</code>或<code>private</code>。</li>\n<li><strong>异常声明的限制</strong>：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。</li>\n</ol>\n<h3 id=\"4-初始化\"><a href=\"#4-初始化\" class=\"headerlink\" title=\"4.初始化\"></a>4.初始化</h3><p>在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：</p>\n<h4 id=\"1-类的初始化\"><a href=\"#1-类的初始化\" class=\"headerlink\" title=\"(1) 类的初始化\"></a>(1) 类的初始化</h4><p>类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：</p>\n<ul>\n<li><strong>加载</strong>：将类的<code>.class</code>文件加载到JVM内存中。</li>\n<li><strong>连接</strong>：<ul>\n<li><strong>验证</strong>：检查类的结构是否正确，是否符合Java规范。</li>\n<li><strong>准备</strong>：为类的静态变量分配内存，并设置默认初始值。</li>\n<li><strong>解析</strong>：将类、接口、字段和方法的符号引用转换为直接引用。</li>\n</ul>\n</li>\n<li><strong>初始化</strong>：执行类构造器<code>&lt;clinit&gt;</code>方法，完成静态变量的赋值和静态代码块的执行。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(MyClass.staticVar); <span class=\"comment\">// 触发类的初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块执行</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-成员初始化\"><a href=\"#2-成员初始化\" class=\"headerlink\" title=\"(2) 成员初始化\"></a>(2) 成员初始化</h4><p>成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：</p>\n<ul>\n<li><strong>默认初始化</strong>：由JVM自动为成员变量赋予默认值。例如，<code>int</code>类型默认为<code>0</code>，<code>double</code>类型默认为<code>0.0</code>，<code>boolean</code>类型默认为<code>false</code>，对象引用类型默认为<code>null</code>。</li>\n<li><strong>显式初始化</strong>：在成员变量声明时直接赋值。</li>\n<li><strong>构造器初始化</strong>：通过构造器为成员变量赋值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> anotherVar; <span class=\"comment\">// 默认初始化为0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造器初始化\"><a href=\"#3-构造器初始化\" class=\"headerlink\" title=\"(3) 构造器初始化\"></a>(3) 构造器初始化</h4><p>构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。</p>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> instanceVar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        instanceVar = value; <span class=\"comment\">// 构造器初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(obj.instanceVar); <span class=\"comment\">// 输出100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-数组初始化\"><a href=\"#4-数组初始化\" class=\"headerlink\" title=\"(4) 数组初始化\"></a>(4) 数组初始化</h4><p>数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：</p>\n<ul>\n<li><strong>静态初始化</strong>：在声明数组时直接指定数组元素的值。</li>\n<li><strong>动态初始化</strong>：指定数组的长度，由JVM自动为数组元素赋予默认值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>]; <span class=\"comment\">// 默认初始化为0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-初始化顺序\"><a href=\"#5-初始化顺序\" class=\"headerlink\" title=\"(5) 初始化顺序\"></a>(5) 初始化顺序</h4><p>Java中对象的初始化顺序如下：</p>\n<ol>\n<li><strong>加载类</strong>：加载类的<code>.class</code>文件。</li>\n<li><strong>静态变量和静态方法块初始化</strong>：按照代码的顺序，先初始化静态变量，再执行静态代码块。</li>\n<li><strong>实例变量初始化</strong>：按照代码的顺序，先初始化实例变量，再执行实例代码块。</li>\n<li><strong>构造器初始化</strong>：执行构造器，为对象的成员变量赋值。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 静态变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实例代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 实例变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块1</span><br><span class=\"line\">静态代码块2</span><br><span class=\"line\">实例代码块1</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>类初始化</strong>：加载类、静态变量初始化和执行静态代码块。</li>\n<li><strong>成员初始化</strong>：包括默认初始化、显式初始化和构造器初始化。</li>\n<li><strong>构造器初始化</strong>：通过构造器为对象的成员变量赋值。</li>\n<li><strong>数组初始化</strong>：静态初始化和动态初始化。</li>\n<li><strong>初始化顺序</strong>：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。</li>\n</ul>\n<h3 id=\"5-对象的销毁\"><a href=\"#5-对象的销毁\" class=\"headerlink\" title=\"5.对象的销毁\"></a>5.对象的销毁</h3><p>Java和c&#x2F;c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由<strong>Java虚拟机</strong>进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。</p>\n<h4 id=\"1-对象作用域\"><a href=\"#1-对象作用域\" class=\"headerlink\" title=\"(1)对象作用域\"></a>(1)对象作用域</h4><p>绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。</p>\n<p><code>&#123;</code></p>\n<p>​\t<code>int a = 11;</code></p>\n<p>​\t<code>&#123;</code></p>\n<p>​\t\t<code>int b = 22;</code></p>\n<p>​\t<code>&#125;</code></p>\n<p><code>&#125;</code></p>\n<p>变量a会在两个{}中生效，而变量b只在自己的{}内生效。</p>\n<h4 id=\"2-this和super\"><a href=\"#2-this和super\" class=\"headerlink\" title=\"(2)this和super\"></a>(2)this和super</h4><p>二者都是关键字。</p>\n<p><strong>this</strong>作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。</p>\n<p>调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。<img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207203153099.png\"></p>\n<p>this用在构造方法时this(参数)需要放在第一行，否则编译不通过。</p>\n<p><strong>super</strong>可以调用父类的方法，属性，指向父类。其他同this。</p>\n<h2 id=\"六、访问控制权限\"><a href=\"#六、访问控制权限\" class=\"headerlink\" title=\"六、访问控制权限\"></a>六、访问控制权限</h2><p>访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。</p>\n<p>Java中成员的访问权限一共有四种，分别是public，protected，default，private。如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207211115238.png\" alt=\"image-20250207211115238\"></p>\n<h3 id=\"1-继承\"><a href=\"#1-继承\" class=\"headerlink\" title=\"1.继承\"></a>1.继承</h3><p>三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207212537344.png\" alt=\"image-20250207212537344\"></p>\n<p>继承的关键字是<strong>extends</strong>，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：</p>\n<p><code>class Father&#123;&#125;</code></p>\n<p><code>class Son extends Father&#123;&#125;</code></p>\n<p>子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2.多态\"></a>2.多态</h3><p>三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。</p>\n<p>如何实现多态？达成三个充要条件：</p>\n<ul>\n<li>继承</li>\n<li>重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n<p>比如以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat Fruit&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pear</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.num = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat&quot;</span>+num+<span class=\"string\">&quot;Pear&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuoTai</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pear</span>();</span><br><span class=\"line\">        fruit.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现main方法中Fruit fruit &#x3D; new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态-&gt;父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。</p>\n<h3 id=\"3-组合\"><a href=\"#3-组合\" class=\"headerlink\" title=\"3.组合\"></a>3.组合</h3><p>组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话<strong>多用组合，少用继承</strong>。二者关系如下：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207222214122.png\" alt=\"image-20250207222214122\"></p>\n<h3 id=\"4-动态代理\"><a href=\"#4-动态代理\" class=\"headerlink\" title=\"4.动态代理\"></a>4.动态代理</h3><p>为什么需要代理：代理可以无侵入式的给对象增加其他功能。</p>\n<p>代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220105056954.png\" alt=\"image-20250220105056954\"></p>\n<p>java如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223201954533.png\"></p>\n<p><strong>定义一个接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现该接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个<code>InvocationHandler</code>实现类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target; <span class=\"comment\">// 被代理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之前执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之后执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用<code>Proxy</code>生成代理对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建目标对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建InvocationHandler实例</span></span><br><span class=\"line\">        <span class=\"type\">MyInvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInvocationHandler</span>(target);</span><br><span class=\"line\">        <span class=\"comment\">// 生成代理对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (HelloService) Proxy.newProxyInstance(</span><br><span class=\"line\">                HelloService.class.getClassLoader(), <span class=\"comment\">// 目标类的类加载器</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>&lt;?&gt;[]&#123;HelloService.class&#125;, <span class=\"comment\">// 目标类实现的接口</span></span><br><span class=\"line\">                handler <span class=\"comment\">// InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的方法</span></span><br><span class=\"line\">        proxy.sayHello(<span class=\"string\">&quot;Kimi&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before calling: sayHello</span><br><span class=\"line\">Hello, Kimi!</span><br><span class=\"line\">After calling: sayHello</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-向上转型\"><a href=\"#5-向上转型\" class=\"headerlink\" title=\"5.向上转型\"></a>5.向上转型</h3><p>向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。</p>\n<p>向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。</p>\n<p>向下转型相反而且不是自动完成，需要强制指定。</p>\n<h3 id=\"6-statics\"><a href=\"#6-statics\" class=\"headerlink\" title=\"6.statics\"></a>6.statics</h3><p><code>static</code> 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 <code>static</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>静态变量</strong>：定义类的全局变量，所有实例共享。</li>\n<li><strong>静态方法</strong>：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。</li>\n<li><strong>静态初始化块</strong>：用于初始化静态变量，当类被加载时执行一次。提示程序性能。</li>\n</ul>\n<h3 id=\"7-final\"><a href=\"#7-final\" class=\"headerlink\" title=\"7.final\"></a>7.final</h3><p><code>final</code> 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 <code>final</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>最终变量</strong>：一旦被初始化，其值就不能被改变。</li>\n<li><strong>最终方法</strong>：不能被子类重写。</li>\n<li><strong>最终类</strong>：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。</li>\n</ul>\n<h2 id=\"七、接口和抽象类\"><a href=\"#七、接口和抽象类\" class=\"headerlink\" title=\"七、接口和抽象类\"></a>七、接口和抽象类</h2><p>在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于<strong>定义规范和提供代码复用</strong>，但它们在功能、用途和语法上有很大的区别。</p>\n<h3 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h3><ol>\n<li><strong>接口(Interface)</strong><ul>\n<li>接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 <code>public</code> 和 <code>abstract</code> 的，字段默认是 <code>public static final</code> 的。</li>\n<li>接口的目的是定义一组行为规范，<strong>任何实现了该接口的类都必须实现接口中定义的所有方法</strong>。</li>\n<li>接口可以被多个类实现，从而实现多继承的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类(Abstract Class)</strong><ul>\n<li>抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。</li>\n<li>抽象类的主要目的是<strong>为子类提供一个通用的模板</strong>，<strong>子类必须实现抽象类中的所有抽象方法</strong>。</li>\n<li>抽象类只能被单个类继承，不能实现多继承。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h3><ol>\n<li><strong>方法实现</strong><ul>\n<li><strong>接口</strong>：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(<code>default</code>)和静态方法(<code>static</code>)，但这些方法的使用场景相对有限。</li>\n<li><strong>抽象类</strong>：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。</li>\n</ul>\n</li>\n<li><strong>字段</strong><ul>\n<li><strong>接口</strong>：接口中的字段默认是 <code>public static final</code> 的，即常量。它们必须在声明时初始化，且不能被修改。</li>\n<li><strong>抽象类</strong>：抽象类可以包含普通字段(实例变量)，这些字段可以是 <code>public</code>、<code>protected</code> 或 <code>private</code> 的，也可以是静态的或非静态的。</li>\n</ul>\n</li>\n<li><strong>继承和实现</strong><ul>\n<li><strong>接口</strong>：一个类可以实现多个接口。这是实现多继承的一种方式。</li>\n<li><strong>抽象类</strong>：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。</li>\n</ul>\n</li>\n<li><strong>构造方法</strong><ul>\n<li><strong>接口</strong>：接口不能有构造方法，因为接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。</li>\n</ul>\n</li>\n<li><strong>实例化</strong><ul>\n<li><strong>接口</strong>：接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类也不能被实例化，但可以通过子类来实例化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h3><ol>\n<li><strong>接口</strong><ul>\n<li>当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 <code>Animal</code> 接口，其中包含 <code>eat()</code> 和 <code>move()</code> 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。</li>\n<li>当<strong>需要实现多继承时</strong>，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类</strong><ul>\n<li>当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 <code>Vehicle</code> 抽象类，其中包含 <code>move()</code> 抽象方法和一些通用字段(如 <code>speed</code>、<code>color</code> 等)，然后让 <code>Car</code>、<code>Bike</code> 等子类继承并实现具体的行为。</li>\n<li>当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八、异常\"><a href=\"#八、异常\" class=\"headerlink\" title=\"八、异常\"></a>八、异常</h2><p>Exception位于<strong>java.lang</strong>包下，它是一种顶级接口，继承于<strong>Throwable</strong>类，<strong>Throwable类是Java语言中所以错误(error)和异常(exception)类的父类</strong>。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。</p>\n<p>在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。</p>\n<h3 id=\"一、异常的分类\"><a href=\"#一、异常的分类\" class=\"headerlink\" title=\"一、异常的分类\"></a>一、异常的分类</h3><p>Java中的异常主要分为两大类：<strong>受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)</strong>。</p>\n<ol>\n<li><strong>受检查的异常(Checked Exception)</strong><ul>\n<li>这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(<code>FileNotFoundException</code>)、网络连接失败(<code>IOException</code>)等。</li>\n<li>受检查的异常必须在代码中显式处理，否则编译器会报错。</li>\n<li>受检查的异常继承自<code>Exception</code>类，但不包括<code>RuntimeException</code>及其子类。</li>\n</ul>\n</li>\n<li><strong>非受检查的异常(Unchecked Exception)</strong><ul>\n<li>这些异常是程序逻辑错误或运行时错误，例如空指针异常(<code>NullPointerException</code>)、数组越界异常(<code>ArrayIndexOutOfBoundsException</code>)等。</li>\n<li>非受检查的异常继承自<code>RuntimeException</code>类，编译器不会强制要求处理这些异常。</li>\n<li>但为了程序的健壮性，通常也会对这些异常进行捕获和处理。</li>\n</ul>\n</li>\n<li><strong>错误(Error)</strong><ul>\n<li>错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(<code>VirtualMachineError</code>)、线程死亡(<code>ThreadDeath</code>)等。</li>\n<li>错误继承自<code>Error</code>类，通常不需要程序员处理，因为它们通常表示系统级别的问题。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、异常处理机制\"><a href=\"#二、异常处理机制\" class=\"headerlink\" title=\"二、异常处理机制\"></a>二、异常处理机制</h3><p>Java提供了以下几种机制来处理异常：</p>\n<ol>\n<li><strong>try-catch</strong><ul>\n<li><code>try</code>块用于包裹可能会抛出异常的代码，<code>catch</code>块用于捕获和处理异常。</li>\n<li>可以有多个<code>catch</code>块来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><strong>finally</strong><ul>\n<li><code>finally</code>块用于在<code>try-catch</code>块执行完毕后执行清理操作，无论是否捕获到异常，<code>finally</code>块都会执行。</li>\n<li>常用于关闭文件流、释放资源等操作。</li>\n</ul>\n</li>\n<li><strong>throw</strong><ul>\n<li><code>throw</code>关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。</li>\n</ul>\n</li>\n<li><strong>throws</strong><ul>\n<li><code>throws</code>关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、异常处理的流程\"><a href=\"#三、异常处理的流程\" class=\"headerlink\" title=\"三、异常处理的流程\"></a>三、异常处理的流程</h3><ol>\n<li><strong>抛出异常</strong><ul>\n<li>当程序运行时遇到错误，会创建一个异常对象并抛出。</li>\n<li>异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。</li>\n</ul>\n</li>\n<li><strong>捕获异常</strong><ul>\n<li>使用<code>try-catch</code>块捕获异常，捕获到异常后可以在<code>catch</code>块中进行处理。</li>\n</ul>\n</li>\n<li><strong>处理异常</strong><ul>\n<li>在<code>catch</code>块中可以记录日志、提示用户、尝试恢复等操作。</li>\n</ul>\n</li>\n<li><strong>清理资源</strong><ul>\n<li>使用<code>finally</code>块进行资源清理，确保资源被正确释放。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、示例代码\"><a href=\"#四、示例代码\" class=\"headerlink\" title=\"四、示例代码\"></a>四、示例代码</h3><p>以下是一个简单的Java异常处理示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可能会抛出异常的代码</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Result: &quot;</span> + result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理特定类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获其他类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;General Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否捕获到异常，finally块都会执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Finally block executed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;Division by zero is not allowed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、自定义异常\"><a href=\"#五、自定义异常\" class=\"headerlink\" title=\"五、自定义异常\"></a>五、自定义异常</h3><p>Java允许程序员定义自己的异常类，自定义异常类通常继承自<code>Exception</code>类或其子类。自定义异常可以提供更具体的错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCustomException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyCustomException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            checkAge(<span class=\"number\">15</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyCustomException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Caught custom exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> <span class=\"keyword\">throws</span> MyCustomException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCustomException</span>(<span class=\"string\">&quot;Age must be at least 18.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age is valid.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、如何实践\"><a href=\"#六、如何实践\" class=\"headerlink\" title=\"六、如何实践\"></a>六、如何实践</h3><ol>\n<li><strong>明确异常的用途</strong><ul>\n<li>受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。</li>\n</ul>\n</li>\n<li><strong>合理使用<code>try-catch</code></strong><ul>\n<li>不要捕获所有异常，只捕获需要处理的异常。</li>\n</ul>\n</li>\n<li><strong>避免空的<code>catch</code>块</strong><ul>\n<li>捕获异常后应该进行处理，而不是忽略异常。</li>\n</ul>\n</li>\n<li><strong>使用<code>finally</code>块清理资源</strong><ul>\n<li>确保资源被正确释放，避免资源泄漏。</li>\n</ul>\n</li>\n<li><strong>自定义异常</strong><ul>\n<li>当系统提供的异常类不足以描述错误时，可以定义自定义异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"七、异常处理的优缺点\"><a href=\"#七、异常处理的优缺点\" class=\"headerlink\" title=\"七、异常处理的优缺点\"></a>七、异常处理的优缺点</h3><p><strong>优点</strong></p>\n<ul>\n<li>提高程序的健壮性，避免程序因错误而崩溃。</li>\n<li>提供详细的错误信息，方便调试和修复。</li>\n<li>可以通过异常处理机制实现程序的容错机制。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。</li>\n<li>如果滥用异常处理机制，可能会导致程序性能下降。</li>\n</ul>\n<p>总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。</p>\n<h2 id=\"九、内部类\"><a href=\"#九、内部类\" class=\"headerlink\" title=\"九、内部类\"></a>九、内部类</h2><p>写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。</p>\n<h3 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h3><p><strong>1.实现多继承</strong>，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。</p>\n<p>2.<strong>实现回调机制</strong>，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。</p>\n<p>3.<strong>封装逻辑</strong>，避免暴露具体实现。</p>\n<p>内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。</p>\n<p>普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>(); <span class=\"comment\">// 创建内部类实例</span></span><br></pre></td></tr></table></figure>\n\n<p>匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyInterface</span> <span class=\"variable\">mi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInterface</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Anonymous inner class&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        mi.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、集合\"><a href=\"#十、集合\" class=\"headerlink\" title=\"十、集合\"></a>十、集合</h2><h3 id=\"collections框架图\"><a href=\"#collections框架图\" class=\"headerlink\" title=\"collections框架图\"></a>collections框架图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216221349436.png\" alt=\"image-20250216221349436\"></p>\n<h3 id=\"iterable接口\"><a href=\"#iterable接口\" class=\"headerlink\" title=\"iterable接口\"></a>iterable接口</h3><p>定义了一种方法<code>iterator()</code>，允许以统一的方式(增强for)遍历集合。</p>\n<h3 id=\"顶层接口\"><a href=\"#顶层接口\" class=\"headerlink\" title=\"顶层接口\"></a>顶层接口</h3><p><strong>Collection</strong> 是一个顶层接口，它主要用来定义集合的约定<br><strong>List</strong>接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类<br><strong>Set</strong>接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。</p>\n<p><strong>Queue</strong>是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。</p>\n<p>SortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。</p>\n<p>Map是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。</p>\n<h3 id=\"类-数据结构\"><a href=\"#类-数据结构\" class=\"headerlink\" title=\"类(数据结构)\"></a>类(数据结构)</h3><ol>\n<li><strong>ArrayList</strong>：动态数组实现的列表，支持快速随机访问。</li>\n<li><strong>Vector</strong>：与<code>ArrayList</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>LinkedList 类</strong>：双向链表实现的列表，支持快速插入和删除。</li>\n<li><strong>Stack</strong>：后进先出（LIFO）的栈，基于<code>Vector</code>实现。</li>\n<li><strong>HashSet</strong>：基于哈希表实现的集合，不允许重复元素。</li>\n<li><strong>TreeSet</strong>：基于红黑树实现的有序集合。</li>\n<li><strong>LinkedHashSet 类</strong>：<code>HashSet</code>的链表版本，维护元素插入顺序。</li>\n<li><strong>PriorityQueue</strong>：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。</li>\n<li><strong>HashMap</strong>：基于哈希表实现的映射，允许一个null键和多个null值。</li>\n<li><strong>TreeMap 类</strong>：基于红黑树实现的有序映射。</li>\n<li><strong>LinkedHashMap 类</strong>：<code>HashMap</code>的链表版本，维护元素插入或访问顺序。</li>\n<li><strong>Hashtable 类</strong>：与<code>HashMap</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>IdentityHashMap 类</strong>：<code>HashMap</code>的变体，使用引用相等性而不是对象相等性。</li>\n<li><strong>WeakHashMap 类</strong>：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。</li>\n<li><strong>Collections 类</strong>：提供对集合的静态方法操作，如排序、搜索和修改。</li>\n</ol>\n<h3 id=\"集合实现类特征图\"><a href=\"#集合实现类特征图\" class=\"headerlink\" title=\"集合实现类特征图\"></a>集合实现类特征图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216222117731.png\" alt=\"image-20250216222117731\"></p>\n<h2 id=\"十一、泛型\"><a href=\"#十一、泛型\" class=\"headerlink\" title=\"十一、泛型\"></a>十一、泛型</h2><p>一种语言特性，允许开发者在定义类，接口或方法时使用<strong>类型参数</strong>，从而<strong>提高代码的复用性和灵活性</strong>。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时<strong>保持类型安全</strong>。</p>\n<h3 id=\"类型参数\"><a href=\"#类型参数\" class=\"headerlink\" title=\"类型参数\"></a><strong>类型参数</strong></h3><p>类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。</p>\n<p><strong>类型参数的命名规范</strong></p>\n<ul>\n<li>通常使用单个大写字母表示类型参数，常见的有：<ul>\n<li><code>T</code>（Type）：表示任意类型。</li>\n<li><code>E</code>（Element）：表示集合中的元素类型。</li>\n<li><code>K</code>（Key）：表示键的类型。</li>\n<li><code>V</code>（Value）：表示值的类型。</li>\n<li><code>N</code>（Number）：表示数字类型。</li>\n<li><code>S</code>、<code>U</code>、<code>V</code> 等：用于多个类型参数的区分。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a><strong>类型擦除</strong></h3><p>Java泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;String&gt;[<span class=\"number\">10</span>]; <span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n\n<p>但是可以通过强制类型转换创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = (Box&lt;String&gt;[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 需要强制类型转换</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型限制\"><a href=\"#类型限制\" class=\"headerlink\" title=\"类型限制\"></a>类型限制</h3><p>1.<strong>不能使用原始数据类型，只能使用包装类</strong></p>\n<p>2.<strong>不能创建泛型的静态字段</strong>，因为静态字段属于类，而泛型类型是实例相关的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T value; <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>不能实例化泛型类型参数</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">T</span>(); <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><p>通配符（<code>?</code>）用于表示未知类型，分为无界通配符和有界通配符：</p>\n<ol>\n<li><p><strong>无界通配符</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;?&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是未知的，可以是任何类型。</p>\n</li>\n<li><p><strong>有界通配符</strong>：</p>\n<p>上界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Number</code> 或其子类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&gt; objectList = stringList; <span class=\"comment\">// 协变</span></span><br></pre></td></tr></table></figure>\n\n<p>下界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"built_in\">super</span> Integer&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Integer</code> 或其父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; objectList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"built_in\">super</span> String&gt; stringList = objectList; <span class=\"comment\">// 逆变</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"十二、反射\"><a href=\"#十二、反射\" class=\"headerlink\" title=\"十二、反射\"></a>十二、反射</h2><p>啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220123104283.png\" alt=\"image-20250220123104283\"></p>\n<h3 id=\"获取对象\"><a href=\"#获取对象\" class=\"headerlink\" title=\"获取对象\"></a>获取对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 获取class对象的三种方式：</span></span><br><span class=\"line\"><span class=\"comment\">        *   1.Class.forName(&quot;全类名&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        *   2.类名.class</span></span><br><span class=\"line\"><span class=\"comment\">        *   3.对象.getClass();</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//全类名：包名+类名</span></span><br><span class=\"line\">        <span class=\"comment\">//最为常用</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第二种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//一般用于传参</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Student.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第三种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//当我们已经有了这个类的对象时，才可以使用。</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> student.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(clazz1 == clazz2);</span><br><span class=\"line\">        System.out.println(clazz1 == clazz3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220122408100.png\" alt=\"image-20250220122408100\"></p>\n<h3 id=\"获取对象的构造方法\"><a href=\"#获取对象的构造方法\" class=\"headerlink\" title=\"获取对象的构造方法\"></a>获取对象的构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Constructor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Class类中用于获取构造方法的方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors()获取公共的构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getDeclaredConstructors()获取所有构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructor(Class&lt;?&gt;...parameterTypes)获取公共的某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors(Class&lt;?&gt;...parameterTypes)获取某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        Class clazz= Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2获取构造方法</span></span><br><span class=\"line\">        Constructor[] cons = clazz.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        Constructor[] cons1 = clazz.getDeclaredConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons1) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons2</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons3</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        System.out.println(cons3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons4</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons4);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">Modifiers</span> <span class=\"operator\">=</span> cons4.getModifiers();</span><br><span class=\"line\">        System.out.println(Modifiers);<span class=\"comment\">//其中1为public，2为protected，4为private</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">        Parameter[] parameters = cons4.getParameters();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Parameter p : parameters) &#123;</span><br><span class=\"line\">            System.out.println(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//暴力反射：表示临时取消权限校验</span></span><br><span class=\"line\">        cons4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//利用获取到的构造方法来构造对象</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> (Student) cons4.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        System.out.println(stu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222225338830.png\" alt=\"image-20250222225338830\"></p>\n<p>其中<strong>权限修饰符常量字段值</strong>如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222224835797.png\"></p>\n<h3 id=\"获取对象的成员变量\"><a href=\"#获取对象的成员变量\" class=\"headerlink\" title=\"获取对象的成员变量\"></a>获取对象的成员变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3Var</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Class类中用于获取成员变量的方法</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getFields();//返回所有公共成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field getField(String name);//返回单个公共成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclareField(String name);//返回单个成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.获取所有的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            System.out.println(field);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取单个的成员变量</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> clazz.getDeclaredField(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">modifiers</span> <span class=\"operator\">=</span> age.getModifiers();</span><br><span class=\"line\">        System.out.println(modifiers);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的名字</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> age.getName();</span><br><span class=\"line\">        System.out.println(n);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的类型</span></span><br><span class=\"line\">        Class&lt;?&gt; type = age.getType();</span><br><span class=\"line\">        System.out.println(type);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量记录的值</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> age.get(student);<span class=\"comment\">//获取student这个对象age记录的值</span></span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223163956807.png\" alt=\"image-20250223163956807\"></p>\n<h3 id=\"获取对象中的成员方法\"><a href=\"#获取对象中的成员方法\" class=\"headerlink\" title=\"获取对象中的成员方法\"></a>获取对象中的成员方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* Class类中用于获取对象中的成员方法</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getMethods();//获取当前类及其父类的所有公有方法。</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。</span></span><br><span class=\"line\"><span class=\"comment\">* Method getMethod(String name, Class&lt;?&gt;... parameterTypes)：获取公有方法（包括父类方法）</span></span><br><span class=\"line\"><span class=\"comment\">* Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：</span></span><br><span class=\"line\"><span class=\"comment\">    obj是目标对象实例。即调用者</span></span><br><span class=\"line\"><span class=\"comment\">    args是方法的参数。</span></span><br><span class=\"line\"><span class=\"comment\">    如果目标方法是静态方法，则obj可以为null。</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反射的使用\"><a href=\"#反射的使用\" class=\"headerlink\" title=\"反射的使用\"></a>反射的使用</h3><p><strong>1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Demo5Application &#123;</span><br><span class=\"line\">\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)</span><br><span class=\"line\">    public static void main(String[] args) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        Student s = new Student(&quot;dmw&quot;,23);</span><br><span class=\"line\">        saveObject(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void saveObject(Object o) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        //1.获取class字节码文件</span><br><span class=\"line\">        Class c = o.getClass();</span><br><span class=\"line\">        //2.创建IO流</span><br><span class=\"line\">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;src\\\\a.txt&quot;));</span><br><span class=\"line\">        //3.获取所有的成员变量</span><br><span class=\"line\">        Field[] fields = c.getDeclaredFields();</span><br><span class=\"line\">        for (Field f : fields) &#123;</span><br><span class=\"line\">            f.setAccessible(true);</span><br><span class=\"line\">            String name = f.getName();</span><br><span class=\"line\">            Object value = f.get(o);</span><br><span class=\"line\">            bw.write(name+&quot;:&quot;+value);</span><br><span class=\"line\">            bw.newLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bw.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223191142600.png\" alt=\"image-20250223191142600\"></p>\n<p><strong>2.跟配置文件相结合动态的创建对象，并调用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo6Application2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.读取配置文件的信息</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src/prop.properties&quot;</span>);</span><br><span class=\"line\">        prop.load(fis);</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">        System.out.println(prop);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.获取全类名和方法名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;classname&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;method&quot;</span>);</span><br><span class=\"line\">        System.out.println(className);</span><br><span class=\"line\">        System.out.println(methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.利用反射创建对象并运行方法</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\">        <span class=\"comment\">//获取构造方法</span></span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(methodName);</span><br><span class=\"line\">        method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        method.invoke(o);<span class=\"comment\">//利用构造方法创建的对象调用此方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">classname</span>=<span class=\"string\">com.dmw.basedemo.reflect.Student</span></span><br><span class=\"line\"><span class=\"attr\">method</span>=<span class=\"string\">study</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223200310462.png\" alt=\"image-20250223200310462\"></p>\n<h2 id=\"十三、枚举\"><a href=\"#十三、枚举\" class=\"headerlink\" title=\"十三、枚举\"></a>十三、枚举</h2><h2 id=\"十四、I-O\"><a href=\"#十四、I-O\" class=\"headerlink\" title=\"十四、I&#x2F;O\"></a>十四、I&#x2F;O</h2><h3 id=\"1-File类\"><a href=\"#1-File类\" class=\"headerlink\" title=\"1.File类\"></a>1.File类</h3><h3 id=\"2-基础IO类和相关方法\"><a href=\"#2-基础IO类和相关方法\" class=\"headerlink\" title=\"2.基础IO类和相关方法\"></a>2.基础IO类和相关方法</h3><h2 id=\"十五、注解\"><a href=\"#十五、注解\" class=\"headerlink\" title=\"十五、注解\"></a>十五、注解</h2><h2 id=\"十六、关于null的几种处理方式\"><a href=\"#十六、关于null的几种处理方式\" class=\"headerlink\" title=\"十六、关于null的几种处理方式\"></a>十六、关于null的几种处理方式</h2>"},{"title":"C++STL","date":"2025-03-20T16:00:00.000Z","updated":"2025-03-20T16:00:00.000Z","_content":"\n**C++ 标准模板库 (STL, Standard Template Library)**：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件——算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).\n\n示例：\n\n- 算法：`sort(a.begin(), a.end())`\n- 容器：`queue<int> que`\n- 仿函数：`greater<int>()`\n- 迭代器：`vector<int>::iterator it = a.begin()`\n\n## 队列queue\n\n### 特点：\n\n先进先出\n\n### 操作：\n|   作用   |      操作       |          实例          |\n| :------: | :-------------: | :--------------------: |\n|   构造   | queue<类型> que |   queue< int > que;    |\n|   进队   |   .push(元素)   |      que.push(1);      |\n|   出队   |     .pop()      |       que.pop();       |\n|  取队首  |    .front()     |  int a = que.front();  |\n|  取队尾  |     .back()     |  int a = que.back();   |\n| 查看大小 |     .size()     |       que.size()       |\n|   判空   |    .empty()     | bool emp = que.empty() |\n|   清空   |       无        |           无           |\n\n创建队列对象：queue<元素类型> 队列名\n\n**添加**元素：队列名.push(元素名)；\n\n**删除**元素：队列名.pop();\n\n判断**是否为空**：队列名.empty()；\n\n返回队列的**大小**：队列名.size();\n\n### 注意事项：不可访问内部元素！\n\n**下面都是错误用法**\n\n```cpp\nfor (int i = 0; i < que.size(); i++)\n    cout << que[i] << endl;\nfor (auto ele : que)\n    cout << ele << endl;\n```\n\n## 栈stack\n\n### 特点：\n\n先进后出FILO；\n\n从栈顶删除元素；\n\n在栈顶加入元素。\n\n### 操作：\n\n|   作用   |      操作       |          实例          |\n| :------: | :-------------: | :--------------------: |\n|   构造   | stack<类型> stk |    stack< int> stk;    |\n|   进栈   |   .push(元素)   |      stk.push(1);      |\n|   出栈   |     .pop()      |       stk.pop();       |\n|  取栈顶  |     .top()      |   int a = stk.top();   |\n| 查看大小 |     .size()     |       que.size()       |\n|   判空   |    .empty()     | bool emp = stk.empty() |\n|   清空   |       无        |           无           |\n\n创建栈对象：stack<元素类型> 栈名\n\n栈顶**添加**元素：栈名.push(元素名)；\n\n**删除**栈顶元素：栈名.pop();\n\n**访问**栈顶元素:栈名.top();**//要先确保栈非空**\n\n判断**是否为空**：栈名.empty()；\n\n返回栈的**大小**：栈名.size();\n\n**tips:栈和队列一样，没有clear之类的函数，如果想要清空一个栈，需要循环调用出栈函数。**\n\neg:\n\n```c++\nstack<int> s;\ns.push(1);\ns.push(2);\ns.push(3);\ns.pop();\ncout<<s.top()<<endl;//2\ns.top()+=3;\ncout<<s.top()<<endl;//5\nwhile(!s.empty()) {\n\ts.pop();\n}\ncout<<s.size()<<endl;//0\n```\n\n###  注意事项:不可访问内部元素！\n\n以下是错误示例：\n\n```cpp\nfor (int i = 0; i < stk.size(); i++)\n    cout << stk[i] << endl;\nfor (auto ele : stk)\n    cout << stk << endl;\n```\n\n### 典例：括号匹配\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nbool check(string s) {\n\tstack<char> p;\n\tp.push('#');//设置哨兵，防止RE\n\tfor(int i = 0;i < s.size(); ++i) {\n\t\tif(s[i]==')') {\n\t\t\tif(p.top() == '(') {\n\t\t\t\tp.pop();\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\t\telse if(s[i] == ']') {\n\t\t\tif(p.top() == '[') {\n\t\t\t\tp.pop();\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\t\telse p.push(s[i]);//左括号直接入栈，右括号就判断匹配\n\t}\n\treturn (p.size() == 1);//如果全能匹配上就只剩哨兵\n}\n\nint main() {\n\tstring s;\n\twhile(cin >> s) {\n\t\tif(check(s)) {\n\t\t\tcout << \"Yes\\n\";\n\t\t}\n\t\telse cout << \"No\\n\";\n\t}\n\treturn 0;\n}\n```\n\n## 字符串string\n\n### 操作：\n\n创建：string s;\n\n求长度:s.length(); 或者 s.size();\n\n连接： 直接用+、+=运算符 或者append函数\n\n比较：直接用运算符< 、 >  、!=、 == 等等或者compare函数\n\n求子串：\n\n```c++\nstring s1 = \"this is ok\";\nstring s2 = s1.substr(2, 4);// s2 = \"is i\"\ns2 = s1.substr(2); // s2 = \"is is ok\"\n```\n\n插入字符串：\n\n```c++\nstring s1 = \"Limitless\";\nstring s2 = \"00\";\ns1.insert(2, \"123\");//s1 = \"Li123mitless\"\ns1.insert(3, s2); // s1 = \"Li10023mitless\"\ns1.insert(3, 5, 'X') // s1 = \"Li1XXXXX0023mitless\"\n```\n\n删除子串：\n\n```c++\n\tstring s1 = \"Reak Steel\";\n\ts1.erase(1, 3); //s1 = \"R Steel\"\n\ts1.erase(5); //s1 = \"R ste\n```\n\n交换两个string对象的内容：swap函数：s1.swap(s2);\n\n查找：\n\ns1.find(str) 查找字符串str在当前字符串s中第一次出现的位置\n\ns1.find(str, pos) 查找字符串str在当前字符串s的[pos, end]中第一次出现的位置\n\n全排列的下一个序列：next_permutation（s.begin(), s.end()）\n\n全排列的前一个序列：prev_permutation（s.begin(), s.end()）\n\n翻转字符串：reverse（s.begin(), s.end())\n\n## 动态数组、向量vector\n\n### 操作：\n\n创建：vector<数据类型> 向量名；\n\n初始化：\n\n```c\n\tvector<int> abc;//初始化一个size为0的vector，最常用\n\tvector<int> abc(10);//初始化了10个默认值为0的元素\n\tvector<int> abc(10, 1);//初始化了10个值为1的元素\n```\n\n访问：\n\n首元素：v.front()\n\n尾元素：v.back（）\n\n下标访问类似普通数组\n\n添加元素：\n\n向尾部添加：v.push_back(value);//最常见的操作\n\n下标赋值注意别超出v.size（）\n\n求元素个数：v.size（）//实际元素个数，不是容量\n\n判空：v.empty();\n\n翻转操作：reverse(v.begin(), v.end());\n\n清空：v.clear（）//直接清空，不是变成0\n\n### 注意事项\n\n#### 提前指定长度\n\n如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个 `.push_back()`. 因为 `vector` 额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。\n\n```cpp\n// 优化前: 522ms\nvector<int> a;\nfor (int i = 0; i < 1e8; i++)\n    a.push_back(i);\n// 优化后: 259ms\nvector<int> a(1e8);\nfor (int i = 0; i < a.size(); i++)\n    a[i] = i;\n```\n\n#### 当心 size_t 溢出\n\nvector 获取长度的方法 `.size()` 返回值类型为 `size_t`，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 [0,232).\n\n```cpp\nvector<int> a(65536);\nlong long a = a.size() * a.size(); // 直接溢出变成0了\n```\n\n### 典例：二维向量存储邻接表\n\n## 集合set\n\n数学上集合的特点：确定性，互异性，无序性\n\nstl中：有序的，元素都是排序好的，所有操作都是log时间里完成。\n\n提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。\n\n| 集合三要素 | 解释                           | set           | multiset      | unordered_set |\n| ---------- | ------------------------------ | ------------- | ------------- | ------------- |\n| 确定性     | 一个元素要么在集合中，要么不在 | ✔             | ✔             | ✔             |\n| 互异性     | 一个元素仅可以在集合中出现一次 | ✔             | ❌（任意次）   | ✔             |\n| 无序性     | 集合中的元素是没有顺序的       | ❌（从小到大） | ❌（从小到大） | ✔             |\n\n#### 操作：\n\n| 作用                   | 用法            | 示例                    |\n| ---------------------- | --------------- | ----------------------- |\n| 插入元素               | `.insert(元素)` | `st.insert(1);`         |\n| 删除元素               | `.erase(元素)`  | `st.erase(2);`          |\n| 查找元素               | `.find(元素)`   | `auto it = st.find(1);` |\n| 判断元素是否存在       | `.count(元素)`  | `st.count(3);`          |\n| 查看大小 / 清空 / 判空 | 略              | 略                      |\n\n创建:set<元素类型> s;\n\n清空：s.crear()\n\n插入元素：s.insert(x);//如果集合中之前没有就插入并排序，否则不插入\n\n删除元素：s.erase(x)\n\n查询是否有元素x：s.count(x);//返回0无，返回1有。\n\n查询元素x位置：s.find(x)；返回一个x位置的迭代器\n\n判空：s.empty();\n\n求个数：size();\n\n**访问**：\n\n只能通过迭代器访问。不支持 iterator < s.end()写法\n\n可使用迭代器进行遍历访问：\n\n```cpp\nfor (set<int>::iterator it = st.begin(); it != st.end(); ++it)\n    cout << *it << endl;\n```\n\n基于范围的循环（C++ 11）：\n\n```cpp\nfor (auto &ele : st)\n    cout << ele << endl;\n```\n\n### 注意事项\n\n#### 不存在下标索引\n\nset 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。**下面是错误用法：**\n\n```cpp\ncout << st[0] << endl;\n```\n\n#### 元素只读\n\nset 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. **下面是错误用法：**\n\n```cpp\ncout << *st.begin() << endl; // 正确。可读。\n*st.begin() = 1;             // 错误！不可写！\n```\n\n#### 不可用迭代器计算下标\n\nset 的迭代器不能像 vector 一样相减得到下标。**下面是错误用法：**\n\n```cpp\nauto it = st.find(2);      // 正确，返回2所在位置的迭代器。\nint idx = it - st.begin(); // 错误！不可相减得到下标。\n```\n\n### 典例：自动去重并升序排序\n\n## 映射map\n\nmap是一个键值对（key:value)的容器，对于迭代器来说，可以修改value，而不能修改key。map会根据key自动排序。\n\n| 性质   | 解释                         | map           | multimap      | unordered_map |\n| ------ | ---------------------------- | ------------- | ------------- | ------------- |\n| 互异性 | 一个键仅可以在映射中出现一次 | ✔             | ❌（任意次）   | ✔             |\n| 无序性 | 键是没有顺序的               | ❌（从小到大） | ❌（从小到大） | ✔             |\n\n### 操作：\n\n| 作用                   | 用法           | 示例                    |\n| ---------------------- | -------------- | ----------------------- |\n| 增 / 改 / 查元素       | 中括号         | `mp[1] = 2;`            |\n| 查元素（返回迭代器）   | `.find(元素)`  | `auto it = mp.find(1);` |\n| 删除元素               | `.erase(元素)` | `mp.erase(2);`          |\n| 判断元素是否存在       | `.count(元素)` | `mp.count(3);`          |\n| 查看大小 / 清空 / 判空 | 略             | 略                      |\n\nmap<int,string> m;//定义了一个空map m\n\nm.count(k);//返回m中键值等于k的元素个数（1或0——\n\nm.find(k);//存在返回指向该元素的迭代器，否则返回结束地址ennd()\n\nm.erase（k);//删除m中**键为k**的元素，返回删除元素的个数（1或0）\n\nm.erase(p);//从m中删除**迭代器p**所指向的元素\n\nm.insert(e);//e是一个用在m上的value_type类型的值（一个pair）。\n\n如果键e.first不在m中，则插入一个值为e.second的新元素；如果该键在m中已存在，那么不进行任何操作。\n\nm.clear();//清空map m\n\nm.empty();//判断map m是否为空。\n\n### 注意事项\n\n#### 中括号访问时默认值\n\n如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。\n\n```cpp\nmap<char, int> mp;\ncout << mp.count('a') << endl; // 0\nmp['a'];                       // 即使什么都没做，此时mp['a']=0已经插入了\ncout << mp.count('a') << endl; // 1\ncout << mp['a'] << endl;       // 0\n```\n\n#### 不可用迭代器计算下标\n\nmap 的迭代器不能像 vector 一样相减得到下标。**下面是错误用法：**\n\n```cpp\nauto it = mp.find('a');      // 正确，返回2所在位置的迭代器。\nint idx = it - mp.begin();   // 错误！不可相减得到下标。\n```\n\n### 适用情形\n\n需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。(`map<string, int> mp`)","source":"_posts/c++STL.md","raw":"---\ntitle: C++STL\ndate: 2025-03-21\nupdated: 2025-03-21\ncategories: 算法\n---\n\n**C++ 标准模板库 (STL, Standard Template Library)**：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件——算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).\n\n示例：\n\n- 算法：`sort(a.begin(), a.end())`\n- 容器：`queue<int> que`\n- 仿函数：`greater<int>()`\n- 迭代器：`vector<int>::iterator it = a.begin()`\n\n## 队列queue\n\n### 特点：\n\n先进先出\n\n### 操作：\n|   作用   |      操作       |          实例          |\n| :------: | :-------------: | :--------------------: |\n|   构造   | queue<类型> que |   queue< int > que;    |\n|   进队   |   .push(元素)   |      que.push(1);      |\n|   出队   |     .pop()      |       que.pop();       |\n|  取队首  |    .front()     |  int a = que.front();  |\n|  取队尾  |     .back()     |  int a = que.back();   |\n| 查看大小 |     .size()     |       que.size()       |\n|   判空   |    .empty()     | bool emp = que.empty() |\n|   清空   |       无        |           无           |\n\n创建队列对象：queue<元素类型> 队列名\n\n**添加**元素：队列名.push(元素名)；\n\n**删除**元素：队列名.pop();\n\n判断**是否为空**：队列名.empty()；\n\n返回队列的**大小**：队列名.size();\n\n### 注意事项：不可访问内部元素！\n\n**下面都是错误用法**\n\n```cpp\nfor (int i = 0; i < que.size(); i++)\n    cout << que[i] << endl;\nfor (auto ele : que)\n    cout << ele << endl;\n```\n\n## 栈stack\n\n### 特点：\n\n先进后出FILO；\n\n从栈顶删除元素；\n\n在栈顶加入元素。\n\n### 操作：\n\n|   作用   |      操作       |          实例          |\n| :------: | :-------------: | :--------------------: |\n|   构造   | stack<类型> stk |    stack< int> stk;    |\n|   进栈   |   .push(元素)   |      stk.push(1);      |\n|   出栈   |     .pop()      |       stk.pop();       |\n|  取栈顶  |     .top()      |   int a = stk.top();   |\n| 查看大小 |     .size()     |       que.size()       |\n|   判空   |    .empty()     | bool emp = stk.empty() |\n|   清空   |       无        |           无           |\n\n创建栈对象：stack<元素类型> 栈名\n\n栈顶**添加**元素：栈名.push(元素名)；\n\n**删除**栈顶元素：栈名.pop();\n\n**访问**栈顶元素:栈名.top();**//要先确保栈非空**\n\n判断**是否为空**：栈名.empty()；\n\n返回栈的**大小**：栈名.size();\n\n**tips:栈和队列一样，没有clear之类的函数，如果想要清空一个栈，需要循环调用出栈函数。**\n\neg:\n\n```c++\nstack<int> s;\ns.push(1);\ns.push(2);\ns.push(3);\ns.pop();\ncout<<s.top()<<endl;//2\ns.top()+=3;\ncout<<s.top()<<endl;//5\nwhile(!s.empty()) {\n\ts.pop();\n}\ncout<<s.size()<<endl;//0\n```\n\n###  注意事项:不可访问内部元素！\n\n以下是错误示例：\n\n```cpp\nfor (int i = 0; i < stk.size(); i++)\n    cout << stk[i] << endl;\nfor (auto ele : stk)\n    cout << stk << endl;\n```\n\n### 典例：括号匹配\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nbool check(string s) {\n\tstack<char> p;\n\tp.push('#');//设置哨兵，防止RE\n\tfor(int i = 0;i < s.size(); ++i) {\n\t\tif(s[i]==')') {\n\t\t\tif(p.top() == '(') {\n\t\t\t\tp.pop();\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\t\telse if(s[i] == ']') {\n\t\t\tif(p.top() == '[') {\n\t\t\t\tp.pop();\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\t\telse p.push(s[i]);//左括号直接入栈，右括号就判断匹配\n\t}\n\treturn (p.size() == 1);//如果全能匹配上就只剩哨兵\n}\n\nint main() {\n\tstring s;\n\twhile(cin >> s) {\n\t\tif(check(s)) {\n\t\t\tcout << \"Yes\\n\";\n\t\t}\n\t\telse cout << \"No\\n\";\n\t}\n\treturn 0;\n}\n```\n\n## 字符串string\n\n### 操作：\n\n创建：string s;\n\n求长度:s.length(); 或者 s.size();\n\n连接： 直接用+、+=运算符 或者append函数\n\n比较：直接用运算符< 、 >  、!=、 == 等等或者compare函数\n\n求子串：\n\n```c++\nstring s1 = \"this is ok\";\nstring s2 = s1.substr(2, 4);// s2 = \"is i\"\ns2 = s1.substr(2); // s2 = \"is is ok\"\n```\n\n插入字符串：\n\n```c++\nstring s1 = \"Limitless\";\nstring s2 = \"00\";\ns1.insert(2, \"123\");//s1 = \"Li123mitless\"\ns1.insert(3, s2); // s1 = \"Li10023mitless\"\ns1.insert(3, 5, 'X') // s1 = \"Li1XXXXX0023mitless\"\n```\n\n删除子串：\n\n```c++\n\tstring s1 = \"Reak Steel\";\n\ts1.erase(1, 3); //s1 = \"R Steel\"\n\ts1.erase(5); //s1 = \"R ste\n```\n\n交换两个string对象的内容：swap函数：s1.swap(s2);\n\n查找：\n\ns1.find(str) 查找字符串str在当前字符串s中第一次出现的位置\n\ns1.find(str, pos) 查找字符串str在当前字符串s的[pos, end]中第一次出现的位置\n\n全排列的下一个序列：next_permutation（s.begin(), s.end()）\n\n全排列的前一个序列：prev_permutation（s.begin(), s.end()）\n\n翻转字符串：reverse（s.begin(), s.end())\n\n## 动态数组、向量vector\n\n### 操作：\n\n创建：vector<数据类型> 向量名；\n\n初始化：\n\n```c\n\tvector<int> abc;//初始化一个size为0的vector，最常用\n\tvector<int> abc(10);//初始化了10个默认值为0的元素\n\tvector<int> abc(10, 1);//初始化了10个值为1的元素\n```\n\n访问：\n\n首元素：v.front()\n\n尾元素：v.back（）\n\n下标访问类似普通数组\n\n添加元素：\n\n向尾部添加：v.push_back(value);//最常见的操作\n\n下标赋值注意别超出v.size（）\n\n求元素个数：v.size（）//实际元素个数，不是容量\n\n判空：v.empty();\n\n翻转操作：reverse(v.begin(), v.end());\n\n清空：v.clear（）//直接清空，不是变成0\n\n### 注意事项\n\n#### 提前指定长度\n\n如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个 `.push_back()`. 因为 `vector` 额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。\n\n```cpp\n// 优化前: 522ms\nvector<int> a;\nfor (int i = 0; i < 1e8; i++)\n    a.push_back(i);\n// 优化后: 259ms\nvector<int> a(1e8);\nfor (int i = 0; i < a.size(); i++)\n    a[i] = i;\n```\n\n#### 当心 size_t 溢出\n\nvector 获取长度的方法 `.size()` 返回值类型为 `size_t`，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 [0,232).\n\n```cpp\nvector<int> a(65536);\nlong long a = a.size() * a.size(); // 直接溢出变成0了\n```\n\n### 典例：二维向量存储邻接表\n\n## 集合set\n\n数学上集合的特点：确定性，互异性，无序性\n\nstl中：有序的，元素都是排序好的，所有操作都是log时间里完成。\n\n提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。\n\n| 集合三要素 | 解释                           | set           | multiset      | unordered_set |\n| ---------- | ------------------------------ | ------------- | ------------- | ------------- |\n| 确定性     | 一个元素要么在集合中，要么不在 | ✔             | ✔             | ✔             |\n| 互异性     | 一个元素仅可以在集合中出现一次 | ✔             | ❌（任意次）   | ✔             |\n| 无序性     | 集合中的元素是没有顺序的       | ❌（从小到大） | ❌（从小到大） | ✔             |\n\n#### 操作：\n\n| 作用                   | 用法            | 示例                    |\n| ---------------------- | --------------- | ----------------------- |\n| 插入元素               | `.insert(元素)` | `st.insert(1);`         |\n| 删除元素               | `.erase(元素)`  | `st.erase(2);`          |\n| 查找元素               | `.find(元素)`   | `auto it = st.find(1);` |\n| 判断元素是否存在       | `.count(元素)`  | `st.count(3);`          |\n| 查看大小 / 清空 / 判空 | 略              | 略                      |\n\n创建:set<元素类型> s;\n\n清空：s.crear()\n\n插入元素：s.insert(x);//如果集合中之前没有就插入并排序，否则不插入\n\n删除元素：s.erase(x)\n\n查询是否有元素x：s.count(x);//返回0无，返回1有。\n\n查询元素x位置：s.find(x)；返回一个x位置的迭代器\n\n判空：s.empty();\n\n求个数：size();\n\n**访问**：\n\n只能通过迭代器访问。不支持 iterator < s.end()写法\n\n可使用迭代器进行遍历访问：\n\n```cpp\nfor (set<int>::iterator it = st.begin(); it != st.end(); ++it)\n    cout << *it << endl;\n```\n\n基于范围的循环（C++ 11）：\n\n```cpp\nfor (auto &ele : st)\n    cout << ele << endl;\n```\n\n### 注意事项\n\n#### 不存在下标索引\n\nset 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。**下面是错误用法：**\n\n```cpp\ncout << st[0] << endl;\n```\n\n#### 元素只读\n\nset 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. **下面是错误用法：**\n\n```cpp\ncout << *st.begin() << endl; // 正确。可读。\n*st.begin() = 1;             // 错误！不可写！\n```\n\n#### 不可用迭代器计算下标\n\nset 的迭代器不能像 vector 一样相减得到下标。**下面是错误用法：**\n\n```cpp\nauto it = st.find(2);      // 正确，返回2所在位置的迭代器。\nint idx = it - st.begin(); // 错误！不可相减得到下标。\n```\n\n### 典例：自动去重并升序排序\n\n## 映射map\n\nmap是一个键值对（key:value)的容器，对于迭代器来说，可以修改value，而不能修改key。map会根据key自动排序。\n\n| 性质   | 解释                         | map           | multimap      | unordered_map |\n| ------ | ---------------------------- | ------------- | ------------- | ------------- |\n| 互异性 | 一个键仅可以在映射中出现一次 | ✔             | ❌（任意次）   | ✔             |\n| 无序性 | 键是没有顺序的               | ❌（从小到大） | ❌（从小到大） | ✔             |\n\n### 操作：\n\n| 作用                   | 用法           | 示例                    |\n| ---------------------- | -------------- | ----------------------- |\n| 增 / 改 / 查元素       | 中括号         | `mp[1] = 2;`            |\n| 查元素（返回迭代器）   | `.find(元素)`  | `auto it = mp.find(1);` |\n| 删除元素               | `.erase(元素)` | `mp.erase(2);`          |\n| 判断元素是否存在       | `.count(元素)` | `mp.count(3);`          |\n| 查看大小 / 清空 / 判空 | 略             | 略                      |\n\nmap<int,string> m;//定义了一个空map m\n\nm.count(k);//返回m中键值等于k的元素个数（1或0——\n\nm.find(k);//存在返回指向该元素的迭代器，否则返回结束地址ennd()\n\nm.erase（k);//删除m中**键为k**的元素，返回删除元素的个数（1或0）\n\nm.erase(p);//从m中删除**迭代器p**所指向的元素\n\nm.insert(e);//e是一个用在m上的value_type类型的值（一个pair）。\n\n如果键e.first不在m中，则插入一个值为e.second的新元素；如果该键在m中已存在，那么不进行任何操作。\n\nm.clear();//清空map m\n\nm.empty();//判断map m是否为空。\n\n### 注意事项\n\n#### 中括号访问时默认值\n\n如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。\n\n```cpp\nmap<char, int> mp;\ncout << mp.count('a') << endl; // 0\nmp['a'];                       // 即使什么都没做，此时mp['a']=0已经插入了\ncout << mp.count('a') << endl; // 1\ncout << mp['a'] << endl;       // 0\n```\n\n#### 不可用迭代器计算下标\n\nmap 的迭代器不能像 vector 一样相减得到下标。**下面是错误用法：**\n\n```cpp\nauto it = mp.find('a');      // 正确，返回2所在位置的迭代器。\nint idx = it - mp.begin();   // 错误！不可相减得到下标。\n```\n\n### 适用情形\n\n需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。(`map<string, int> mp`)","slug":"c++STL","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19ap90006poot7g5e3i6e","content":"<p><strong>C++ 标准模板库 (STL, Standard Template Library)</strong>：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件——算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).</p>\n<p>示例：</p>\n<ul>\n<li>算法：<code>sort(a.begin(), a.end())</code></li>\n<li>容器：<code>queue&lt;int&gt; que</code></li>\n<li>仿函数：<code>greater&lt;int&gt;()</code></li>\n<li>迭代器：<code>vector&lt;int&gt;::iterator it = a.begin()</code></li>\n</ul>\n<h2 id=\"队列queue\"><a href=\"#队列queue\" class=\"headerlink\" title=\"队列queue\"></a>队列queue</h2><h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><p>先进先出</p>\n<h3 id=\"操作：\"><a href=\"#操作：\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用</th>\n<th align=\"center\">操作</th>\n<th align=\"center\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">构造</td>\n<td align=\"center\">queue&lt;类型&gt; que</td>\n<td align=\"center\">queue&lt; int &gt; que;</td>\n</tr>\n<tr>\n<td align=\"center\">进队</td>\n<td align=\"center\">.push(元素)</td>\n<td align=\"center\">que.push(1);</td>\n</tr>\n<tr>\n<td align=\"center\">出队</td>\n<td align=\"center\">.pop()</td>\n<td align=\"center\">que.pop();</td>\n</tr>\n<tr>\n<td align=\"center\">取队首</td>\n<td align=\"center\">.front()</td>\n<td align=\"center\">int a &#x3D; que.front();</td>\n</tr>\n<tr>\n<td align=\"center\">取队尾</td>\n<td align=\"center\">.back()</td>\n<td align=\"center\">int a &#x3D; que.back();</td>\n</tr>\n<tr>\n<td align=\"center\">查看大小</td>\n<td align=\"center\">.size()</td>\n<td align=\"center\">que.size()</td>\n</tr>\n<tr>\n<td align=\"center\">判空</td>\n<td align=\"center\">.empty()</td>\n<td align=\"center\">bool emp &#x3D; que.empty()</td>\n</tr>\n<tr>\n<td align=\"center\">清空</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n</tbody></table>\n<p>创建队列对象：queue&lt;元素类型&gt; 队列名</p>\n<p><strong>添加</strong>元素：队列名.push(元素名)；</p>\n<p><strong>删除</strong>元素：队列名.pop();</p>\n<p>判断<strong>是否为空</strong>：队列名.empty()；</p>\n<p>返回队列的<strong>大小</strong>：队列名.size();</p>\n<h3 id=\"注意事项：不可访问内部元素！\"><a href=\"#注意事项：不可访问内部元素！\" class=\"headerlink\" title=\"注意事项：不可访问内部元素！\"></a>注意事项：不可访问内部元素！</h3><p><strong>下面都是错误用法</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; que.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; que[i] &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> ele : que)</span><br><span class=\"line\">    cout &lt;&lt; ele &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈stack\"><a href=\"#栈stack\" class=\"headerlink\" title=\"栈stack\"></a>栈stack</h2><h3 id=\"特点：-1\"><a href=\"#特点：-1\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><p>先进后出FILO；</p>\n<p>从栈顶删除元素；</p>\n<p>在栈顶加入元素。</p>\n<h3 id=\"操作：-1\"><a href=\"#操作：-1\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用</th>\n<th align=\"center\">操作</th>\n<th align=\"center\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">构造</td>\n<td align=\"center\">stack&lt;类型&gt; stk</td>\n<td align=\"center\">stack&lt; int&gt; stk;</td>\n</tr>\n<tr>\n<td align=\"center\">进栈</td>\n<td align=\"center\">.push(元素)</td>\n<td align=\"center\">stk.push(1);</td>\n</tr>\n<tr>\n<td align=\"center\">出栈</td>\n<td align=\"center\">.pop()</td>\n<td align=\"center\">stk.pop();</td>\n</tr>\n<tr>\n<td align=\"center\">取栈顶</td>\n<td align=\"center\">.top()</td>\n<td align=\"center\">int a &#x3D; stk.top();</td>\n</tr>\n<tr>\n<td align=\"center\">查看大小</td>\n<td align=\"center\">.size()</td>\n<td align=\"center\">que.size()</td>\n</tr>\n<tr>\n<td align=\"center\">判空</td>\n<td align=\"center\">.empty()</td>\n<td align=\"center\">bool emp &#x3D; stk.empty()</td>\n</tr>\n<tr>\n<td align=\"center\">清空</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n</tbody></table>\n<p>创建栈对象：stack&lt;元素类型&gt; 栈名</p>\n<p>栈顶<strong>添加</strong>元素：栈名.push(元素名)；</p>\n<p><strong>删除</strong>栈顶元素：栈名.pop();</p>\n<p><strong>访问</strong>栈顶元素:栈名.top();<strong>&#x2F;&#x2F;要先确保栈非空</strong></p>\n<p>判断<strong>是否为空</strong>：栈名.empty()；</p>\n<p>返回栈的<strong>大小</strong>：栈名.size();</p>\n<p><strong>tips:栈和队列一样，没有clear之类的函数，如果想要清空一个栈，需要循环调用出栈函数。</strong></p>\n<p>eg:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">s.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">s.<span class=\"built_in\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">s.<span class=\"built_in\">push</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">cout&lt;&lt;s.<span class=\"built_in\">top</span>()&lt;&lt;endl;<span class=\"comment\">//2</span></span><br><span class=\"line\">s.<span class=\"built_in\">top</span>()+=<span class=\"number\">3</span>;</span><br><span class=\"line\">cout&lt;&lt;s.<span class=\"built_in\">top</span>()&lt;&lt;endl;<span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cout&lt;&lt;s.<span class=\"built_in\">size</span>()&lt;&lt;endl;<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-不可访问内部元素！\"><a href=\"#注意事项-不可访问内部元素！\" class=\"headerlink\" title=\"注意事项:不可访问内部元素！\"></a>注意事项:不可访问内部元素！</h3><p>以下是错误示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; stk.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; stk[i] &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> ele : stk)</span><br><span class=\"line\">    cout &lt;&lt; stk &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"典例：括号匹配\"><a href=\"#典例：括号匹配\" class=\"headerlink\" title=\"典例：括号匹配\"></a>典例：括号匹配</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">\tstack&lt;<span class=\"type\">char</span>&gt; p;</span><br><span class=\"line\">\tp.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;#&#x27;</span>);<span class=\"comment\">//设置哨兵，防止RE</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(p.<span class=\"built_in\">top</span>() == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;]&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(p.<span class=\"built_in\">top</span>() == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> p.<span class=\"built_in\">push</span>(s[i]);<span class=\"comment\">//左括号直接入栈，右括号就判断匹配</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (p.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>);<span class=\"comment\">//如果全能匹配上就只剩哨兵</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstring s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cin &gt;&gt; s) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(s)) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;Yes\\n&quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> cout &lt;&lt; <span class=\"string\">&quot;No\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串string\"><a href=\"#字符串string\" class=\"headerlink\" title=\"字符串string\"></a>字符串string</h2><h3 id=\"操作：-2\"><a href=\"#操作：-2\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><p>创建：string s;</p>\n<p>求长度:s.length(); 或者 s.size();</p>\n<p>连接： 直接用+、+&#x3D;运算符 或者append函数</p>\n<p>比较：直接用运算符&lt; 、 &gt;  、!&#x3D;、 &#x3D;&#x3D; 等等或者compare函数</p>\n<p>求子串：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 = <span class=\"string\">&quot;this is ok&quot;</span>;</span><br><span class=\"line\">string s2 = s<span class=\"number\">1.</span><span class=\"built_in\">substr</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>);<span class=\"comment\">// s2 = &quot;is i&quot;</span></span><br><span class=\"line\">s2 = s<span class=\"number\">1.</span><span class=\"built_in\">substr</span>(<span class=\"number\">2</span>); <span class=\"comment\">// s2 = &quot;is is ok&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>插入字符串：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 = <span class=\"string\">&quot;Limitless&quot;</span>;</span><br><span class=\"line\">string s2 = <span class=\"string\">&quot;00&quot;</span>;</span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">insert</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;123&quot;</span>);<span class=\"comment\">//s1 = &quot;Li123mitless&quot;</span></span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">insert</span>(<span class=\"number\">3</span>, s2); <span class=\"comment\">// s1 = &quot;Li10023mitless&quot;</span></span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">insert</span>(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;X&#x27;</span>) <span class=\"comment\">// s1 = &quot;Li1XXXXX0023mitless&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>删除子串：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 = <span class=\"string\">&quot;Reak Steel&quot;</span>;</span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">erase</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">//s1 = &quot;R Steel&quot;</span></span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">erase</span>(<span class=\"number\">5</span>); <span class=\"comment\">//s1 = &quot;R ste</span></span><br></pre></td></tr></table></figure>\n\n<p>交换两个string对象的内容：swap函数：s1.swap(s2);</p>\n<p>查找：</p>\n<p>s1.find(str) 查找字符串str在当前字符串s中第一次出现的位置</p>\n<p>s1.find(str, pos) 查找字符串str在当前字符串s的[pos, end]中第一次出现的位置</p>\n<p>全排列的下一个序列：next_permutation（s.begin(), s.end()）</p>\n<p>全排列的前一个序列：prev_permutation（s.begin(), s.end()）</p>\n<p>翻转字符串：reverse（s.begin(), s.end())</p>\n<h2 id=\"动态数组、向量vector\"><a href=\"#动态数组、向量vector\" class=\"headerlink\" title=\"动态数组、向量vector\"></a>动态数组、向量vector</h2><h3 id=\"操作：-3\"><a href=\"#操作：-3\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><p>创建：vector&lt;数据类型&gt; 向量名；</p>\n<p>初始化：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; abc;<span class=\"comment\">//初始化一个size为0的vector，最常用</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">abc</span><span class=\"params\">(<span class=\"number\">10</span>)</span>;<span class=\"comment\">//初始化了10个默认值为0的元素</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">abc</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">1</span>)</span>;<span class=\"comment\">//初始化了10个值为1的元素</span></span><br></pre></td></tr></table></figure>\n\n<p>访问：</p>\n<p>首元素：v.front()</p>\n<p>尾元素：v.back（）</p>\n<p>下标访问类似普通数组</p>\n<p>添加元素：</p>\n<p>向尾部添加：v.push_back(value);&#x2F;&#x2F;最常见的操作</p>\n<p>下标赋值注意别超出v.size（）</p>\n<p>求元素个数：v.size（）&#x2F;&#x2F;实际元素个数，不是容量</p>\n<p>判空：v.empty();</p>\n<p>翻转操作：reverse(v.begin(), v.end());</p>\n<p>清空：v.clear（）&#x2F;&#x2F;直接清空，不是变成0</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"提前指定长度\"><a href=\"#提前指定长度\" class=\"headerlink\" title=\"提前指定长度\"></a>提前指定长度</h4><p>如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个 <code>.push_back()</code>. 因为 <code>vector</code> 额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 优化前: 522ms</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; a;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e8</span>; i++)</span><br><span class=\"line\">    a.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\"><span class=\"comment\">// 优化后: 259ms</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1e8</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    a[i] = i;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"当心-size-t-溢出\"><a href=\"#当心-size-t-溢出\" class=\"headerlink\" title=\"当心 size_t 溢出\"></a>当心 size_t 溢出</h4><p>vector 获取长度的方法 <code>.size()</code> 返回值类型为 <code>size_t</code>，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 [0,232).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">65536</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> a = a.<span class=\"built_in\">size</span>() * a.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 直接溢出变成0了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"典例：二维向量存储邻接表\"><a href=\"#典例：二维向量存储邻接表\" class=\"headerlink\" title=\"典例：二维向量存储邻接表\"></a>典例：二维向量存储邻接表</h3><h2 id=\"集合set\"><a href=\"#集合set\" class=\"headerlink\" title=\"集合set\"></a>集合set</h2><p>数学上集合的特点：确定性，互异性，无序性</p>\n<p>stl中：有序的，元素都是排序好的，所有操作都是log时间里完成。</p>\n<p>提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。</p>\n<table>\n<thead>\n<tr>\n<th>集合三要素</th>\n<th>解释</th>\n<th>set</th>\n<th>multiset</th>\n<th>unordered_set</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>确定性</td>\n<td>一个元素要么在集合中，要么不在</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>互异性</td>\n<td>一个元素仅可以在集合中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>集合中的元素是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody></table>\n<h4 id=\"操作：-4\"><a href=\"#操作：-4\" class=\"headerlink\" title=\"操作：\"></a>操作：</h4><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入元素</td>\n<td><code>.insert(元素)</code></td>\n<td><code>st.insert(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>st.erase(2);</code></td>\n</tr>\n<tr>\n<td>查找元素</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = st.find(1);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>st.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<p>创建:set&lt;元素类型&gt; s;</p>\n<p>清空：s.crear()</p>\n<p>插入元素：s.insert(x);&#x2F;&#x2F;如果集合中之前没有就插入并排序，否则不插入</p>\n<p>删除元素：s.erase(x)</p>\n<p>查询是否有元素x：s.count(x);&#x2F;&#x2F;返回0无，返回1有。</p>\n<p>查询元素x位置：s.find(x)；返回一个x位置的迭代器</p>\n<p>判空：s.empty();</p>\n<p>求个数：size();</p>\n<p><strong>访问</strong>：</p>\n<p>只能通过迭代器访问。不支持 iterator &lt; s.end()写法</p>\n<p>可使用迭代器进行遍历访问：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>基于范围的循环（C++ 11）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;ele : st)</span><br><span class=\"line\">    cout &lt;&lt; ele &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"不存在下标索引\"><a href=\"#不存在下标索引\" class=\"headerlink\" title=\"不存在下标索引\"></a>不存在下标索引</h4><p>set 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; st[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元素只读\"><a href=\"#元素只读\" class=\"headerlink\" title=\"元素只读\"></a>元素只读</h4><p>set 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. <strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; *st.<span class=\"built_in\">begin</span>() &lt;&lt; endl; <span class=\"comment\">// 正确。可读。</span></span><br><span class=\"line\">*st.<span class=\"built_in\">begin</span>() = <span class=\"number\">1</span>;             <span class=\"comment\">// 错误！不可写！</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不可用迭代器计算下标\"><a href=\"#不可用迭代器计算下标\" class=\"headerlink\" title=\"不可用迭代器计算下标\"></a>不可用迭代器计算下标</h4><p>set 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it = st.<span class=\"built_in\">find</span>(<span class=\"number\">2</span>);      <span class=\"comment\">// 正确，返回2所在位置的迭代器。</span></span><br><span class=\"line\"><span class=\"type\">int</span> idx = it - st.<span class=\"built_in\">begin</span>(); <span class=\"comment\">// 错误！不可相减得到下标。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"典例：自动去重并升序排序\"><a href=\"#典例：自动去重并升序排序\" class=\"headerlink\" title=\"典例：自动去重并升序排序\"></a>典例：自动去重并升序排序</h3><h2 id=\"映射map\"><a href=\"#映射map\" class=\"headerlink\" title=\"映射map\"></a>映射map</h2><p>map是一个键值对（key:value)的容器，对于迭代器来说，可以修改value，而不能修改key。map会根据key自动排序。</p>\n<table>\n<thead>\n<tr>\n<th>性质</th>\n<th>解释</th>\n<th>map</th>\n<th>multimap</th>\n<th>unordered_map</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>互异性</td>\n<td>一个键仅可以在映射中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>键是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody></table>\n<h3 id=\"操作：-5\"><a href=\"#操作：-5\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>增 &#x2F; 改 &#x2F; 查元素</td>\n<td>中括号</td>\n<td><code>mp[1] = 2;</code></td>\n</tr>\n<tr>\n<td>查元素（返回迭代器）</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = mp.find(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>mp.erase(2);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>mp.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<p>map&lt;int,string&gt; m;&#x2F;&#x2F;定义了一个空map m</p>\n<p>m.count(k);&#x2F;&#x2F;返回m中键值等于k的元素个数（1或0——</p>\n<p>m.find(k);&#x2F;&#x2F;存在返回指向该元素的迭代器，否则返回结束地址ennd()</p>\n<p>m.erase（k);&#x2F;&#x2F;删除m中<strong>键为k</strong>的元素，返回删除元素的个数（1或0）</p>\n<p>m.erase(p);&#x2F;&#x2F;从m中删除<strong>迭代器p</strong>所指向的元素</p>\n<p>m.insert(e);&#x2F;&#x2F;e是一个用在m上的value_type类型的值（一个pair）。</p>\n<p>如果键e.first不在m中，则插入一个值为e.second的新元素；如果该键在m中已存在，那么不进行任何操作。</p>\n<p>m.clear();&#x2F;&#x2F;清空map m</p>\n<p>m.empty();&#x2F;&#x2F;判断map m是否为空。</p>\n<h3 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"中括号访问时默认值\"><a href=\"#中括号访问时默认值\" class=\"headerlink\" title=\"中括号访问时默认值\"></a>中括号访问时默认值</h4><p>如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">cout &lt;&lt; mp.<span class=\"built_in\">count</span>(<span class=\"string\">&#x27;a&#x27;</span>) &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\">mp[<span class=\"string\">&#x27;a&#x27;</span>];                       <span class=\"comment\">// 即使什么都没做，此时mp[&#x27;a&#x27;]=0已经插入了</span></span><br><span class=\"line\">cout &lt;&lt; mp.<span class=\"built_in\">count</span>(<span class=\"string\">&#x27;a&#x27;</span>) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\">cout &lt;&lt; mp[<span class=\"string\">&#x27;a&#x27;</span>] &lt;&lt; endl;       <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不可用迭代器计算下标-1\"><a href=\"#不可用迭代器计算下标-1\" class=\"headerlink\" title=\"不可用迭代器计算下标\"></a>不可用迭代器计算下标</h4><p>map 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it = mp.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;a&#x27;</span>);      <span class=\"comment\">// 正确，返回2所在位置的迭代器。</span></span><br><span class=\"line\"><span class=\"type\">int</span> idx = it - mp.<span class=\"built_in\">begin</span>();   <span class=\"comment\">// 错误！不可相减得到下标。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"适用情形\"><a href=\"#适用情形\" class=\"headerlink\" title=\"适用情形\"></a>适用情形</h3><p>需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。(<code>map&lt;string, int&gt; mp</code>)</p>\n","excerpt":"","more":"<p><strong>C++ 标准模板库 (STL, Standard Template Library)</strong>：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件——算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).</p>\n<p>示例：</p>\n<ul>\n<li>算法：<code>sort(a.begin(), a.end())</code></li>\n<li>容器：<code>queue&lt;int&gt; que</code></li>\n<li>仿函数：<code>greater&lt;int&gt;()</code></li>\n<li>迭代器：<code>vector&lt;int&gt;::iterator it = a.begin()</code></li>\n</ul>\n<h2 id=\"队列queue\"><a href=\"#队列queue\" class=\"headerlink\" title=\"队列queue\"></a>队列queue</h2><h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><p>先进先出</p>\n<h3 id=\"操作：\"><a href=\"#操作：\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用</th>\n<th align=\"center\">操作</th>\n<th align=\"center\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">构造</td>\n<td align=\"center\">queue&lt;类型&gt; que</td>\n<td align=\"center\">queue&lt; int &gt; que;</td>\n</tr>\n<tr>\n<td align=\"center\">进队</td>\n<td align=\"center\">.push(元素)</td>\n<td align=\"center\">que.push(1);</td>\n</tr>\n<tr>\n<td align=\"center\">出队</td>\n<td align=\"center\">.pop()</td>\n<td align=\"center\">que.pop();</td>\n</tr>\n<tr>\n<td align=\"center\">取队首</td>\n<td align=\"center\">.front()</td>\n<td align=\"center\">int a &#x3D; que.front();</td>\n</tr>\n<tr>\n<td align=\"center\">取队尾</td>\n<td align=\"center\">.back()</td>\n<td align=\"center\">int a &#x3D; que.back();</td>\n</tr>\n<tr>\n<td align=\"center\">查看大小</td>\n<td align=\"center\">.size()</td>\n<td align=\"center\">que.size()</td>\n</tr>\n<tr>\n<td align=\"center\">判空</td>\n<td align=\"center\">.empty()</td>\n<td align=\"center\">bool emp &#x3D; que.empty()</td>\n</tr>\n<tr>\n<td align=\"center\">清空</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n</tbody></table>\n<p>创建队列对象：queue&lt;元素类型&gt; 队列名</p>\n<p><strong>添加</strong>元素：队列名.push(元素名)；</p>\n<p><strong>删除</strong>元素：队列名.pop();</p>\n<p>判断<strong>是否为空</strong>：队列名.empty()；</p>\n<p>返回队列的<strong>大小</strong>：队列名.size();</p>\n<h3 id=\"注意事项：不可访问内部元素！\"><a href=\"#注意事项：不可访问内部元素！\" class=\"headerlink\" title=\"注意事项：不可访问内部元素！\"></a>注意事项：不可访问内部元素！</h3><p><strong>下面都是错误用法</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; que.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; que[i] &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> ele : que)</span><br><span class=\"line\">    cout &lt;&lt; ele &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈stack\"><a href=\"#栈stack\" class=\"headerlink\" title=\"栈stack\"></a>栈stack</h2><h3 id=\"特点：-1\"><a href=\"#特点：-1\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><p>先进后出FILO；</p>\n<p>从栈顶删除元素；</p>\n<p>在栈顶加入元素。</p>\n<h3 id=\"操作：-1\"><a href=\"#操作：-1\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用</th>\n<th align=\"center\">操作</th>\n<th align=\"center\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">构造</td>\n<td align=\"center\">stack&lt;类型&gt; stk</td>\n<td align=\"center\">stack&lt; int&gt; stk;</td>\n</tr>\n<tr>\n<td align=\"center\">进栈</td>\n<td align=\"center\">.push(元素)</td>\n<td align=\"center\">stk.push(1);</td>\n</tr>\n<tr>\n<td align=\"center\">出栈</td>\n<td align=\"center\">.pop()</td>\n<td align=\"center\">stk.pop();</td>\n</tr>\n<tr>\n<td align=\"center\">取栈顶</td>\n<td align=\"center\">.top()</td>\n<td align=\"center\">int a &#x3D; stk.top();</td>\n</tr>\n<tr>\n<td align=\"center\">查看大小</td>\n<td align=\"center\">.size()</td>\n<td align=\"center\">que.size()</td>\n</tr>\n<tr>\n<td align=\"center\">判空</td>\n<td align=\"center\">.empty()</td>\n<td align=\"center\">bool emp &#x3D; stk.empty()</td>\n</tr>\n<tr>\n<td align=\"center\">清空</td>\n<td align=\"center\">无</td>\n<td align=\"center\">无</td>\n</tr>\n</tbody></table>\n<p>创建栈对象：stack&lt;元素类型&gt; 栈名</p>\n<p>栈顶<strong>添加</strong>元素：栈名.push(元素名)；</p>\n<p><strong>删除</strong>栈顶元素：栈名.pop();</p>\n<p><strong>访问</strong>栈顶元素:栈名.top();<strong>&#x2F;&#x2F;要先确保栈非空</strong></p>\n<p>判断<strong>是否为空</strong>：栈名.empty()；</p>\n<p>返回栈的<strong>大小</strong>：栈名.size();</p>\n<p><strong>tips:栈和队列一样，没有clear之类的函数，如果想要清空一个栈，需要循环调用出栈函数。</strong></p>\n<p>eg:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">s.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">s.<span class=\"built_in\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">s.<span class=\"built_in\">push</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">cout&lt;&lt;s.<span class=\"built_in\">top</span>()&lt;&lt;endl;<span class=\"comment\">//2</span></span><br><span class=\"line\">s.<span class=\"built_in\">top</span>()+=<span class=\"number\">3</span>;</span><br><span class=\"line\">cout&lt;&lt;s.<span class=\"built_in\">top</span>()&lt;&lt;endl;<span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cout&lt;&lt;s.<span class=\"built_in\">size</span>()&lt;&lt;endl;<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-不可访问内部元素！\"><a href=\"#注意事项-不可访问内部元素！\" class=\"headerlink\" title=\"注意事项:不可访问内部元素！\"></a>注意事项:不可访问内部元素！</h3><p>以下是错误示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; stk.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; stk[i] &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> ele : stk)</span><br><span class=\"line\">    cout &lt;&lt; stk &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"典例：括号匹配\"><a href=\"#典例：括号匹配\" class=\"headerlink\" title=\"典例：括号匹配\"></a>典例：括号匹配</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">\tstack&lt;<span class=\"type\">char</span>&gt; p;</span><br><span class=\"line\">\tp.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;#&#x27;</span>);<span class=\"comment\">//设置哨兵，防止RE</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(p.<span class=\"built_in\">top</span>() == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;]&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(p.<span class=\"built_in\">top</span>() == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> p.<span class=\"built_in\">push</span>(s[i]);<span class=\"comment\">//左括号直接入栈，右括号就判断匹配</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (p.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>);<span class=\"comment\">//如果全能匹配上就只剩哨兵</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstring s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cin &gt;&gt; s) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(s)) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;Yes\\n&quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> cout &lt;&lt; <span class=\"string\">&quot;No\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串string\"><a href=\"#字符串string\" class=\"headerlink\" title=\"字符串string\"></a>字符串string</h2><h3 id=\"操作：-2\"><a href=\"#操作：-2\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><p>创建：string s;</p>\n<p>求长度:s.length(); 或者 s.size();</p>\n<p>连接： 直接用+、+&#x3D;运算符 或者append函数</p>\n<p>比较：直接用运算符&lt; 、 &gt;  、!&#x3D;、 &#x3D;&#x3D; 等等或者compare函数</p>\n<p>求子串：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 = <span class=\"string\">&quot;this is ok&quot;</span>;</span><br><span class=\"line\">string s2 = s<span class=\"number\">1.</span><span class=\"built_in\">substr</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>);<span class=\"comment\">// s2 = &quot;is i&quot;</span></span><br><span class=\"line\">s2 = s<span class=\"number\">1.</span><span class=\"built_in\">substr</span>(<span class=\"number\">2</span>); <span class=\"comment\">// s2 = &quot;is is ok&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>插入字符串：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 = <span class=\"string\">&quot;Limitless&quot;</span>;</span><br><span class=\"line\">string s2 = <span class=\"string\">&quot;00&quot;</span>;</span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">insert</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;123&quot;</span>);<span class=\"comment\">//s1 = &quot;Li123mitless&quot;</span></span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">insert</span>(<span class=\"number\">3</span>, s2); <span class=\"comment\">// s1 = &quot;Li10023mitless&quot;</span></span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">insert</span>(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;X&#x27;</span>) <span class=\"comment\">// s1 = &quot;Li1XXXXX0023mitless&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>删除子串：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 = <span class=\"string\">&quot;Reak Steel&quot;</span>;</span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">erase</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">//s1 = &quot;R Steel&quot;</span></span><br><span class=\"line\">s<span class=\"number\">1.</span><span class=\"built_in\">erase</span>(<span class=\"number\">5</span>); <span class=\"comment\">//s1 = &quot;R ste</span></span><br></pre></td></tr></table></figure>\n\n<p>交换两个string对象的内容：swap函数：s1.swap(s2);</p>\n<p>查找：</p>\n<p>s1.find(str) 查找字符串str在当前字符串s中第一次出现的位置</p>\n<p>s1.find(str, pos) 查找字符串str在当前字符串s的[pos, end]中第一次出现的位置</p>\n<p>全排列的下一个序列：next_permutation（s.begin(), s.end()）</p>\n<p>全排列的前一个序列：prev_permutation（s.begin(), s.end()）</p>\n<p>翻转字符串：reverse（s.begin(), s.end())</p>\n<h2 id=\"动态数组、向量vector\"><a href=\"#动态数组、向量vector\" class=\"headerlink\" title=\"动态数组、向量vector\"></a>动态数组、向量vector</h2><h3 id=\"操作：-3\"><a href=\"#操作：-3\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><p>创建：vector&lt;数据类型&gt; 向量名；</p>\n<p>初始化：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; abc;<span class=\"comment\">//初始化一个size为0的vector，最常用</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">abc</span><span class=\"params\">(<span class=\"number\">10</span>)</span>;<span class=\"comment\">//初始化了10个默认值为0的元素</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">abc</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">1</span>)</span>;<span class=\"comment\">//初始化了10个值为1的元素</span></span><br></pre></td></tr></table></figure>\n\n<p>访问：</p>\n<p>首元素：v.front()</p>\n<p>尾元素：v.back（）</p>\n<p>下标访问类似普通数组</p>\n<p>添加元素：</p>\n<p>向尾部添加：v.push_back(value);&#x2F;&#x2F;最常见的操作</p>\n<p>下标赋值注意别超出v.size（）</p>\n<p>求元素个数：v.size（）&#x2F;&#x2F;实际元素个数，不是容量</p>\n<p>判空：v.empty();</p>\n<p>翻转操作：reverse(v.begin(), v.end());</p>\n<p>清空：v.clear（）&#x2F;&#x2F;直接清空，不是变成0</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"提前指定长度\"><a href=\"#提前指定长度\" class=\"headerlink\" title=\"提前指定长度\"></a>提前指定长度</h4><p>如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个 <code>.push_back()</code>. 因为 <code>vector</code> 额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 优化前: 522ms</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; a;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e8</span>; i++)</span><br><span class=\"line\">    a.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\"><span class=\"comment\">// 优化后: 259ms</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1e8</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    a[i] = i;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"当心-size-t-溢出\"><a href=\"#当心-size-t-溢出\" class=\"headerlink\" title=\"当心 size_t 溢出\"></a>当心 size_t 溢出</h4><p>vector 获取长度的方法 <code>.size()</code> 返回值类型为 <code>size_t</code>，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 [0,232).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">65536</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> a = a.<span class=\"built_in\">size</span>() * a.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 直接溢出变成0了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"典例：二维向量存储邻接表\"><a href=\"#典例：二维向量存储邻接表\" class=\"headerlink\" title=\"典例：二维向量存储邻接表\"></a>典例：二维向量存储邻接表</h3><h2 id=\"集合set\"><a href=\"#集合set\" class=\"headerlink\" title=\"集合set\"></a>集合set</h2><p>数学上集合的特点：确定性，互异性，无序性</p>\n<p>stl中：有序的，元素都是排序好的，所有操作都是log时间里完成。</p>\n<p>提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。</p>\n<table>\n<thead>\n<tr>\n<th>集合三要素</th>\n<th>解释</th>\n<th>set</th>\n<th>multiset</th>\n<th>unordered_set</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>确定性</td>\n<td>一个元素要么在集合中，要么不在</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>互异性</td>\n<td>一个元素仅可以在集合中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>集合中的元素是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody></table>\n<h4 id=\"操作：-4\"><a href=\"#操作：-4\" class=\"headerlink\" title=\"操作：\"></a>操作：</h4><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入元素</td>\n<td><code>.insert(元素)</code></td>\n<td><code>st.insert(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>st.erase(2);</code></td>\n</tr>\n<tr>\n<td>查找元素</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = st.find(1);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>st.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<p>创建:set&lt;元素类型&gt; s;</p>\n<p>清空：s.crear()</p>\n<p>插入元素：s.insert(x);&#x2F;&#x2F;如果集合中之前没有就插入并排序，否则不插入</p>\n<p>删除元素：s.erase(x)</p>\n<p>查询是否有元素x：s.count(x);&#x2F;&#x2F;返回0无，返回1有。</p>\n<p>查询元素x位置：s.find(x)；返回一个x位置的迭代器</p>\n<p>判空：s.empty();</p>\n<p>求个数：size();</p>\n<p><strong>访问</strong>：</p>\n<p>只能通过迭代器访问。不支持 iterator &lt; s.end()写法</p>\n<p>可使用迭代器进行遍历访问：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); ++it)</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>基于范围的循环（C++ 11）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;ele : st)</span><br><span class=\"line\">    cout &lt;&lt; ele &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"不存在下标索引\"><a href=\"#不存在下标索引\" class=\"headerlink\" title=\"不存在下标索引\"></a>不存在下标索引</h4><p>set 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; st[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元素只读\"><a href=\"#元素只读\" class=\"headerlink\" title=\"元素只读\"></a>元素只读</h4><p>set 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. <strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; *st.<span class=\"built_in\">begin</span>() &lt;&lt; endl; <span class=\"comment\">// 正确。可读。</span></span><br><span class=\"line\">*st.<span class=\"built_in\">begin</span>() = <span class=\"number\">1</span>;             <span class=\"comment\">// 错误！不可写！</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不可用迭代器计算下标\"><a href=\"#不可用迭代器计算下标\" class=\"headerlink\" title=\"不可用迭代器计算下标\"></a>不可用迭代器计算下标</h4><p>set 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it = st.<span class=\"built_in\">find</span>(<span class=\"number\">2</span>);      <span class=\"comment\">// 正确，返回2所在位置的迭代器。</span></span><br><span class=\"line\"><span class=\"type\">int</span> idx = it - st.<span class=\"built_in\">begin</span>(); <span class=\"comment\">// 错误！不可相减得到下标。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"典例：自动去重并升序排序\"><a href=\"#典例：自动去重并升序排序\" class=\"headerlink\" title=\"典例：自动去重并升序排序\"></a>典例：自动去重并升序排序</h3><h2 id=\"映射map\"><a href=\"#映射map\" class=\"headerlink\" title=\"映射map\"></a>映射map</h2><p>map是一个键值对（key:value)的容器，对于迭代器来说，可以修改value，而不能修改key。map会根据key自动排序。</p>\n<table>\n<thead>\n<tr>\n<th>性质</th>\n<th>解释</th>\n<th>map</th>\n<th>multimap</th>\n<th>unordered_map</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>互异性</td>\n<td>一个键仅可以在映射中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>键是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody></table>\n<h3 id=\"操作：-5\"><a href=\"#操作：-5\" class=\"headerlink\" title=\"操作：\"></a>操作：</h3><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>增 &#x2F; 改 &#x2F; 查元素</td>\n<td>中括号</td>\n<td><code>mp[1] = 2;</code></td>\n</tr>\n<tr>\n<td>查元素（返回迭代器）</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = mp.find(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>mp.erase(2);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>mp.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<p>map&lt;int,string&gt; m;&#x2F;&#x2F;定义了一个空map m</p>\n<p>m.count(k);&#x2F;&#x2F;返回m中键值等于k的元素个数（1或0——</p>\n<p>m.find(k);&#x2F;&#x2F;存在返回指向该元素的迭代器，否则返回结束地址ennd()</p>\n<p>m.erase（k);&#x2F;&#x2F;删除m中<strong>键为k</strong>的元素，返回删除元素的个数（1或0）</p>\n<p>m.erase(p);&#x2F;&#x2F;从m中删除<strong>迭代器p</strong>所指向的元素</p>\n<p>m.insert(e);&#x2F;&#x2F;e是一个用在m上的value_type类型的值（一个pair）。</p>\n<p>如果键e.first不在m中，则插入一个值为e.second的新元素；如果该键在m中已存在，那么不进行任何操作。</p>\n<p>m.clear();&#x2F;&#x2F;清空map m</p>\n<p>m.empty();&#x2F;&#x2F;判断map m是否为空。</p>\n<h3 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"中括号访问时默认值\"><a href=\"#中括号访问时默认值\" class=\"headerlink\" title=\"中括号访问时默认值\"></a>中括号访问时默认值</h4><p>如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">cout &lt;&lt; mp.<span class=\"built_in\">count</span>(<span class=\"string\">&#x27;a&#x27;</span>) &lt;&lt; endl; <span class=\"comment\">// 0</span></span><br><span class=\"line\">mp[<span class=\"string\">&#x27;a&#x27;</span>];                       <span class=\"comment\">// 即使什么都没做，此时mp[&#x27;a&#x27;]=0已经插入了</span></span><br><span class=\"line\">cout &lt;&lt; mp.<span class=\"built_in\">count</span>(<span class=\"string\">&#x27;a&#x27;</span>) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\">cout &lt;&lt; mp[<span class=\"string\">&#x27;a&#x27;</span>] &lt;&lt; endl;       <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不可用迭代器计算下标-1\"><a href=\"#不可用迭代器计算下标-1\" class=\"headerlink\" title=\"不可用迭代器计算下标\"></a>不可用迭代器计算下标</h4><p>map 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it = mp.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;a&#x27;</span>);      <span class=\"comment\">// 正确，返回2所在位置的迭代器。</span></span><br><span class=\"line\"><span class=\"type\">int</span> idx = it - mp.<span class=\"built_in\">begin</span>();   <span class=\"comment\">// 错误！不可相减得到下标。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"适用情形\"><a href=\"#适用情形\" class=\"headerlink\" title=\"适用情形\"></a>适用情形</h3><p>需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。(<code>map&lt;string, int&gt; mp</code>)</p>\n"},{"title":"springboot_xushu","date":"2025-03-01T16:00:00.000Z","updated":"2025-03-01T16:00:00.000Z","_content":"\n跟着up主徐庶做了一个springboot的小Demo，在后端实现了user的增删改查。以下是对本次学习的记录。\n\n​\t首先我打开了IDEA软件创建了一个用maven管理的springboot项目，勾选了web，mysql driver和jpa的依赖包。进入到项目界面，pom.xml文件是maven项目的配置文件，src-main-java是主体程序部分，test是测试程序部分，resources-application.properties是springboot应用的配置文件，我在配置文件中引入了数据库连接的配置和一些jpa的配置。另外，由于我的电脑8080端口已经被占用了所以我还配置了端口为8088。\n\n​\t接着我在java目录下创建了一些包，它们是springboot项目的层次结构，控制层的controller包，业务逻辑层的service包，数据访问层的repository包。例外我还创建了pojo包用于存储简单的Java对象，exception包用于处理所有的异常以便给前端传输格式一致的数据。\n\n​\t然后我在pojo包下创建了一个User类，给它一些属性和getter、setter方法以及toString方法，我准备将这个对象映射成数据库的一张表，在这个类的上方加上了@Table(name=\"tb_user\")和@Entity注解。在它的id属性上方加上了@Id和@GeneratedValue(strategy = GenerationType.IDENTITY)//自增生成    这两个注解，并且在id属性以及其他属性上方加上了@Column(name=\"xxx\")注解表示这对应表中的某一字段。并且新建一个Dto包，新建一个数据传输类UserDto。\n\n​\t完成创建实体后，我便在控制层controller包下创建userController类来写对实体的一些操作如增删改查，依然利用注解完成，它们对应着网站请求方法的这四种方式\n\n```java\n//增加\n@PostMapping//localhost:8088/user\n//查询\n@GetMapping(\"/{userId}\")\n//修改\n@PutMapping\n//删除\n@DeleteMapping(\"/{userId}\")\n```\n\n在此类上方加上注解\n\n```java\n@RestController//接口方法返回对象 转换成json文本\n@RequestMapping(\"/user\")//localhost:8088/user/**\n```\n\n我开始实现第一个功能，其中@Validated注解是用来验证传入参数的，@RequestBody注解是把json文本转换成对象的。\n\n```\n@PostMapping//localhost:8088/user\npublic ResponseMessage<User> add(@Validated @RequestBody UserDto user) {\n    User userNew = userService.add(user);\n    return ResponseMessage.success(userNew);\n}\n```\n\n我把业务逻辑的实现交给了UserService类的add方法，所以去业务逻辑层写一个这样的接口IUserService，并写它的实现类Userservice。实现类上方写注解@Service表示这个类是springboot的一个bean。加上此注解后便可以在UserController中把这个类自动装配进来。\n\n```java\n@Autowired\nIUserService userService;\n```\n\n在这个接口新建add方法，在它的实现类UserService中实现这个方法，\n\n```java\n@Override\npublic User add(UserDto user) {\n\n    User userPojo = new User();\n\n    BeanUtils.copyProperties(user,userPojo);//用于把user拷贝到userPojo\n\n    return userRepository.save(userPojo);\n}\n```\n\n我在数据数据访问层定义了一个接口UserRepository，此接口继承了JPA的CrudRepository接口，无需我们自己实现。\n\n```java\n@Repository //用来表示数据访问层的bean\npublic interface UserRepository extends CrudRepository<User,Integer> {\n\n}\n```\n\n有了这个bean我们便可以在UerService类中把它自动装配进来。\n\n```java\n@Autowired\nUserRepository userRepository;\n```\n\n完成之后打开postman开始测试。\n\n","source":"_posts/springboot_xushu.md","raw":"---\ntitle: springboot_xushu\ndate: 2025-03-02\nupdated: 2025-03-02\ncategories: java\n---\n\n跟着up主徐庶做了一个springboot的小Demo，在后端实现了user的增删改查。以下是对本次学习的记录。\n\n​\t首先我打开了IDEA软件创建了一个用maven管理的springboot项目，勾选了web，mysql driver和jpa的依赖包。进入到项目界面，pom.xml文件是maven项目的配置文件，src-main-java是主体程序部分，test是测试程序部分，resources-application.properties是springboot应用的配置文件，我在配置文件中引入了数据库连接的配置和一些jpa的配置。另外，由于我的电脑8080端口已经被占用了所以我还配置了端口为8088。\n\n​\t接着我在java目录下创建了一些包，它们是springboot项目的层次结构，控制层的controller包，业务逻辑层的service包，数据访问层的repository包。例外我还创建了pojo包用于存储简单的Java对象，exception包用于处理所有的异常以便给前端传输格式一致的数据。\n\n​\t然后我在pojo包下创建了一个User类，给它一些属性和getter、setter方法以及toString方法，我准备将这个对象映射成数据库的一张表，在这个类的上方加上了@Table(name=\"tb_user\")和@Entity注解。在它的id属性上方加上了@Id和@GeneratedValue(strategy = GenerationType.IDENTITY)//自增生成    这两个注解，并且在id属性以及其他属性上方加上了@Column(name=\"xxx\")注解表示这对应表中的某一字段。并且新建一个Dto包，新建一个数据传输类UserDto。\n\n​\t完成创建实体后，我便在控制层controller包下创建userController类来写对实体的一些操作如增删改查，依然利用注解完成，它们对应着网站请求方法的这四种方式\n\n```java\n//增加\n@PostMapping//localhost:8088/user\n//查询\n@GetMapping(\"/{userId}\")\n//修改\n@PutMapping\n//删除\n@DeleteMapping(\"/{userId}\")\n```\n\n在此类上方加上注解\n\n```java\n@RestController//接口方法返回对象 转换成json文本\n@RequestMapping(\"/user\")//localhost:8088/user/**\n```\n\n我开始实现第一个功能，其中@Validated注解是用来验证传入参数的，@RequestBody注解是把json文本转换成对象的。\n\n```\n@PostMapping//localhost:8088/user\npublic ResponseMessage<User> add(@Validated @RequestBody UserDto user) {\n    User userNew = userService.add(user);\n    return ResponseMessage.success(userNew);\n}\n```\n\n我把业务逻辑的实现交给了UserService类的add方法，所以去业务逻辑层写一个这样的接口IUserService，并写它的实现类Userservice。实现类上方写注解@Service表示这个类是springboot的一个bean。加上此注解后便可以在UserController中把这个类自动装配进来。\n\n```java\n@Autowired\nIUserService userService;\n```\n\n在这个接口新建add方法，在它的实现类UserService中实现这个方法，\n\n```java\n@Override\npublic User add(UserDto user) {\n\n    User userPojo = new User();\n\n    BeanUtils.copyProperties(user,userPojo);//用于把user拷贝到userPojo\n\n    return userRepository.save(userPojo);\n}\n```\n\n我在数据数据访问层定义了一个接口UserRepository，此接口继承了JPA的CrudRepository接口，无需我们自己实现。\n\n```java\n@Repository //用来表示数据访问层的bean\npublic interface UserRepository extends CrudRepository<User,Integer> {\n\n}\n```\n\n有了这个bean我们便可以在UerService类中把它自动装配进来。\n\n```java\n@Autowired\nUserRepository userRepository;\n```\n\n完成之后打开postman开始测试。\n\n","slug":"springboot_xushu","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apa0009poot6cot0v6s","content":"<p>跟着up主徐庶做了一个springboot的小Demo，在后端实现了user的增删改查。以下是对本次学习的记录。</p>\n<p>​\t首先我打开了IDEA软件创建了一个用maven管理的springboot项目，勾选了web，mysql driver和jpa的依赖包。进入到项目界面，pom.xml文件是maven项目的配置文件，src-main-java是主体程序部分，test是测试程序部分，resources-application.properties是springboot应用的配置文件，我在配置文件中引入了数据库连接的配置和一些jpa的配置。另外，由于我的电脑8080端口已经被占用了所以我还配置了端口为8088。</p>\n<p>​\t接着我在java目录下创建了一些包，它们是springboot项目的层次结构，控制层的controller包，业务逻辑层的service包，数据访问层的repository包。例外我还创建了pojo包用于存储简单的Java对象，exception包用于处理所有的异常以便给前端传输格式一致的数据。</p>\n<p>​\t然后我在pojo包下创建了一个User类，给它一些属性和getter、setter方法以及toString方法，我准备将这个对象映射成数据库的一张表，在这个类的上方加上了@Table(name&#x3D;”tb_user”)和@Entity注解。在它的id属性上方加上了@Id和@GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)&#x2F;&#x2F;自增生成    这两个注解，并且在id属性以及其他属性上方加上了@Column(name&#x3D;”xxx”)注解表示这对应表中的某一字段。并且新建一个Dto包，新建一个数据传输类UserDto。</p>\n<p>​\t完成创建实体后，我便在控制层controller包下创建userController类来写对实体的一些操作如增删改查，依然利用注解完成，它们对应着网站请求方法的这四种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增加</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span><span class=\"comment\">//localhost:8088/user</span></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/&#123;userId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//修改</span></span><br><span class=\"line\"><span class=\"meta\">@PutMapping</span></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping(&quot;/&#123;userId&#125;&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<p>在此类上方加上注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span><span class=\"comment\">//接口方法返回对象 转换成json文本</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span><span class=\"comment\">//localhost:8088/user/**</span></span><br></pre></td></tr></table></figure>\n\n<p>我开始实现第一个功能，其中@Validated注解是用来验证传入参数的，@RequestBody注解是把json文本转换成对象的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PostMapping//localhost:8088/user</span><br><span class=\"line\">public ResponseMessage&lt;User&gt; add(@Validated @RequestBody UserDto user) &#123;</span><br><span class=\"line\">    User userNew = userService.add(user);</span><br><span class=\"line\">    return ResponseMessage.success(userNew);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我把业务逻辑的实现交给了UserService类的add方法，所以去业务逻辑层写一个这样的接口IUserService，并写它的实现类Userservice。实现类上方写注解@Service表示这个类是springboot的一个bean。加上此注解后便可以在UserController中把这个类自动装配进来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">IUserService userService;</span><br></pre></td></tr></table></figure>\n\n<p>在这个接口新建add方法，在它的实现类UserService中实现这个方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">add</span><span class=\"params\">(UserDto user)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">userPojo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    BeanUtils.copyProperties(user,userPojo);<span class=\"comment\">//用于把user拷贝到userPojo</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> userRepository.save(userPojo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我在数据数据访问层定义了一个接口UserRepository，此接口继承了JPA的CrudRepository接口，无需我们自己实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span> <span class=\"comment\">//用来表示数据访问层的bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CrudRepository</span>&lt;User,Integer&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了这个bean我们便可以在UerService类中把它自动装配进来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">UserRepository userRepository;</span><br></pre></td></tr></table></figure>\n\n<p>完成之后打开postman开始测试。</p>\n","excerpt":"","more":"<p>跟着up主徐庶做了一个springboot的小Demo，在后端实现了user的增删改查。以下是对本次学习的记录。</p>\n<p>​\t首先我打开了IDEA软件创建了一个用maven管理的springboot项目，勾选了web，mysql driver和jpa的依赖包。进入到项目界面，pom.xml文件是maven项目的配置文件，src-main-java是主体程序部分，test是测试程序部分，resources-application.properties是springboot应用的配置文件，我在配置文件中引入了数据库连接的配置和一些jpa的配置。另外，由于我的电脑8080端口已经被占用了所以我还配置了端口为8088。</p>\n<p>​\t接着我在java目录下创建了一些包，它们是springboot项目的层次结构，控制层的controller包，业务逻辑层的service包，数据访问层的repository包。例外我还创建了pojo包用于存储简单的Java对象，exception包用于处理所有的异常以便给前端传输格式一致的数据。</p>\n<p>​\t然后我在pojo包下创建了一个User类，给它一些属性和getter、setter方法以及toString方法，我准备将这个对象映射成数据库的一张表，在这个类的上方加上了@Table(name&#x3D;”tb_user”)和@Entity注解。在它的id属性上方加上了@Id和@GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)&#x2F;&#x2F;自增生成    这两个注解，并且在id属性以及其他属性上方加上了@Column(name&#x3D;”xxx”)注解表示这对应表中的某一字段。并且新建一个Dto包，新建一个数据传输类UserDto。</p>\n<p>​\t完成创建实体后，我便在控制层controller包下创建userController类来写对实体的一些操作如增删改查，依然利用注解完成，它们对应着网站请求方法的这四种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增加</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span><span class=\"comment\">//localhost:8088/user</span></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/&#123;userId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//修改</span></span><br><span class=\"line\"><span class=\"meta\">@PutMapping</span></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"meta\">@DeleteMapping(&quot;/&#123;userId&#125;&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<p>在此类上方加上注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span><span class=\"comment\">//接口方法返回对象 转换成json文本</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span><span class=\"comment\">//localhost:8088/user/**</span></span><br></pre></td></tr></table></figure>\n\n<p>我开始实现第一个功能，其中@Validated注解是用来验证传入参数的，@RequestBody注解是把json文本转换成对象的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PostMapping//localhost:8088/user</span><br><span class=\"line\">public ResponseMessage&lt;User&gt; add(@Validated @RequestBody UserDto user) &#123;</span><br><span class=\"line\">    User userNew = userService.add(user);</span><br><span class=\"line\">    return ResponseMessage.success(userNew);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我把业务逻辑的实现交给了UserService类的add方法，所以去业务逻辑层写一个这样的接口IUserService，并写它的实现类Userservice。实现类上方写注解@Service表示这个类是springboot的一个bean。加上此注解后便可以在UserController中把这个类自动装配进来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">IUserService userService;</span><br></pre></td></tr></table></figure>\n\n<p>在这个接口新建add方法，在它的实现类UserService中实现这个方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">add</span><span class=\"params\">(UserDto user)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">userPojo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    BeanUtils.copyProperties(user,userPojo);<span class=\"comment\">//用于把user拷贝到userPojo</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> userRepository.save(userPojo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我在数据数据访问层定义了一个接口UserRepository，此接口继承了JPA的CrudRepository接口，无需我们自己实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span> <span class=\"comment\">//用来表示数据访问层的bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CrudRepository</span>&lt;User,Integer&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了这个bean我们便可以在UerService类中把它自动装配进来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">UserRepository userRepository;</span><br></pre></td></tr></table></figure>\n\n<p>完成之后打开postman开始测试。</p>\n"},{"title":"关于本站","date":"2025-01-28T16:00:00.000Z","updated":"2025-01-28T16:00:00.000Z","swiper_index":1,"_content":"\n# 特别感谢\n本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  \n- [@康文昌](https://space.bilibili.com/34786453)\n- [@Fomalhaut](https://space.bilibili.com/220757832)\n- [@木子dn](https://space.bilibili.com/1398826277)\n- [@阿巴In](https://space.bilibili.com/381992209)\n","source":"_posts/关于本站.md","raw":"---\ntitle: 关于本站\ndate: 2025-01-29\nupdated: 2025-01-29\ncategories: 博客相关\nswiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n\n# 特别感谢\n本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  \n- [@康文昌](https://space.bilibili.com/34786453)\n- [@Fomalhaut](https://space.bilibili.com/220757832)\n- [@木子dn](https://space.bilibili.com/1398826277)\n- [@阿巴In](https://space.bilibili.com/381992209)\n","slug":"关于本站","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apa000bpootgt7hbr8y","content":"<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  </p>\n<ul>\n<li><a href=\"https://space.bilibili.com/34786453\">@康文昌</a></li>\n<li><a href=\"https://space.bilibili.com/220757832\">@Fomalhaut</a></li>\n<li><a href=\"https://space.bilibili.com/1398826277\">@木子dn</a></li>\n<li><a href=\"https://space.bilibili.com/381992209\">@阿巴In</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  </p>\n<ul>\n<li><a href=\"https://space.bilibili.com/34786453\">@康文昌</a></li>\n<li><a href=\"https://space.bilibili.com/220757832\">@Fomalhaut</a></li>\n<li><a href=\"https://space.bilibili.com/1398826277\">@木子dn</a></li>\n<li><a href=\"https://space.bilibili.com/381992209\">@阿巴In</a></li>\n</ul>\n"},{"title":"刷题日记2.26","date":"2025-02-25T16:00:00.000Z","updated":"2025-02-25T16:00:00.000Z","_content":"## 1.前缀和\n\n前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。\n\n本题链接：\n\n[【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/7)\n\n今日题解如下：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e5 +9;\nll a[N], pre[N];\n\nint main() {\n   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n   int t;\n   cin>>t;\n   \n   while(t--) {\n   \tint n,q;\n   \tcin >> n >> q;\n   \t\n   \tfor(int i = 1; i <= n; ++i)cin>>a[i];\n   \tfor(int i = 1; i <= n; ++i)pre[i] = pre[i-1] + a[i];\n\n   \twhile(q--) {\n   \t\tint l, r;\n   \t\tcin>>l>>r;\n   \t\tcout << pre[r] -pre[l - 1] << '\\n';\n   \t}\n   }\n\n   return 0;\n}\n```\n\n粗心的把ll = long long 写成ll = int；导致结果错误。\n\n## 2.差分\n\n差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。\n\n原题链接：\n\n[【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/8)\n\n今日题解:\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1e5 + 9;\nll a[N],diff[N],pre[N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,p,q;\n\tcin>>n>>p>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i];\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tdiff[i] = a[i] - a[i-1];//差分数组每一项为原数组两项之差\n\t} \n\twhile(p--) {\n\t\tint l,r,x;\n\t\tcin>>l>>r>>x;\n\t\tdiff[l]+=x;\n\t\tdiff[r+1]-=x;//只在[l,r]上修改，之后的要恢复原样\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\ta[i]=a[i-1]+diff[i];//恢复成原数组\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tpre[i]=pre[i-1]+a[i];//修改后的前缀和\n\t}\n\twhile(q--) {\n\t\tint l,r;\n\t\tcin>>l>>r;\n\t\tcout<<pre[r] - pre[l-1]<<'\\n';\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n## 3.**二维前缀和**\n\n原题链接：\n\n[【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/15)\n\n今日题解：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e3 + 9;\nll a[N][N], pre[N][N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,m,q;\n\tcin>>n>>m>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tpre[i][j]=pre[i-1][j]+pre[i][j-1]-pre[i-1][j-1]+a[i][j];//见图1\n\t\t}\n\t}\n\twhile(q--) {\n\t\tint x1,y1,x2,y2;\n\t\tcin>>x1>>y1>>x2>>y2;\n\t\tcout<<pre[x2][y2]-pre[x2][y1-1]-pre[x1-1][y2]+pre[x1-1][y1-1]<<'\\n';//见图2\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n图1：\n\n![image-20250226225152860](刷题日记2.26/image-20250226225152860.png)\n\n图2：\n\n![image-20250226225220869](刷题日记2.26/image-20250226225220869.png)","source":"_posts/刷题日记2.26.md","raw":"---\ntitle: 刷题日记2.26\ndate: 2025-02-26\nupdated: 2025-02-26\ncategories: 算法\n---\n## 1.前缀和\n\n前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。\n\n本题链接：\n\n[【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/7)\n\n今日题解如下：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e5 +9;\nll a[N], pre[N];\n\nint main() {\n   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n   int t;\n   cin>>t;\n   \n   while(t--) {\n   \tint n,q;\n   \tcin >> n >> q;\n   \t\n   \tfor(int i = 1; i <= n; ++i)cin>>a[i];\n   \tfor(int i = 1; i <= n; ++i)pre[i] = pre[i-1] + a[i];\n\n   \twhile(q--) {\n   \t\tint l, r;\n   \t\tcin>>l>>r;\n   \t\tcout << pre[r] -pre[l - 1] << '\\n';\n   \t}\n   }\n\n   return 0;\n}\n```\n\n粗心的把ll = long long 写成ll = int；导致结果错误。\n\n## 2.差分\n\n差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。\n\n原题链接：\n\n[【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/8)\n\n今日题解:\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1e5 + 9;\nll a[N],diff[N],pre[N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,p,q;\n\tcin>>n>>p>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i];\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tdiff[i] = a[i] - a[i-1];//差分数组每一项为原数组两项之差\n\t} \n\twhile(p--) {\n\t\tint l,r,x;\n\t\tcin>>l>>r>>x;\n\t\tdiff[l]+=x;\n\t\tdiff[r+1]-=x;//只在[l,r]上修改，之后的要恢复原样\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\ta[i]=a[i-1]+diff[i];//恢复成原数组\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tpre[i]=pre[i-1]+a[i];//修改后的前缀和\n\t}\n\twhile(q--) {\n\t\tint l,r;\n\t\tcin>>l>>r;\n\t\tcout<<pre[r] - pre[l-1]<<'\\n';\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n## 3.**二维前缀和**\n\n原题链接：\n\n[【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/15)\n\n今日题解：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e3 + 9;\nll a[N][N], pre[N][N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,m,q;\n\tcin>>n>>m>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tpre[i][j]=pre[i-1][j]+pre[i][j-1]-pre[i-1][j-1]+a[i][j];//见图1\n\t\t}\n\t}\n\twhile(q--) {\n\t\tint x1,y1,x2,y2;\n\t\tcin>>x1>>y1>>x2>>y2;\n\t\tcout<<pre[x2][y2]-pre[x2][y1-1]-pre[x1-1][y2]+pre[x1-1][y1-1]<<'\\n';//见图2\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n图1：\n\n![image-20250226225152860](刷题日记2.26/image-20250226225152860.png)\n\n图2：\n\n![image-20250226225220869](刷题日记2.26/image-20250226225220869.png)","slug":"刷题日记2.26","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apc000epootf7b57ho2","content":"<h2 id=\"1-前缀和\"><a href=\"#1-前缀和\" class=\"headerlink\" title=\"1.前缀和\"></a>1.前缀和</h2><p>前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。</p>\n<p>本题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/7\">【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> <span class=\"number\">+9</span>;</span><br><span class=\"line\">ll a[N], pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"type\">int</span> t;</span><br><span class=\"line\">   cin&gt;&gt;t;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">   \t<span class=\"type\">int</span> n,q;</span><br><span class=\"line\">   \tcin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)cin&gt;&gt;a[i];</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)pre[i] = pre[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">   \t\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">   \t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">   \t\tcout &lt;&lt; pre[r] -pre[l - <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>粗心的把ll &#x3D; long long 写成ll &#x3D; int；导致结果错误。</p>\n<h2 id=\"2-差分\"><a href=\"#2-差分\" class=\"headerlink\" title=\"2.差分\"></a>2.差分</h2><p>差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。</p>\n<p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/8\">【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N],diff[N],pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,p,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tdiff[i] = a[i] - a[i<span class=\"number\">-1</span>];<span class=\"comment\">//差分数组每一项为原数组两项之差</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r,x;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class=\"line\">\t\tdiff[l]+=x;</span><br><span class=\"line\">\t\tdiff[r<span class=\"number\">+1</span>]-=x;<span class=\"comment\">//只在[l,r]上修改，之后的要恢复原样</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\ta[i]=a[i<span class=\"number\">-1</span>]+diff[i];<span class=\"comment\">//恢复成原数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tpre[i]=pre[i<span class=\"number\">-1</span>]+a[i];<span class=\"comment\">//修改后的前缀和</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[r] - pre[l<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-二维前缀和\"><a href=\"#3-二维前缀和\" class=\"headerlink\" title=\"3.二维前缀和\"></a>3.<strong>二维前缀和</strong></h2><p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/15\">【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e3</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N][N], pre[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;a[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tpre[i][j]=pre[i<span class=\"number\">-1</span>][j]+pre[i][j<span class=\"number\">-1</span>]-pre[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+a[i][j];<span class=\"comment\">//见图1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x1,y1,x2,y2;</span><br><span class=\"line\">\t\tcin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[x2][y2]-pre[x2][y1<span class=\"number\">-1</span>]-pre[x1<span class=\"number\">-1</span>][y2]+pre[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;<span class=\"comment\">//见图2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图1：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225152860.png\" alt=\"image-20250226225152860\"></p>\n<p>图2：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225220869.png\" alt=\"image-20250226225220869\"></p>\n","excerpt":"","more":"<h2 id=\"1-前缀和\"><a href=\"#1-前缀和\" class=\"headerlink\" title=\"1.前缀和\"></a>1.前缀和</h2><p>前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。</p>\n<p>本题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/7\">【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> <span class=\"number\">+9</span>;</span><br><span class=\"line\">ll a[N], pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"type\">int</span> t;</span><br><span class=\"line\">   cin&gt;&gt;t;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">   \t<span class=\"type\">int</span> n,q;</span><br><span class=\"line\">   \tcin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)cin&gt;&gt;a[i];</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)pre[i] = pre[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">   \t\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">   \t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">   \t\tcout &lt;&lt; pre[r] -pre[l - <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>粗心的把ll &#x3D; long long 写成ll &#x3D; int；导致结果错误。</p>\n<h2 id=\"2-差分\"><a href=\"#2-差分\" class=\"headerlink\" title=\"2.差分\"></a>2.差分</h2><p>差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。</p>\n<p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/8\">【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N],diff[N],pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,p,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tdiff[i] = a[i] - a[i<span class=\"number\">-1</span>];<span class=\"comment\">//差分数组每一项为原数组两项之差</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r,x;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class=\"line\">\t\tdiff[l]+=x;</span><br><span class=\"line\">\t\tdiff[r<span class=\"number\">+1</span>]-=x;<span class=\"comment\">//只在[l,r]上修改，之后的要恢复原样</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\ta[i]=a[i<span class=\"number\">-1</span>]+diff[i];<span class=\"comment\">//恢复成原数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tpre[i]=pre[i<span class=\"number\">-1</span>]+a[i];<span class=\"comment\">//修改后的前缀和</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[r] - pre[l<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-二维前缀和\"><a href=\"#3-二维前缀和\" class=\"headerlink\" title=\"3.二维前缀和\"></a>3.<strong>二维前缀和</strong></h2><p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/15\">【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e3</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N][N], pre[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;a[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tpre[i][j]=pre[i<span class=\"number\">-1</span>][j]+pre[i][j<span class=\"number\">-1</span>]-pre[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+a[i][j];<span class=\"comment\">//见图1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x1,y1,x2,y2;</span><br><span class=\"line\">\t\tcin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[x2][y2]-pre[x2][y1<span class=\"number\">-1</span>]-pre[x1<span class=\"number\">-1</span>][y2]+pre[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;<span class=\"comment\">//见图2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图1：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225152860.png\" alt=\"image-20250226225152860\"></p>\n<p>图2：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225220869.png\" alt=\"image-20250226225220869\"></p>\n"},{"title":"Spring","date":"2025-04-14T16:00:00.000Z","updated":"2025-04-15T16:00:00.000Z","_content":"# Spring简介\n\n### 1.1历史\n\n2002年，首次推出了spring框架的雏形：interface21框架\n\n2004年3月24日，悉尼大学音乐学博士**Rod Johnson**首次推出Spring框架1.0，解决企业应用开发的复杂性。\n\n设计理念：使现有的技术更加容易使用，本身是一套大杂烩，整合了现有的技术框架。\n\n\n\n- SSH：Struct2(视图框架) + Spring(融合剂) + Hibernate(全自动持久层框架)\n\n- SSM : SpringMvc(视图框架) + Spring(融合剂) + Mybatis(半自动持久层框架，可定制性更高)\n\n### 1.2优点\n\n- Spring是一个开源的免费的框架（容器）\n\n- Spring是一个轻量级的、非入侵式的框架\n- 控制反转（IOC),面向方面编程（AOP)\n\n- 支持事务的处理，对框架整合的支持\n\n<mark>总结一句话：Spring就是一个轻量级的控制反转（IoC）和面向方面编程（AOP）的框架！</mark>\n\n### 1.3组成\n\n![img](spring/1010726-20190908042152777-1895820426.png)\n\n### 1.4拓展\n\n- Spring Boot\n  - 一个快速开发的脚手架\n  - 基于Spring Boot可以快速的开发单个微服务\n  - <mark>约定大于配置</mark>\n\n- Spring Cloud\n  - SpringCloud是基于SpringBoot实现的\n\n现在大多数公司都在使用SpringBoot进行快速开发，所以先掌握Spring及SpringMVC很重要，承上启下！\n\n# IoC\n\n假如我们需要在程序内构建一辆”车“，那么我们传统的思想一般是下面这样的。\n\n![image-20250415134033090](spring/image-20250415134033090.png)\n\n想要构建一辆汽车，首先要依赖于车身，而车身又依赖于地盘。而底盘需要轮胎。最终我们得到下面的代码。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.init();\n   }\n    /**\n     * 汽⻋对象\n     */\n    static class Car {\n        public void init() {\n            // 依赖⻋身\n            Framework framework = new Framework();\n            framework.init();\n       }\n   }\n    /**\n     * ⻋身类\n     */\n    static class Framework {\n        public void init() {\n            // 依赖底盘\n            Bottom bottom = new Bottom();\n            bottom.init();\n       }\n   }\n    /**\n     * 底盘类\n     */\n    static class Bottom {\n        public void init() {\n            // 依赖轮胎\n            Tire tire = new Tire();\n            tire.init();\n       }\n   }\n    /**\n     * 轮胎类\n     */\n    static class Tire {\n     // 尺⼨\n        private int size = 30;\n        public void init() {\n            System.out.println(\"轮胎尺⼨：\" + size);\n       }\n   }\n}\n```\n\n 虽然这段代码的确能够满足需求，但是我们不难发现一个特点，就是它的耦合性非常高。假如我们需要更改轮胎的尺寸，我们需要将轮胎以及所有依赖轮胎的组件的构造方法全部更改一遍，加上size参数，例如下面那样。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car(20);\n        car.run();\n   }\n    /**\n     * 汽⻋对象\n     */\n    static class Car {\n        private Framework framework;\n        public Car(int size) {\n            framework = new Framework(size);\n       }\n        public void run() {\n            // 依赖⻋身\n            framework.init();\n       }\n   }\n    /**\n     * ⻋身类\n     */\n    static class Framework {\n        private Bottom bottom;\n        public Framework(int size) {\n            bottom = new Bottom(size);\n       }\n        public void init() {\n            // 依赖底盘\n            bottom.init();\n       }\n   }\n    /**\n     * 底盘类\n     */\n    static class Bottom {\n        private Tire tire;\npublic Bottom(int size) {\n            tire = new Tire(size);\n       }\n        public void init() {\n            // 依赖轮胎\n            tire.init();\n       }\n   }\n    /**\n     * 轮胎类\n     */\n    static class Tire {\n        // 尺⼨\n        private int size;\n        public Tire(int size) {\n            this.size = size;\n       }\n        public void init() {\n            System.out.println(\"轮胎尺⼨：\" + size);\n       }\n   }\n}\n```\n\n而在实际开发过程中，需求变更是很常见的。而我们不难看出，以上程序的问题是：**当最底层代码改动之后，整个调⽤链上的所有代码都需要修改。**这在实际开发过程中就会严重拖慢我们的进度，那么有什么办法能够解决这个问题呢。我们看看以下的代码。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Tire tire = new Tire(20);\n        Bottom bottom = new Bottom(tire);\n        Framework framework = new Framework(bottom);\n        Car car = new Car(framework);\n        car.run();\n   }\n    static class Car {\n        private Framework framework;\n        public Car(Framework framework) {\n            this.framework = framework;\n       }\n        public void run() {\n            framework.init();\n       }\n   }\n    static class Framework {\n        private Bottom bottom;\n        public Framework(Bottom bottom) {\n            this.bottom = bottom;\n       }\n        public void init() {\n            bottom.init();\n       }\n   }\n    static class Bottom {\n        private Tire tire;\n        public Bottom(Tire tire) {\n            this.tire = tire;\n       }\n        public void init() {\n            tire.init();\n       }\n   }\nstatic class Tire {\n        private int size;\n        public Tire(int size) {\n            this.size = size;\n       }\n        public void init() {\n            System.out.println(\"轮胎：\" + size);\n       }\n   }\n}\n```\n\n 可以看到我们先创建了所有的下级依赖类，然后再通过参数传递的方式注入。这样我们不需 要在当前类中创建下级类了，所以下级类即使发⽣变化（创建或减少参数），当前类本身也⽆需修改任 何代码，这样就完成了程序的解耦。\n\n 以上就是所谓的控制反转式程序开发。此时⽆论底层类如何变化，整个调⽤链是不⽤做任何改变的，这样就完成了代码之间的解耦，从⽽实现了更加灵活、通⽤的程序设计了。\n在传统的代码中对象创建顺序是：Car -> Framework -> Bottom -> Tire\n\n改进之后解耦的代码的对象创建顺序是：Tire -> Bottom -> Framework -> Car\n![image-20250415134331010](spring/image-20250415134331010.png)\n\n这里我们可以发现：通⽤程序的实现代码，类的创建顺序是反的，传统代码是 Car 控制并创建了 Framework，Framework 创建并创建了 Bottom，依次往下，⽽改进之后的控制权发⽣的反转，不再是上级对象创建并控制下级对象了，⽽是下级对象把注⼊将当前对象中，下级的控制权不再由上级类控制了，这样即使下级类发⽣任何改变，当前类都是不受影响的，这就是典型的控制反转，也就是 IoC 的实现思想。 \n\n仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .\n\n这种思想 , 从本质上解决了问题 , 我们不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !\n\n### IoC本质\n\n控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，所谓控制反转就是：获得依赖对象的方式反转了。\n\n![img](spring/0a4cf6d3f9cb9a73593e73fbf29b4758.png)\n\nIoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。\n\nSpring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。\n\n![img](spring/6c0706d0b1875bec9cfac6620612da5d.png)\n\n采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。\n\n控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。\n\n### IoC容器的使用\n\n#### Bean注册与配置\n\n1.Spring为我们提供了一个IoC容器用于存放我们需要使用的对象，我们可以将对象交给IoC容器来管理，当我们需要使用对象时，就可以向IoC容器索要，并由它来决定给我们哪一个对象。要使用IoC容器，就需要创建一个应用程序上下文，它代表的就是IoC容器，它会负责实例化、配置和组装Bean:\n\n```java\nApplicationContext context = new ClassPathXmlApplicationContext(\"application.xml\")\n```\n\n它有很多种实现方式，这里使用xml配置文件所以使用ClassPathXmlApplicationContext。\n\n2.当你写好了一个bean，可以在xml文件里添加上。\n\n```xml\n<bean name=\"a\" class=\"com.test.bean.Student\"/>\n<bean name=\"b\" class=\"com.test.bean.Student\"/>\n```\n\nclass指定bean的类型,name（或id)表示该bean的唯一标识。\n\n我们可以给Bean起名字，也可以起别名，就像我们除了有一个名字之外，可能在家里还有自己的小名：\n\n```xml\n<bean name=\"a\" class=\"com.test.bean.Student\"/>\n<alias name=\"a\" alias=\"test\"/>\n```\n\n在xml文件上的bean可以通过context的getBean方法得到。getBean方法的参数可以是类型或name等。\n\n3.那么现在又有新的问题了，IoC容器创建的Bean是只有一个还是每次索要的时候都会给我们一个新的对象？\n\n实际上，我们配置的bean有两种模式(scope)。第一种是`singleton`，默认情况下就是这一种，当然还有`prototype`，表示为原型模式（为了方便叫多例模式也行）这种模式每次得到的对象都是一个新的。当Bean的作用域为单例模式时，那么它会在一开始（容器加载配置时）就被创建，我们之后拿到的都是这个对象。而处于原型模式下，只有在获取时才会被创建，也就是说，单例模式下，Bean会被IoC容器存储，只要容器没有被销毁，那么此对象将一直存在，而原型模式才是相当于在要用的时候直接new了一个对象，并不会被保存。\n\n当然，如果我们希望单例模式下的Bean不用再一开始就加载，而是一样等到需要时再加载（加载后依然会被容器存储，之后一直使用这个对象了，不会再创建新的）我们也可以开启懒加载：\n\n```xml\n<bean class=\"com.test.bean.Student\" lazy-init=\"true\"/>\n```\n\n开启懒加载后，只有在真正第一次使用时才会创建对象。\n\n因为单例模式下Bean是由IoC容器加载，但是加载顺序我们并不清楚，如果我们需要维护Bean的加载顺序（比如某个Bean必须要在另一个Bean之前创建）那么我们可以使用`depends-on`来设定前置加载Bean，这样被依赖的Bean一定会在之前加载，比如Teacher应该在Student之前加载：        \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.Teacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\" depends-on=\"teacher\"/>\n```\n\n这样就可以保证Bean的加载顺序了。\n\n#### 依赖注入\n\n4.IoC容器在创建对象时，需要将我们预先给定的属性注入到对象中，非常简单，我们可以使用`property`标签来实现，\n\n首先依赖注入要求对应的属性必须有一个set方法：      \n\n```java\npublic class Student {\n    private Teacher teacher;\n  \t//要使用依赖注入，我们必须提供一个set方法（无论成员变量的访问权限是什么）命名规则依然是驼峰命名法\n    public void setTeacher(Teacher teacher) {\n        this.teacher = teacher;\n    }\n    ...\n```\n\n然后我们将bean标签展开插入property标签：             \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ProgramTeacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"teacher\" ref=\"teacher\"/>\n</bean>\n```\n\n- **`name=\"teacher\"`**：指定了`Student`类中需要注入的属性名称，即`teacher`属性。\n- **`ref=\"teacher\"`**：表示这个`teacher`属性的值引用了前面定义的`teacher` Bean。也就是说，`Student`类的`teacher`属性会被注入为`ProgramTeacher`类的实例。\n\n更改这两个属性，就达到了切换不同的实现。\n\n当然，依赖注入并不一定要注入其他的Bean，也可以是一个简单的值：\n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"name\" value=\"卢本伟\"/>\n</bean>\n```\n\n直接使用`value`可以直接传入一个具体值。\n\n5.实际上，在很多情况下，类中的某些参数是在构造方法中就已经完成的初始化，而不是创建之后，比如：           \n\n```java\npublic class Student {\n    private final Teacher teacher;   //构造方法中完成，所以说是一个final变量\n\n    public Student(Teacher teacher){   //Teacher属性是在构造方法中完成的初始化\n        this.teacher = teacher;\n    }\n  \t...\n```\n\n我们前面说了，Bean实际上是由IoC容器进行创建的，但是现在我们修改了默认的无参构造，可以看到配置文件里面报错了：\n\n![image-20221122174328107](spring/5HN8GKQywWaYvrF.webp)\n\n指定构造器\n\n很明显，是因为我们修改了构造方法，IoC容器默认只会调用无参构造，所以，我们需要指明一个可以用的构造方法，我们展开bean标签，添加一个`constructor-arg`标签：   \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ArtTeacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <constructor-arg name=\"teacher\" ref=\"teacher\"/>\n</bean>\n```\n\n这里的`constructor-arg`就是构造方法的一个参数，这个参数可以写很多个，会自动匹配符合里面参数数量的构造方法，这里匹配的就是我们刚刚编写的需要一个参数的构造方法。\n\n![image-20221122191427776](spring/evKArqDYcIQPCXT.webp)\n\n通过这种方式，我们也能实现依赖注入，只不过现在我们将依赖注入的时机提前到了对象构造时。\n\n那要是出现这种情况呢？现在我们的Student类中是这样定义的：\n\n```java\npublic class Student {\n    private final String name;\n    public Student(String name){\n        System.out.println(\"我是一号构造方法\");\n        this.name = name;\n    }\n\n    public Student(int age){\n        System.out.println(\"我是二号构造方法\");\n        this.name = String.valueOf(age);\n    }\n}\n```\n\n此时我们希望使用的是二号构造方法，那么怎么才能指定呢？有2种方式，我们可以给标签添加类型：\n\n```xml\n<constructor-arg value=\"1\" type=\"int\"/>\n```\n\n也可以指定为对应的参数名称：                   \n\n```xml\n<constructor-arg value=\"1\" name=\"age\"/>\n```\n\n反正只要能够保证我们指定的参数匹配到目标构造方法即可。\n\n6.特殊的类型\n\n现在我们的类中出现了一个比较特殊的类型，它是一个集合类型：    \n\n```java\npublic class Student {\n    private List<String> list;\n\n    public void setList(List<String> list) {\n        this.list = list;\n    }\n}\n```\n\n对于这种集合类型，有着特殊的支持：          \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n  \t<!--  对于集合类型，我们可以直接使用标签编辑集合的默认值  -->\n    <property name=\"list\">\n        <list>\n            <value>AAA</value>\n            <value>BBB</value>\n            <value>CCC</value>\n        </list>\n    </property>\n</bean>\n```\n\n不仅仅是List，Map、Set这类常用集合类包括数组在内，都是支持这样编写的，比如Map类型，我们也可以使用`entry`来注入：\n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"map\">\n        <map>\n            <entry key=\"语文\" value=\"100.0\"/>\n            <entry key=\"数学\" value=\"80.0\"/>\n            <entry key=\"英语\" value=\"92.5\"/>\n        </map>\n    </property>\n</bean>\n```\n\n至此，我们就已经完成了两种依赖注入的学习：\n\n- Setter依赖注入：通过成员属性对应的set方法完成注入。\n- 构造方法依赖注入：通过构造方法完成注入。\n\n#### 自动装配\n\n**autowire实现自动装配**\n\n在之前，如果我们需要使用依赖注入的话，我们需要对`property`参数进行配置：       \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"teacher\" ref=\"teacher\"/>\n</bean>\n```\n\n但是有些时候为了方便，我们也可以开启自动装配。自动装配就是让IoC容器自己去寻找需要填入的值，我们只需要将set方法提供好就可以了，这里需要添加autowire属性：             \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"byType\"/>\n```\n\n`autowire`属性有两个值普通，一个是byName，还有一个是byType，顾名思义，一个是根据类型去寻找合适的Bean自动装配，还有一个是根据名字去找，这样我们就不需要显式指定`property`了。\n\n![image-20221122221936559](spring/QIBRwScq6fu4XDm.webp)\n\n此时set方法旁边会出现一个自动装配图标，效果和上面是一样的。\n\n对于使用构造方法完成的依赖注入，也支持自动装配，我们只需要将autowire修改为：   \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"constructor\"/>\n```\n\n这样，我们只需要提供一个对应参数的构造方法就可以了（这种情况默认也是byType寻找的）：\n\n![image-20221122230320004](spring/rgl7fXJ2ZKAU8Rd.webp)\n\n这样同样可以完成自动注入：\n\n![image-20221122191427776](spring/evKArqDYcIQPCXT.webp)\n\n**autowire-candidate和primary解决类型相同问题**\n\n自动化的东西虽然省事，但是太过机械，有些时候，自动装配可能会遇到一些问题，比如出现了下面的情况：\n\n![image-20221122223048820](spring/SQTchJBq4G8NWyC.webp)\n\n此时，由于`autowire`的规则为byType，存在两个候选Bean，但是我们其实希望ProgramTeacher这个Bean在任何情况下都不参与到自动装配中，此时我们就可以将它的自动装配候选关闭：     \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ArtTeacher\"/>\n<bean name=\"teacher2\" class=\"com.test.bean.ProgramTeacher\" autowire-candidate=\"false\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"byType\"/>\n```\n\n当`autowire-candidate`设定false时，这个Bean将不再作为自动装配的候选Bean，此时自动装配候选就只剩下一个唯一的Bean了，报错消失，程序可以正常运行。\n\n除了这种方式，我们也可以设定primary属性，表示这个Bean作为主要的Bean，当出现歧义时，也会优先选择：             \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ArtTeacher\" primary=\"true\"/>\n<bean name=\"teacher2\" class=\"com.test.bean.ProgramTeacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"byType\"/>\n```\n\n这样写程序依然可以正常运行，并且选择的也是ArtTeacher。\n\n#### 生命周期与继承\n\n**`init-method`和`destroy-method`来指定初始和销毁方法**\n\n除了修改构造方法，我们也可以为Bean指定初始化方法inti()和销毁方法destroy()，以便在对象创建和被销毁时执行一些其他的任务。\n\n我们可以通过`init-method`和`destroy-method`来指定：\n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\" init-method=\"init\" destroy-method=\"destroy\"/>\n```\n\n那么什么时候是初始化，什么时候又是销毁呢？\n\n```java\n//当容器创建时，默认情况下Bean都是单例的，那么都会在一开始就加载好，对象构造完成后，会执行init-method\nClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"test.xml\");\n//我们可以调用close方法关闭容器，此时容器内存放的Bean也会被一起销毁，会执行destroy-method\ncontext.close();\n```\n\n所以说，最后的结果为：\n\n![image-20221123132604262](spring/GWIyPDOaK4TAM1N.webp)\n\n注意，如果Bean不是单例模式，而是采用的原型模式，那么就只会在获取时才创建，并调用init-method，而对应的销毁方法不会被调用（因此，对于原型模式下的Bean，Spring无法顾及其完整生命周期，而在单例模式下，Spring能够从Bean对象的创建一直管理到对象的销毁）。\n\n**parent实现属性继承**\n\nBean之间也是具备继承关系的，只不过这里的继承并不是类的继承，而是属性的继承，比如：        \n\n```java\npublic class SportStudent {\n    private String name;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}                   \n```\n\n```java\npublic class ArtStudent {\n    private String name;\n   \n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n此时，我们先将ArtStudent注册一个Bean：              \n\n```xml\n<bean name=\"artStudent\" class=\"com.test.bean.ArtStudent\">\n    <property name=\"name\" value=\"小明\"/>\n</bean>\n```\n\n这里我们会注入一个name的初始值，此时我们创建了一个SportStudent的Bean，我们希望这个Bean的属性跟刚刚创建的Bean属性是一样的，那么我们可以写一个一模一样的：                 \n\n```xml\n<bean class=\"com.test.bean.SportStudent\">\n    <property name=\"name\" value=\"小明\"/>\n</bean>\n```\n\n但是如果属性太多的话，是不是写起来有点麻烦？这种情况，我们就可以配置Bean之间的继承关系了，我们可以让SportStudent这个Bean直接继承ArtStudent这个Bean配置的属性：            \n\n```xml\n<bean class=\"com.test.bean.SportStudent\" parent=\"artStudent\"/>\n```\n\n这样，在ArtStudent Bean中配置的属性，会直接继承给SportStudent Bean（注意，所有配置的属性，在子Bean中必须也要存在， 并且可以进行注入，否则会出现错误）当然，如果子类中某些属性比较特殊，也可以在继承的基础上单独配置：        \n\n```xml\n<bean name=\"artStudent\" class=\"com.test.bean.ArtStudent\" abstract=\"true\">\n    <property name=\"name\" value=\"小明\"/>\n    <property name=\"id\" value=\"1\"/>\n</bean>\n<bean class=\"com.test.bean.SportStudent\" parent=\"artStudent\">\n    <property name=\"id\" value=\"2\"/>\n</bean>\n```\n\n**abstract将Bean仅作为一个配置模版**\n\n如果我们只是希望某一个Bean仅作为一个配置模版供其他Bean继承使用，那么我们可以将其配置为abstract，这样，容器就不会创建这个Bean的对象了：        \n\n```xml\n<bean name=\"artStudent\" class=\"com.test.bean.ArtStudent\" abstract=\"true\">\n    <property name=\"name\" value=\"小明\"/>\n</bean>\n<bean class=\"com.test.bean.SportStudent\" parent=\"artStudent\"/>\n```\n\n注意，一旦声明为抽象Bean，那么就无法通过容器获取到其实例化对象了。\n\n![image-20221123140409416](spring/SyDkvOldB7ETW4z.webp)\n\n**大标签beans实现全局默认配置**\n\n如果我们希望整个上下文中所有的Bean都采用某种配置，我们可以在最外层的beans标签中进行默认配置：\n\n![image-20221123141221259](spring/KzSUJXa4jBfO9rd.webp)\n\n这样，即使Bean没有配置某项属性，但是只要在最外层编写了默认配置，那么同样会生效，除非Bean自己进行配置覆盖掉默认配置。\n\n#### 工厂模式和工厂Bean\n\n前面我们介绍了IoC容器的Bean创建机制，默认情况下，容器会调用Bean对应类型的构造方法进行对象创建，但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中（详情请观看《Java设计模式》篇 视频教程）我们更希望 Spring不要直接利用反射机制通过构造方法创建Bean对象， 而是利用反射机制先找到对应的工厂类，然后利用工厂类去生成需要的Bean对象：  \n\n```java\npublic class Student {\n    Student() {\n        System.out.println(\"我被构造了\");\n    }\n}\n```\n\n```java\npublic class StudentFactory {\n    public static Student getStudent(){\n      \tSystem.out.println(\"欢迎光临电子厂\");\n        return new Student();\n    }\n}\n```\n\n此时Student有一个工厂，我们正常情况下需要使用工厂才可以得到Student对象，现在我们希望Spring也这样做，不要直接去反射搞构造方法创建，我们可以通过factory-method进行指定：\n\n```xml\n<bean class=\"com.test.bean.StudentFactory\" factory-method=\"getStudent\"/>\n```\n\n注意，这里的Bean类型需要填写为Student类的工厂类，并且添加factory-method指定对应的工厂方法，但是最后注册的是工厂方法的返回类型，所以说依然是Student的Bean：\n\n![image-20221123143302785](spring/5Id43xPneJiWfZs.webp)\n\n此时我们再去进行获取，拿到的也是通过工厂方法得到的对象：\n\n![image-20221123143347376](spring/l8HzN7Rwthqrim5.webp)\n\n这里有一个误区，千万不要认为是我们注册了StudentFactory这个Bean，class填写为这个类这个只是为了告诉Spring我们的工厂方法在哪个位置，真正注册的是工厂方法提供的东西。\n\n可以发现，当我们采用工厂模式后，我们就无法再通过配置文件对Bean进行依赖注入等操作了，而是只能在工厂方法中完成，这似乎与Spring的设计理念背道而驰？\n\n当然，可能某些工厂类需要构造出对象之后才能使用，我们也可以将某个工厂类直接注册为工厂Bean： \n\n```java\npublic class StudentFactory {\n    public Student getStudent(){\n        System.out.println(\"欢迎光临电子厂\");\n        return new Student();\n    }\n}\n```\n\n现在需要StudentFactory对象才可以获取到Student，此时我们就只能先将其注册为Bean了：                 \n\n```xml\n<bean name=\"studentFactory\" class=\"com.test.bean.StudentFactory\"/>\n```\n\n像这样将工厂类注册为Bean，我们称其为工厂Bean，然后再使用`factory-bean`来指定Bean的工厂Bean：               \n\n```xml\n<bean factory-bean=\"studentFactory\" factory-method=\"getStudent\"/>\n```\n\n注意，使用factory-bean之后，不再要求指定class，我们可以直接使用了：\n\n![image-20221123164134470](spring/ih1Af7xBdX3ebaG.webp)\n\n此时可以看到，工厂方法上同样有了图标，这种方式，由于工厂类被注册为Bean，此时我们就可以在配置文件中为工厂Bean配置依赖注入等内容了。\n\n这里还有一个很细节的操作，如果我们想获取工厂Bean为我们提供的Bean，可以直接输入工厂Bean的名称，这样不会得到工厂Bean的实例，而是工厂Bean生产的Bean的实例：             \n\n```java\nStudent bean = (Student) context.getBean(\"studentFactory\");\n```\n\n当然，如果我们需要获取工厂类的实例，可以在名称前面添加`&`符号：           \n\n```java\nStudentFactory bean = (StudentFactory) context.getBean(\"&studentFactory\");\n```\n\n又是一个小细节。\n\n","source":"_posts/spring.md","raw":"---\ntitle: Spring\ndate: 2025-04-15\nupdated: 2025-04-16\ncategories: java\n---\n# Spring简介\n\n### 1.1历史\n\n2002年，首次推出了spring框架的雏形：interface21框架\n\n2004年3月24日，悉尼大学音乐学博士**Rod Johnson**首次推出Spring框架1.0，解决企业应用开发的复杂性。\n\n设计理念：使现有的技术更加容易使用，本身是一套大杂烩，整合了现有的技术框架。\n\n\n\n- SSH：Struct2(视图框架) + Spring(融合剂) + Hibernate(全自动持久层框架)\n\n- SSM : SpringMvc(视图框架) + Spring(融合剂) + Mybatis(半自动持久层框架，可定制性更高)\n\n### 1.2优点\n\n- Spring是一个开源的免费的框架（容器）\n\n- Spring是一个轻量级的、非入侵式的框架\n- 控制反转（IOC),面向方面编程（AOP)\n\n- 支持事务的处理，对框架整合的支持\n\n<mark>总结一句话：Spring就是一个轻量级的控制反转（IoC）和面向方面编程（AOP）的框架！</mark>\n\n### 1.3组成\n\n![img](spring/1010726-20190908042152777-1895820426.png)\n\n### 1.4拓展\n\n- Spring Boot\n  - 一个快速开发的脚手架\n  - 基于Spring Boot可以快速的开发单个微服务\n  - <mark>约定大于配置</mark>\n\n- Spring Cloud\n  - SpringCloud是基于SpringBoot实现的\n\n现在大多数公司都在使用SpringBoot进行快速开发，所以先掌握Spring及SpringMVC很重要，承上启下！\n\n# IoC\n\n假如我们需要在程序内构建一辆”车“，那么我们传统的思想一般是下面这样的。\n\n![image-20250415134033090](spring/image-20250415134033090.png)\n\n想要构建一辆汽车，首先要依赖于车身，而车身又依赖于地盘。而底盘需要轮胎。最终我们得到下面的代码。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.init();\n   }\n    /**\n     * 汽⻋对象\n     */\n    static class Car {\n        public void init() {\n            // 依赖⻋身\n            Framework framework = new Framework();\n            framework.init();\n       }\n   }\n    /**\n     * ⻋身类\n     */\n    static class Framework {\n        public void init() {\n            // 依赖底盘\n            Bottom bottom = new Bottom();\n            bottom.init();\n       }\n   }\n    /**\n     * 底盘类\n     */\n    static class Bottom {\n        public void init() {\n            // 依赖轮胎\n            Tire tire = new Tire();\n            tire.init();\n       }\n   }\n    /**\n     * 轮胎类\n     */\n    static class Tire {\n     // 尺⼨\n        private int size = 30;\n        public void init() {\n            System.out.println(\"轮胎尺⼨：\" + size);\n       }\n   }\n}\n```\n\n 虽然这段代码的确能够满足需求，但是我们不难发现一个特点，就是它的耦合性非常高。假如我们需要更改轮胎的尺寸，我们需要将轮胎以及所有依赖轮胎的组件的构造方法全部更改一遍，加上size参数，例如下面那样。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car(20);\n        car.run();\n   }\n    /**\n     * 汽⻋对象\n     */\n    static class Car {\n        private Framework framework;\n        public Car(int size) {\n            framework = new Framework(size);\n       }\n        public void run() {\n            // 依赖⻋身\n            framework.init();\n       }\n   }\n    /**\n     * ⻋身类\n     */\n    static class Framework {\n        private Bottom bottom;\n        public Framework(int size) {\n            bottom = new Bottom(size);\n       }\n        public void init() {\n            // 依赖底盘\n            bottom.init();\n       }\n   }\n    /**\n     * 底盘类\n     */\n    static class Bottom {\n        private Tire tire;\npublic Bottom(int size) {\n            tire = new Tire(size);\n       }\n        public void init() {\n            // 依赖轮胎\n            tire.init();\n       }\n   }\n    /**\n     * 轮胎类\n     */\n    static class Tire {\n        // 尺⼨\n        private int size;\n        public Tire(int size) {\n            this.size = size;\n       }\n        public void init() {\n            System.out.println(\"轮胎尺⼨：\" + size);\n       }\n   }\n}\n```\n\n而在实际开发过程中，需求变更是很常见的。而我们不难看出，以上程序的问题是：**当最底层代码改动之后，整个调⽤链上的所有代码都需要修改。**这在实际开发过程中就会严重拖慢我们的进度，那么有什么办法能够解决这个问题呢。我们看看以下的代码。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Tire tire = new Tire(20);\n        Bottom bottom = new Bottom(tire);\n        Framework framework = new Framework(bottom);\n        Car car = new Car(framework);\n        car.run();\n   }\n    static class Car {\n        private Framework framework;\n        public Car(Framework framework) {\n            this.framework = framework;\n       }\n        public void run() {\n            framework.init();\n       }\n   }\n    static class Framework {\n        private Bottom bottom;\n        public Framework(Bottom bottom) {\n            this.bottom = bottom;\n       }\n        public void init() {\n            bottom.init();\n       }\n   }\n    static class Bottom {\n        private Tire tire;\n        public Bottom(Tire tire) {\n            this.tire = tire;\n       }\n        public void init() {\n            tire.init();\n       }\n   }\nstatic class Tire {\n        private int size;\n        public Tire(int size) {\n            this.size = size;\n       }\n        public void init() {\n            System.out.println(\"轮胎：\" + size);\n       }\n   }\n}\n```\n\n 可以看到我们先创建了所有的下级依赖类，然后再通过参数传递的方式注入。这样我们不需 要在当前类中创建下级类了，所以下级类即使发⽣变化（创建或减少参数），当前类本身也⽆需修改任 何代码，这样就完成了程序的解耦。\n\n 以上就是所谓的控制反转式程序开发。此时⽆论底层类如何变化，整个调⽤链是不⽤做任何改变的，这样就完成了代码之间的解耦，从⽽实现了更加灵活、通⽤的程序设计了。\n在传统的代码中对象创建顺序是：Car -> Framework -> Bottom -> Tire\n\n改进之后解耦的代码的对象创建顺序是：Tire -> Bottom -> Framework -> Car\n![image-20250415134331010](spring/image-20250415134331010.png)\n\n这里我们可以发现：通⽤程序的实现代码，类的创建顺序是反的，传统代码是 Car 控制并创建了 Framework，Framework 创建并创建了 Bottom，依次往下，⽽改进之后的控制权发⽣的反转，不再是上级对象创建并控制下级对象了，⽽是下级对象把注⼊将当前对象中，下级的控制权不再由上级类控制了，这样即使下级类发⽣任何改变，当前类都是不受影响的，这就是典型的控制反转，也就是 IoC 的实现思想。 \n\n仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .\n\n这种思想 , 从本质上解决了问题 , 我们不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !\n\n### IoC本质\n\n控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，所谓控制反转就是：获得依赖对象的方式反转了。\n\n![img](spring/0a4cf6d3f9cb9a73593e73fbf29b4758.png)\n\nIoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。\n\nSpring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。\n\n![img](spring/6c0706d0b1875bec9cfac6620612da5d.png)\n\n采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。\n\n控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。\n\n### IoC容器的使用\n\n#### Bean注册与配置\n\n1.Spring为我们提供了一个IoC容器用于存放我们需要使用的对象，我们可以将对象交给IoC容器来管理，当我们需要使用对象时，就可以向IoC容器索要，并由它来决定给我们哪一个对象。要使用IoC容器，就需要创建一个应用程序上下文，它代表的就是IoC容器，它会负责实例化、配置和组装Bean:\n\n```java\nApplicationContext context = new ClassPathXmlApplicationContext(\"application.xml\")\n```\n\n它有很多种实现方式，这里使用xml配置文件所以使用ClassPathXmlApplicationContext。\n\n2.当你写好了一个bean，可以在xml文件里添加上。\n\n```xml\n<bean name=\"a\" class=\"com.test.bean.Student\"/>\n<bean name=\"b\" class=\"com.test.bean.Student\"/>\n```\n\nclass指定bean的类型,name（或id)表示该bean的唯一标识。\n\n我们可以给Bean起名字，也可以起别名，就像我们除了有一个名字之外，可能在家里还有自己的小名：\n\n```xml\n<bean name=\"a\" class=\"com.test.bean.Student\"/>\n<alias name=\"a\" alias=\"test\"/>\n```\n\n在xml文件上的bean可以通过context的getBean方法得到。getBean方法的参数可以是类型或name等。\n\n3.那么现在又有新的问题了，IoC容器创建的Bean是只有一个还是每次索要的时候都会给我们一个新的对象？\n\n实际上，我们配置的bean有两种模式(scope)。第一种是`singleton`，默认情况下就是这一种，当然还有`prototype`，表示为原型模式（为了方便叫多例模式也行）这种模式每次得到的对象都是一个新的。当Bean的作用域为单例模式时，那么它会在一开始（容器加载配置时）就被创建，我们之后拿到的都是这个对象。而处于原型模式下，只有在获取时才会被创建，也就是说，单例模式下，Bean会被IoC容器存储，只要容器没有被销毁，那么此对象将一直存在，而原型模式才是相当于在要用的时候直接new了一个对象，并不会被保存。\n\n当然，如果我们希望单例模式下的Bean不用再一开始就加载，而是一样等到需要时再加载（加载后依然会被容器存储，之后一直使用这个对象了，不会再创建新的）我们也可以开启懒加载：\n\n```xml\n<bean class=\"com.test.bean.Student\" lazy-init=\"true\"/>\n```\n\n开启懒加载后，只有在真正第一次使用时才会创建对象。\n\n因为单例模式下Bean是由IoC容器加载，但是加载顺序我们并不清楚，如果我们需要维护Bean的加载顺序（比如某个Bean必须要在另一个Bean之前创建）那么我们可以使用`depends-on`来设定前置加载Bean，这样被依赖的Bean一定会在之前加载，比如Teacher应该在Student之前加载：        \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.Teacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\" depends-on=\"teacher\"/>\n```\n\n这样就可以保证Bean的加载顺序了。\n\n#### 依赖注入\n\n4.IoC容器在创建对象时，需要将我们预先给定的属性注入到对象中，非常简单，我们可以使用`property`标签来实现，\n\n首先依赖注入要求对应的属性必须有一个set方法：      \n\n```java\npublic class Student {\n    private Teacher teacher;\n  \t//要使用依赖注入，我们必须提供一个set方法（无论成员变量的访问权限是什么）命名规则依然是驼峰命名法\n    public void setTeacher(Teacher teacher) {\n        this.teacher = teacher;\n    }\n    ...\n```\n\n然后我们将bean标签展开插入property标签：             \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ProgramTeacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"teacher\" ref=\"teacher\"/>\n</bean>\n```\n\n- **`name=\"teacher\"`**：指定了`Student`类中需要注入的属性名称，即`teacher`属性。\n- **`ref=\"teacher\"`**：表示这个`teacher`属性的值引用了前面定义的`teacher` Bean。也就是说，`Student`类的`teacher`属性会被注入为`ProgramTeacher`类的实例。\n\n更改这两个属性，就达到了切换不同的实现。\n\n当然，依赖注入并不一定要注入其他的Bean，也可以是一个简单的值：\n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"name\" value=\"卢本伟\"/>\n</bean>\n```\n\n直接使用`value`可以直接传入一个具体值。\n\n5.实际上，在很多情况下，类中的某些参数是在构造方法中就已经完成的初始化，而不是创建之后，比如：           \n\n```java\npublic class Student {\n    private final Teacher teacher;   //构造方法中完成，所以说是一个final变量\n\n    public Student(Teacher teacher){   //Teacher属性是在构造方法中完成的初始化\n        this.teacher = teacher;\n    }\n  \t...\n```\n\n我们前面说了，Bean实际上是由IoC容器进行创建的，但是现在我们修改了默认的无参构造，可以看到配置文件里面报错了：\n\n![image-20221122174328107](spring/5HN8GKQywWaYvrF.webp)\n\n指定构造器\n\n很明显，是因为我们修改了构造方法，IoC容器默认只会调用无参构造，所以，我们需要指明一个可以用的构造方法，我们展开bean标签，添加一个`constructor-arg`标签：   \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ArtTeacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <constructor-arg name=\"teacher\" ref=\"teacher\"/>\n</bean>\n```\n\n这里的`constructor-arg`就是构造方法的一个参数，这个参数可以写很多个，会自动匹配符合里面参数数量的构造方法，这里匹配的就是我们刚刚编写的需要一个参数的构造方法。\n\n![image-20221122191427776](spring/evKArqDYcIQPCXT.webp)\n\n通过这种方式，我们也能实现依赖注入，只不过现在我们将依赖注入的时机提前到了对象构造时。\n\n那要是出现这种情况呢？现在我们的Student类中是这样定义的：\n\n```java\npublic class Student {\n    private final String name;\n    public Student(String name){\n        System.out.println(\"我是一号构造方法\");\n        this.name = name;\n    }\n\n    public Student(int age){\n        System.out.println(\"我是二号构造方法\");\n        this.name = String.valueOf(age);\n    }\n}\n```\n\n此时我们希望使用的是二号构造方法，那么怎么才能指定呢？有2种方式，我们可以给标签添加类型：\n\n```xml\n<constructor-arg value=\"1\" type=\"int\"/>\n```\n\n也可以指定为对应的参数名称：                   \n\n```xml\n<constructor-arg value=\"1\" name=\"age\"/>\n```\n\n反正只要能够保证我们指定的参数匹配到目标构造方法即可。\n\n6.特殊的类型\n\n现在我们的类中出现了一个比较特殊的类型，它是一个集合类型：    \n\n```java\npublic class Student {\n    private List<String> list;\n\n    public void setList(List<String> list) {\n        this.list = list;\n    }\n}\n```\n\n对于这种集合类型，有着特殊的支持：          \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n  \t<!--  对于集合类型，我们可以直接使用标签编辑集合的默认值  -->\n    <property name=\"list\">\n        <list>\n            <value>AAA</value>\n            <value>BBB</value>\n            <value>CCC</value>\n        </list>\n    </property>\n</bean>\n```\n\n不仅仅是List，Map、Set这类常用集合类包括数组在内，都是支持这样编写的，比如Map类型，我们也可以使用`entry`来注入：\n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"map\">\n        <map>\n            <entry key=\"语文\" value=\"100.0\"/>\n            <entry key=\"数学\" value=\"80.0\"/>\n            <entry key=\"英语\" value=\"92.5\"/>\n        </map>\n    </property>\n</bean>\n```\n\n至此，我们就已经完成了两种依赖注入的学习：\n\n- Setter依赖注入：通过成员属性对应的set方法完成注入。\n- 构造方法依赖注入：通过构造方法完成注入。\n\n#### 自动装配\n\n**autowire实现自动装配**\n\n在之前，如果我们需要使用依赖注入的话，我们需要对`property`参数进行配置：       \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\">\n    <property name=\"teacher\" ref=\"teacher\"/>\n</bean>\n```\n\n但是有些时候为了方便，我们也可以开启自动装配。自动装配就是让IoC容器自己去寻找需要填入的值，我们只需要将set方法提供好就可以了，这里需要添加autowire属性：             \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"byType\"/>\n```\n\n`autowire`属性有两个值普通，一个是byName，还有一个是byType，顾名思义，一个是根据类型去寻找合适的Bean自动装配，还有一个是根据名字去找，这样我们就不需要显式指定`property`了。\n\n![image-20221122221936559](spring/QIBRwScq6fu4XDm.webp)\n\n此时set方法旁边会出现一个自动装配图标，效果和上面是一样的。\n\n对于使用构造方法完成的依赖注入，也支持自动装配，我们只需要将autowire修改为：   \n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"constructor\"/>\n```\n\n这样，我们只需要提供一个对应参数的构造方法就可以了（这种情况默认也是byType寻找的）：\n\n![image-20221122230320004](spring/rgl7fXJ2ZKAU8Rd.webp)\n\n这样同样可以完成自动注入：\n\n![image-20221122191427776](spring/evKArqDYcIQPCXT.webp)\n\n**autowire-candidate和primary解决类型相同问题**\n\n自动化的东西虽然省事，但是太过机械，有些时候，自动装配可能会遇到一些问题，比如出现了下面的情况：\n\n![image-20221122223048820](spring/SQTchJBq4G8NWyC.webp)\n\n此时，由于`autowire`的规则为byType，存在两个候选Bean，但是我们其实希望ProgramTeacher这个Bean在任何情况下都不参与到自动装配中，此时我们就可以将它的自动装配候选关闭：     \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ArtTeacher\"/>\n<bean name=\"teacher2\" class=\"com.test.bean.ProgramTeacher\" autowire-candidate=\"false\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"byType\"/>\n```\n\n当`autowire-candidate`设定false时，这个Bean将不再作为自动装配的候选Bean，此时自动装配候选就只剩下一个唯一的Bean了，报错消失，程序可以正常运行。\n\n除了这种方式，我们也可以设定primary属性，表示这个Bean作为主要的Bean，当出现歧义时，也会优先选择：             \n\n```xml\n<bean name=\"teacher\" class=\"com.test.bean.ArtTeacher\" primary=\"true\"/>\n<bean name=\"teacher2\" class=\"com.test.bean.ProgramTeacher\"/>\n<bean name=\"student\" class=\"com.test.bean.Student\" autowire=\"byType\"/>\n```\n\n这样写程序依然可以正常运行，并且选择的也是ArtTeacher。\n\n#### 生命周期与继承\n\n**`init-method`和`destroy-method`来指定初始和销毁方法**\n\n除了修改构造方法，我们也可以为Bean指定初始化方法inti()和销毁方法destroy()，以便在对象创建和被销毁时执行一些其他的任务。\n\n我们可以通过`init-method`和`destroy-method`来指定：\n\n```xml\n<bean name=\"student\" class=\"com.test.bean.Student\" init-method=\"init\" destroy-method=\"destroy\"/>\n```\n\n那么什么时候是初始化，什么时候又是销毁呢？\n\n```java\n//当容器创建时，默认情况下Bean都是单例的，那么都会在一开始就加载好，对象构造完成后，会执行init-method\nClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"test.xml\");\n//我们可以调用close方法关闭容器，此时容器内存放的Bean也会被一起销毁，会执行destroy-method\ncontext.close();\n```\n\n所以说，最后的结果为：\n\n![image-20221123132604262](spring/GWIyPDOaK4TAM1N.webp)\n\n注意，如果Bean不是单例模式，而是采用的原型模式，那么就只会在获取时才创建，并调用init-method，而对应的销毁方法不会被调用（因此，对于原型模式下的Bean，Spring无法顾及其完整生命周期，而在单例模式下，Spring能够从Bean对象的创建一直管理到对象的销毁）。\n\n**parent实现属性继承**\n\nBean之间也是具备继承关系的，只不过这里的继承并不是类的继承，而是属性的继承，比如：        \n\n```java\npublic class SportStudent {\n    private String name;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}                   \n```\n\n```java\npublic class ArtStudent {\n    private String name;\n   \n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n此时，我们先将ArtStudent注册一个Bean：              \n\n```xml\n<bean name=\"artStudent\" class=\"com.test.bean.ArtStudent\">\n    <property name=\"name\" value=\"小明\"/>\n</bean>\n```\n\n这里我们会注入一个name的初始值，此时我们创建了一个SportStudent的Bean，我们希望这个Bean的属性跟刚刚创建的Bean属性是一样的，那么我们可以写一个一模一样的：                 \n\n```xml\n<bean class=\"com.test.bean.SportStudent\">\n    <property name=\"name\" value=\"小明\"/>\n</bean>\n```\n\n但是如果属性太多的话，是不是写起来有点麻烦？这种情况，我们就可以配置Bean之间的继承关系了，我们可以让SportStudent这个Bean直接继承ArtStudent这个Bean配置的属性：            \n\n```xml\n<bean class=\"com.test.bean.SportStudent\" parent=\"artStudent\"/>\n```\n\n这样，在ArtStudent Bean中配置的属性，会直接继承给SportStudent Bean（注意，所有配置的属性，在子Bean中必须也要存在， 并且可以进行注入，否则会出现错误）当然，如果子类中某些属性比较特殊，也可以在继承的基础上单独配置：        \n\n```xml\n<bean name=\"artStudent\" class=\"com.test.bean.ArtStudent\" abstract=\"true\">\n    <property name=\"name\" value=\"小明\"/>\n    <property name=\"id\" value=\"1\"/>\n</bean>\n<bean class=\"com.test.bean.SportStudent\" parent=\"artStudent\">\n    <property name=\"id\" value=\"2\"/>\n</bean>\n```\n\n**abstract将Bean仅作为一个配置模版**\n\n如果我们只是希望某一个Bean仅作为一个配置模版供其他Bean继承使用，那么我们可以将其配置为abstract，这样，容器就不会创建这个Bean的对象了：        \n\n```xml\n<bean name=\"artStudent\" class=\"com.test.bean.ArtStudent\" abstract=\"true\">\n    <property name=\"name\" value=\"小明\"/>\n</bean>\n<bean class=\"com.test.bean.SportStudent\" parent=\"artStudent\"/>\n```\n\n注意，一旦声明为抽象Bean，那么就无法通过容器获取到其实例化对象了。\n\n![image-20221123140409416](spring/SyDkvOldB7ETW4z.webp)\n\n**大标签beans实现全局默认配置**\n\n如果我们希望整个上下文中所有的Bean都采用某种配置，我们可以在最外层的beans标签中进行默认配置：\n\n![image-20221123141221259](spring/KzSUJXa4jBfO9rd.webp)\n\n这样，即使Bean没有配置某项属性，但是只要在最外层编写了默认配置，那么同样会生效，除非Bean自己进行配置覆盖掉默认配置。\n\n#### 工厂模式和工厂Bean\n\n前面我们介绍了IoC容器的Bean创建机制，默认情况下，容器会调用Bean对应类型的构造方法进行对象创建，但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中（详情请观看《Java设计模式》篇 视频教程）我们更希望 Spring不要直接利用反射机制通过构造方法创建Bean对象， 而是利用反射机制先找到对应的工厂类，然后利用工厂类去生成需要的Bean对象：  \n\n```java\npublic class Student {\n    Student() {\n        System.out.println(\"我被构造了\");\n    }\n}\n```\n\n```java\npublic class StudentFactory {\n    public static Student getStudent(){\n      \tSystem.out.println(\"欢迎光临电子厂\");\n        return new Student();\n    }\n}\n```\n\n此时Student有一个工厂，我们正常情况下需要使用工厂才可以得到Student对象，现在我们希望Spring也这样做，不要直接去反射搞构造方法创建，我们可以通过factory-method进行指定：\n\n```xml\n<bean class=\"com.test.bean.StudentFactory\" factory-method=\"getStudent\"/>\n```\n\n注意，这里的Bean类型需要填写为Student类的工厂类，并且添加factory-method指定对应的工厂方法，但是最后注册的是工厂方法的返回类型，所以说依然是Student的Bean：\n\n![image-20221123143302785](spring/5Id43xPneJiWfZs.webp)\n\n此时我们再去进行获取，拿到的也是通过工厂方法得到的对象：\n\n![image-20221123143347376](spring/l8HzN7Rwthqrim5.webp)\n\n这里有一个误区，千万不要认为是我们注册了StudentFactory这个Bean，class填写为这个类这个只是为了告诉Spring我们的工厂方法在哪个位置，真正注册的是工厂方法提供的东西。\n\n可以发现，当我们采用工厂模式后，我们就无法再通过配置文件对Bean进行依赖注入等操作了，而是只能在工厂方法中完成，这似乎与Spring的设计理念背道而驰？\n\n当然，可能某些工厂类需要构造出对象之后才能使用，我们也可以将某个工厂类直接注册为工厂Bean： \n\n```java\npublic class StudentFactory {\n    public Student getStudent(){\n        System.out.println(\"欢迎光临电子厂\");\n        return new Student();\n    }\n}\n```\n\n现在需要StudentFactory对象才可以获取到Student，此时我们就只能先将其注册为Bean了：                 \n\n```xml\n<bean name=\"studentFactory\" class=\"com.test.bean.StudentFactory\"/>\n```\n\n像这样将工厂类注册为Bean，我们称其为工厂Bean，然后再使用`factory-bean`来指定Bean的工厂Bean：               \n\n```xml\n<bean factory-bean=\"studentFactory\" factory-method=\"getStudent\"/>\n```\n\n注意，使用factory-bean之后，不再要求指定class，我们可以直接使用了：\n\n![image-20221123164134470](spring/ih1Af7xBdX3ebaG.webp)\n\n此时可以看到，工厂方法上同样有了图标，这种方式，由于工厂类被注册为Bean，此时我们就可以在配置文件中为工厂Bean配置依赖注入等内容了。\n\n这里还有一个很细节的操作，如果我们想获取工厂Bean为我们提供的Bean，可以直接输入工厂Bean的名称，这样不会得到工厂Bean的实例，而是工厂Bean生产的Bean的实例：             \n\n```java\nStudent bean = (Student) context.getBean(\"studentFactory\");\n```\n\n当然，如果我们需要获取工厂类的实例，可以在名称前面添加`&`符号：           \n\n```java\nStudentFactory bean = (StudentFactory) context.getBean(\"&studentFactory\");\n```\n\n又是一个小细节。\n\n","slug":"spring","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apd000hpootf5bo2aim","content":"<h1 id=\"Spring简介\"><a href=\"#Spring简介\" class=\"headerlink\" title=\"Spring简介\"></a>Spring简介</h1><h3 id=\"1-1历史\"><a href=\"#1-1历史\" class=\"headerlink\" title=\"1.1历史\"></a>1.1历史</h3><p>2002年，首次推出了spring框架的雏形：interface21框架</p>\n<p>2004年3月24日，悉尼大学音乐学博士<strong>Rod Johnson</strong>首次推出Spring框架1.0，解决企业应用开发的复杂性。</p>\n<p>设计理念：使现有的技术更加容易使用，本身是一套大杂烩，整合了现有的技术框架。</p>\n<ul>\n<li><p>SSH：Struct2(视图框架) + Spring(融合剂) + Hibernate(全自动持久层框架)</p>\n</li>\n<li><p>SSM : SpringMvc(视图框架) + Spring(融合剂) + Mybatis(半自动持久层框架，可定制性更高)</p>\n</li>\n</ul>\n<h3 id=\"1-2优点\"><a href=\"#1-2优点\" class=\"headerlink\" title=\"1.2优点\"></a>1.2优点</h3><ul>\n<li><p>Spring是一个开源的免费的框架（容器）</p>\n</li>\n<li><p>Spring是一个轻量级的、非入侵式的框架</p>\n</li>\n<li><p>控制反转（IOC),面向方面编程（AOP)</p>\n</li>\n<li><p>支持事务的处理，对框架整合的支持</p>\n</li>\n</ul>\n<p><mark>总结一句话：Spring就是一个轻量级的控制反转（IoC）和面向方面编程（AOP）的框架！</mark></p>\n<h3 id=\"1-3组成\"><a href=\"#1-3组成\" class=\"headerlink\" title=\"1.3组成\"></a>1.3组成</h3><p><img src=\"/2025/04/15/spring/1010726-20190908042152777-1895820426.png\" alt=\"img\"></p>\n<h3 id=\"1-4拓展\"><a href=\"#1-4拓展\" class=\"headerlink\" title=\"1.4拓展\"></a>1.4拓展</h3><ul>\n<li><p>Spring Boot</p>\n<ul>\n<li>一个快速开发的脚手架</li>\n<li>基于Spring Boot可以快速的开发单个微服务</li>\n<li><mark>约定大于配置</mark></li>\n</ul>\n</li>\n<li><p>Spring Cloud</p>\n<ul>\n<li>SpringCloud是基于SpringBoot实现的</li>\n</ul>\n</li>\n</ul>\n<p>现在大多数公司都在使用SpringBoot进行快速开发，所以先掌握Spring及SpringMVC很重要，承上启下！</p>\n<h1 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h1><p>假如我们需要在程序内构建一辆”车“，那么我们传统的思想一般是下面这样的。</p>\n<p><img src=\"/2025/04/15/spring/image-20250415134033090.png\" alt=\"image-20250415134033090\"></p>\n<p>想要构建一辆汽车，首先要依赖于车身，而车身又依赖于地盘。而底盘需要轮胎。最终我们得到下面的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">        car.init();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽⻋对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖⻋身</span></span><br><span class=\"line\">            <span class=\"type\">Framework</span> <span class=\"variable\">framework</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Framework</span>();</span><br><span class=\"line\">            framework.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ⻋身类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Framework</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖底盘</span></span><br><span class=\"line\">            <span class=\"type\">Bottom</span> <span class=\"variable\">bottom</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bottom</span>();</span><br><span class=\"line\">            bottom.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 底盘类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bottom</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖轮胎</span></span><br><span class=\"line\">            <span class=\"type\">Tire</span> <span class=\"variable\">tire</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tire</span>();</span><br><span class=\"line\">            tire.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tire</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 尺⼨</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;轮胎尺⼨：&quot;</span> + size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 虽然这段代码的确能够满足需求，但是我们不难发现一个特点，就是它的耦合性非常高。假如我们需要更改轮胎的尺寸，我们需要将轮胎以及所有依赖轮胎的组件的构造方法全部更改一遍，加上size参数，例如下面那样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">        car.run();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽⻋对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Framework framework;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Car</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            framework = <span class=\"keyword\">new</span> <span class=\"title class_\">Framework</span>(size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖⻋身</span></span><br><span class=\"line\">            framework.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ⻋身类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Framework</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Framework</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            bottom = <span class=\"keyword\">new</span> <span class=\"title class_\">Bottom</span>(size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖底盘</span></span><br><span class=\"line\">            bottom.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 底盘类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bottom</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Bottom</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            tire = <span class=\"keyword\">new</span> <span class=\"title class_\">Tire</span>(size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖轮胎</span></span><br><span class=\"line\">            tire.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tire</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尺⼨</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Tire</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;轮胎尺⼨：&quot;</span> + size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在实际开发过程中，需求变更是很常见的。而我们不难看出，以上程序的问题是：**当最底层代码改动之后，整个调⽤链上的所有代码都需要修改。**这在实际开发过程中就会严重拖慢我们的进度，那么有什么办法能够解决这个问题呢。我们看看以下的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Tire</span> <span class=\"variable\">tire</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tire</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"type\">Bottom</span> <span class=\"variable\">bottom</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bottom</span>(tire);</span><br><span class=\"line\">        <span class=\"type\">Framework</span> <span class=\"variable\">framework</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Framework</span>(bottom);</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(framework);</span><br><span class=\"line\">        car.run();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Framework framework;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Car</span><span class=\"params\">(Framework framework)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.framework = framework;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            framework.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Framework</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Framework</span><span class=\"params\">(Bottom bottom)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bottom = bottom;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            bottom.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bottom</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Bottom</span><span class=\"params\">(Tire tire)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tire = tire;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            tire.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tire</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Tire</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;轮胎：&quot;</span> + size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 可以看到我们先创建了所有的下级依赖类，然后再通过参数传递的方式注入。这样我们不需 要在当前类中创建下级类了，所以下级类即使发⽣变化（创建或减少参数），当前类本身也⽆需修改任 何代码，这样就完成了程序的解耦。</p>\n<p> 以上就是所谓的控制反转式程序开发。此时⽆论底层类如何变化，整个调⽤链是不⽤做任何改变的，这样就完成了代码之间的解耦，从⽽实现了更加灵活、通⽤的程序设计了。<br>在传统的代码中对象创建顺序是：Car -&gt; Framework -&gt; Bottom -&gt; Tire</p>\n<p>改进之后解耦的代码的对象创建顺序是：Tire -&gt; Bottom -&gt; Framework -&gt; Car<br><img src=\"/2025/04/15/spring/image-20250415134331010.png\" alt=\"image-20250415134331010\"></p>\n<p>这里我们可以发现：通⽤程序的实现代码，类的创建顺序是反的，传统代码是 Car 控制并创建了 Framework，Framework 创建并创建了 Bottom，依次往下，⽽改进之后的控制权发⽣的反转，不再是上级对象创建并控制下级对象了，⽽是下级对象把注⼊将当前对象中，下级的控制权不再由上级类控制了，这样即使下级类发⽣任何改变，当前类都是不受影响的，这就是典型的控制反转，也就是 IoC 的实现思想。 </p>\n<p>仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .</p>\n<p>这种思想 , 从本质上解决了问题 , 我们不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !</p>\n<h3 id=\"IoC本质\"><a href=\"#IoC本质\" class=\"headerlink\" title=\"IoC本质\"></a>IoC本质</h3><p>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，所谓控制反转就是：获得依赖对象的方式反转了。</p>\n<p><img src=\"/2025/04/15/spring/0a4cf6d3f9cb9a73593e73fbf29b4758.png\" alt=\"img\"></p>\n<p>IoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。</p>\n<p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p>\n<p><img src=\"/2025/04/15/spring/6c0706d0b1875bec9cfac6620612da5d.png\" alt=\"img\"></p>\n<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p>\n<p>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</p>\n<h3 id=\"IoC容器的使用\"><a href=\"#IoC容器的使用\" class=\"headerlink\" title=\"IoC容器的使用\"></a>IoC容器的使用</h3><h4 id=\"Bean注册与配置\"><a href=\"#Bean注册与配置\" class=\"headerlink\" title=\"Bean注册与配置\"></a>Bean注册与配置</h4><p>1.Spring为我们提供了一个IoC容器用于存放我们需要使用的对象，我们可以将对象交给IoC容器来管理，当我们需要使用对象时，就可以向IoC容器索要，并由它来决定给我们哪一个对象。要使用IoC容器，就需要创建一个应用程序上下文，它代表的就是IoC容器，它会负责实例化、配置和组装Bean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;application.xml&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>它有很多种实现方式，这里使用xml配置文件所以使用ClassPathXmlApplicationContext。</p>\n<p>2.当你写好了一个bean，可以在xml文件里添加上。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;b&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>class指定bean的类型,name（或id)表示该bean的唯一标识。</p>\n<p>我们可以给Bean起名字，也可以起别名，就像我们除了有一个名字之外，可能在家里还有自己的小名：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alias</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">alias</span>=<span class=\"string\">&quot;test&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在xml文件上的bean可以通过context的getBean方法得到。getBean方法的参数可以是类型或name等。</p>\n<p>3.那么现在又有新的问题了，IoC容器创建的Bean是只有一个还是每次索要的时候都会给我们一个新的对象？</p>\n<p>实际上，我们配置的bean有两种模式(scope)。第一种是<code>singleton</code>，默认情况下就是这一种，当然还有<code>prototype</code>，表示为原型模式（为了方便叫多例模式也行）这种模式每次得到的对象都是一个新的。当Bean的作用域为单例模式时，那么它会在一开始（容器加载配置时）就被创建，我们之后拿到的都是这个对象。而处于原型模式下，只有在获取时才会被创建，也就是说，单例模式下，Bean会被IoC容器存储，只要容器没有被销毁，那么此对象将一直存在，而原型模式才是相当于在要用的时候直接new了一个对象，并不会被保存。</p>\n<p>当然，如果我们希望单例模式下的Bean不用再一开始就加载，而是一样等到需要时再加载（加载后依然会被容器存储，之后一直使用这个对象了，不会再创建新的）我们也可以开启懒加载：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">lazy-init</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>开启懒加载后，只有在真正第一次使用时才会创建对象。</p>\n<p>因为单例模式下Bean是由IoC容器加载，但是加载顺序我们并不清楚，如果我们需要维护Bean的加载顺序（比如某个Bean必须要在另一个Bean之前创建）那么我们可以使用<code>depends-on</code>来设定前置加载Bean，这样被依赖的Bean一定会在之前加载，比如Teacher应该在Student之前加载：        </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">depends-on</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就可以保证Bean的加载顺序了。</p>\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>4.IoC容器在创建对象时，需要将我们预先给定的属性注入到对象中，非常简单，我们可以使用<code>property</code>标签来实现，</p>\n<p>首先依赖注入要求对应的属性必须有一个set方法：      </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Teacher teacher;</span><br><span class=\"line\">  \t<span class=\"comment\">//要使用依赖注入，我们必须提供一个set方法（无论成员变量的访问权限是什么）命名规则依然是驼峰命名法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTeacher</span><span class=\"params\">(Teacher teacher)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacher = teacher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>然后我们将bean标签展开插入property标签：             </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ProgramTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>name=&quot;teacher&quot;</code></strong>：指定了<code>Student</code>类中需要注入的属性名称，即<code>teacher</code>属性。</li>\n<li><strong><code>ref=&quot;teacher&quot;</code></strong>：表示这个<code>teacher</code>属性的值引用了前面定义的<code>teacher</code> Bean。也就是说，<code>Student</code>类的<code>teacher</code>属性会被注入为<code>ProgramTeacher</code>类的实例。</li>\n</ul>\n<p>更改这两个属性，就达到了切换不同的实现。</p>\n<p>当然，依赖注入并不一定要注入其他的Bean，也可以是一个简单的值：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;卢本伟&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>直接使用<code>value</code>可以直接传入一个具体值。</p>\n<p>5.实际上，在很多情况下，类中的某些参数是在构造方法中就已经完成的初始化，而不是创建之后，比如：           </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Teacher teacher;   <span class=\"comment\">//构造方法中完成，所以说是一个final变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(Teacher teacher)</span>&#123;   <span class=\"comment\">//Teacher属性是在构造方法中完成的初始化</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacher = teacher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t...</span><br></pre></td></tr></table></figure>\n\n<p>我们前面说了，Bean实际上是由IoC容器进行创建的，但是现在我们修改了默认的无参构造，可以看到配置文件里面报错了：</p>\n<p><img src=\"/2025/04/15/spring/5HN8GKQywWaYvrF.webp\" alt=\"image-20221122174328107\"></p>\n<p>指定构造器</p>\n<p>很明显，是因为我们修改了构造方法，IoC容器默认只会调用无参构造，所以，我们需要指明一个可以用的构造方法，我们展开bean标签，添加一个<code>constructor-arg</code>标签：   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>constructor-arg</code>就是构造方法的一个参数，这个参数可以写很多个，会自动匹配符合里面参数数量的构造方法，这里匹配的就是我们刚刚编写的需要一个参数的构造方法。</p>\n<p><img src=\"/2025/04/15/spring/evKArqDYcIQPCXT.webp\" alt=\"image-20221122191427776\"></p>\n<p>通过这种方式，我们也能实现依赖注入，只不过现在我们将依赖注入的时机提前到了对象构造时。</p>\n<p>那要是出现这种情况呢？现在我们的Student类中是这样定义的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是一号构造方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是二号构造方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = String.valueOf(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时我们希望使用的是二号构造方法，那么怎么才能指定呢？有2种方式，我们可以给标签添加类型：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;int&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以指定为对应的参数名称：                   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>反正只要能够保证我们指定的参数匹配到目标构造方法即可。</p>\n<p>6.特殊的类型</p>\n<p>现在我们的类中出现了一个比较特殊的类型，它是一个集合类型：    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于这种集合类型，有着特殊的支持：          </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!--  对于集合类型，我们可以直接使用标签编辑集合的默认值  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AAA<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>BBB<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>CCC<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不仅仅是List，Map、Set这类常用集合类包括数组在内，都是支持这样编写的，比如Map类型，我们也可以使用<code>entry</code>来注入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;语文&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;100.0&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;数学&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;80.0&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;英语&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;92.5&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，我们就已经完成了两种依赖注入的学习：</p>\n<ul>\n<li>Setter依赖注入：通过成员属性对应的set方法完成注入。</li>\n<li>构造方法依赖注入：通过构造方法完成注入。</li>\n</ul>\n<h4 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h4><p><strong>autowire实现自动装配</strong></p>\n<p>在之前，如果我们需要使用依赖注入的话，我们需要对<code>property</code>参数进行配置：       </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是有些时候为了方便，我们也可以开启自动装配。自动装配就是让IoC容器自己去寻找需要填入的值，我们只需要将set方法提供好就可以了，这里需要添加autowire属性：             </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>autowire</code>属性有两个值普通，一个是byName，还有一个是byType，顾名思义，一个是根据类型去寻找合适的Bean自动装配，还有一个是根据名字去找，这样我们就不需要显式指定<code>property</code>了。</p>\n<p><img src=\"/2025/04/15/spring/QIBRwScq6fu4XDm.webp\" alt=\"image-20221122221936559\"></p>\n<p>此时set方法旁边会出现一个自动装配图标，效果和上面是一样的。</p>\n<p>对于使用构造方法完成的依赖注入，也支持自动装配，我们只需要将autowire修改为：   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;constructor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，我们只需要提供一个对应参数的构造方法就可以了（这种情况默认也是byType寻找的）：</p>\n<p><img src=\"/2025/04/15/spring/rgl7fXJ2ZKAU8Rd.webp\" alt=\"image-20221122230320004\"></p>\n<p>这样同样可以完成自动注入：</p>\n<p><img src=\"/2025/04/15/spring/evKArqDYcIQPCXT.webp\" alt=\"image-20221122191427776\"></p>\n<p><strong>autowire-candidate和primary解决类型相同问题</strong></p>\n<p>自动化的东西虽然省事，但是太过机械，有些时候，自动装配可能会遇到一些问题，比如出现了下面的情况：</p>\n<p><img src=\"/2025/04/15/spring/SQTchJBq4G8NWyC.webp\" alt=\"image-20221122223048820\"></p>\n<p>此时，由于<code>autowire</code>的规则为byType，存在两个候选Bean，但是我们其实希望ProgramTeacher这个Bean在任何情况下都不参与到自动装配中，此时我们就可以将它的自动装配候选关闭：     </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ProgramTeacher&quot;</span> <span class=\"attr\">autowire-candidate</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当<code>autowire-candidate</code>设定false时，这个Bean将不再作为自动装配的候选Bean，此时自动装配候选就只剩下一个唯一的Bean了，报错消失，程序可以正常运行。</p>\n<p>除了这种方式，我们也可以设定primary属性，表示这个Bean作为主要的Bean，当出现歧义时，也会优先选择：             </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtTeacher&quot;</span> <span class=\"attr\">primary</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ProgramTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样写程序依然可以正常运行，并且选择的也是ArtTeacher。</p>\n<h4 id=\"生命周期与继承\"><a href=\"#生命周期与继承\" class=\"headerlink\" title=\"生命周期与继承\"></a>生命周期与继承</h4><p><strong><code>init-method</code>和<code>destroy-method</code>来指定初始和销毁方法</strong></p>\n<p>除了修改构造方法，我们也可以为Bean指定初始化方法inti()和销毁方法destroy()，以便在对象创建和被销毁时执行一些其他的任务。</p>\n<p>我们可以通过<code>init-method</code>和<code>destroy-method</code>来指定：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么什么时候是初始化，什么时候又是销毁呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当容器创建时，默认情况下Bean都是单例的，那么都会在一开始就加载好，对象构造完成后，会执行init-method</span></span><br><span class=\"line\"><span class=\"type\">ClassPathXmlApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;test.xml&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//我们可以调用close方法关闭容器，此时容器内存放的Bean也会被一起销毁，会执行destroy-method</span></span><br><span class=\"line\">context.close();</span><br></pre></td></tr></table></figure>\n\n<p>所以说，最后的结果为：</p>\n<p><img src=\"/2025/04/15/spring/GWIyPDOaK4TAM1N.webp\" alt=\"image-20221123132604262\"></p>\n<p>注意，如果Bean不是单例模式，而是采用的原型模式，那么就只会在获取时才创建，并调用init-method，而对应的销毁方法不会被调用（因此，对于原型模式下的Bean，Spring无法顾及其完整生命周期，而在单例模式下，Spring能够从Bean对象的创建一直管理到对象的销毁）。</p>\n<p><strong>parent实现属性继承</strong></p>\n<p>Bean之间也是具备继承关系的，只不过这里的继承并不是类的继承，而是属性的继承，比如：        </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SportStudent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;                   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArtStudent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，我们先将ArtStudent注册一个Bean：              </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;artStudent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtStudent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们会注入一个name的初始值，此时我们创建了一个SportStudent的Bean，我们希望这个Bean的属性跟刚刚创建的Bean属性是一样的，那么我们可以写一个一模一样的：                 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是如果属性太多的话，是不是写起来有点麻烦？这种情况，我们就可以配置Bean之间的继承关系了，我们可以让SportStudent这个Bean直接继承ArtStudent这个Bean配置的属性：            </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span> <span class=\"attr\">parent</span>=<span class=\"string\">&quot;artStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，在ArtStudent Bean中配置的属性，会直接继承给SportStudent Bean（注意，所有配置的属性，在子Bean中必须也要存在， 并且可以进行注入，否则会出现错误）当然，如果子类中某些属性比较特殊，也可以在继承的基础上单独配置：        </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;artStudent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtStudent&quot;</span> <span class=\"attr\">abstract</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span> <span class=\"attr\">parent</span>=<span class=\"string\">&quot;artStudent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>abstract将Bean仅作为一个配置模版</strong></p>\n<p>如果我们只是希望某一个Bean仅作为一个配置模版供其他Bean继承使用，那么我们可以将其配置为abstract，这样，容器就不会创建这个Bean的对象了：        </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;artStudent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtStudent&quot;</span> <span class=\"attr\">abstract</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span> <span class=\"attr\">parent</span>=<span class=\"string\">&quot;artStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，一旦声明为抽象Bean，那么就无法通过容器获取到其实例化对象了。</p>\n<p><img src=\"/2025/04/15/spring/SyDkvOldB7ETW4z.webp\" alt=\"image-20221123140409416\"></p>\n<p><strong>大标签beans实现全局默认配置</strong></p>\n<p>如果我们希望整个上下文中所有的Bean都采用某种配置，我们可以在最外层的beans标签中进行默认配置：</p>\n<p><img src=\"/2025/04/15/spring/KzSUJXa4jBfO9rd.webp\" alt=\"image-20221123141221259\"></p>\n<p>这样，即使Bean没有配置某项属性，但是只要在最外层编写了默认配置，那么同样会生效，除非Bean自己进行配置覆盖掉默认配置。</p>\n<h4 id=\"工厂模式和工厂Bean\"><a href=\"#工厂模式和工厂Bean\" class=\"headerlink\" title=\"工厂模式和工厂Bean\"></a>工厂模式和工厂Bean</h4><p>前面我们介绍了IoC容器的Bean创建机制，默认情况下，容器会调用Bean对应类型的构造方法进行对象创建，但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中（详情请观看《Java设计模式》篇 视频教程）我们更希望 Spring不要直接利用反射机制通过构造方法创建Bean对象， 而是利用反射机制先找到对应的工厂类，然后利用工厂类去生成需要的Bean对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    Student() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我被构造了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Student <span class=\"title function_\">getStudent</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      \tSystem.out.println(<span class=\"string\">&quot;欢迎光临电子厂&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时Student有一个工厂，我们正常情况下需要使用工厂才可以得到Student对象，现在我们希望Spring也这样做，不要直接去反射搞构造方法创建，我们可以通过factory-method进行指定：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.StudentFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，这里的Bean类型需要填写为Student类的工厂类，并且添加factory-method指定对应的工厂方法，但是最后注册的是工厂方法的返回类型，所以说依然是Student的Bean：</p>\n<p><img src=\"/2025/04/15/spring/5Id43xPneJiWfZs.webp\" alt=\"image-20221123143302785\"></p>\n<p>此时我们再去进行获取，拿到的也是通过工厂方法得到的对象：</p>\n<p><img src=\"/2025/04/15/spring/l8HzN7Rwthqrim5.webp\" alt=\"image-20221123143347376\"></p>\n<p>这里有一个误区，千万不要认为是我们注册了StudentFactory这个Bean，class填写为这个类这个只是为了告诉Spring我们的工厂方法在哪个位置，真正注册的是工厂方法提供的东西。</p>\n<p>可以发现，当我们采用工厂模式后，我们就无法再通过配置文件对Bean进行依赖注入等操作了，而是只能在工厂方法中完成，这似乎与Spring的设计理念背道而驰？</p>\n<p>当然，可能某些工厂类需要构造出对象之后才能使用，我们也可以将某个工厂类直接注册为工厂Bean： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">getStudent</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;欢迎光临电子厂&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在需要StudentFactory对象才可以获取到Student，此时我们就只能先将其注册为Bean了：                 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;studentFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.StudentFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>像这样将工厂类注册为Bean，我们称其为工厂Bean，然后再使用<code>factory-bean</code>来指定Bean的工厂Bean：               </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;studentFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，使用factory-bean之后，不再要求指定class，我们可以直接使用了：</p>\n<p><img src=\"/2025/04/15/spring/ih1Af7xBdX3ebaG.webp\" alt=\"image-20221123164134470\"></p>\n<p>此时可以看到，工厂方法上同样有了图标，这种方式，由于工厂类被注册为Bean，此时我们就可以在配置文件中为工厂Bean配置依赖注入等内容了。</p>\n<p>这里还有一个很细节的操作，如果我们想获取工厂Bean为我们提供的Bean，可以直接输入工厂Bean的名称，这样不会得到工厂Bean的实例，而是工厂Bean生产的Bean的实例：             </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> (Student) context.getBean(<span class=\"string\">&quot;studentFactory&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>当然，如果我们需要获取工厂类的实例，可以在名称前面添加<code>&amp;</code>符号：           </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StudentFactory</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> (StudentFactory) context.getBean(<span class=\"string\">&quot;&amp;studentFactory&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>又是一个小细节。</p>\n","excerpt":"","more":"<h1 id=\"Spring简介\"><a href=\"#Spring简介\" class=\"headerlink\" title=\"Spring简介\"></a>Spring简介</h1><h3 id=\"1-1历史\"><a href=\"#1-1历史\" class=\"headerlink\" title=\"1.1历史\"></a>1.1历史</h3><p>2002年，首次推出了spring框架的雏形：interface21框架</p>\n<p>2004年3月24日，悉尼大学音乐学博士<strong>Rod Johnson</strong>首次推出Spring框架1.0，解决企业应用开发的复杂性。</p>\n<p>设计理念：使现有的技术更加容易使用，本身是一套大杂烩，整合了现有的技术框架。</p>\n<ul>\n<li><p>SSH：Struct2(视图框架) + Spring(融合剂) + Hibernate(全自动持久层框架)</p>\n</li>\n<li><p>SSM : SpringMvc(视图框架) + Spring(融合剂) + Mybatis(半自动持久层框架，可定制性更高)</p>\n</li>\n</ul>\n<h3 id=\"1-2优点\"><a href=\"#1-2优点\" class=\"headerlink\" title=\"1.2优点\"></a>1.2优点</h3><ul>\n<li><p>Spring是一个开源的免费的框架（容器）</p>\n</li>\n<li><p>Spring是一个轻量级的、非入侵式的框架</p>\n</li>\n<li><p>控制反转（IOC),面向方面编程（AOP)</p>\n</li>\n<li><p>支持事务的处理，对框架整合的支持</p>\n</li>\n</ul>\n<p><mark>总结一句话：Spring就是一个轻量级的控制反转（IoC）和面向方面编程（AOP）的框架！</mark></p>\n<h3 id=\"1-3组成\"><a href=\"#1-3组成\" class=\"headerlink\" title=\"1.3组成\"></a>1.3组成</h3><p><img src=\"/2025/04/15/spring/1010726-20190908042152777-1895820426.png\" alt=\"img\"></p>\n<h3 id=\"1-4拓展\"><a href=\"#1-4拓展\" class=\"headerlink\" title=\"1.4拓展\"></a>1.4拓展</h3><ul>\n<li><p>Spring Boot</p>\n<ul>\n<li>一个快速开发的脚手架</li>\n<li>基于Spring Boot可以快速的开发单个微服务</li>\n<li><mark>约定大于配置</mark></li>\n</ul>\n</li>\n<li><p>Spring Cloud</p>\n<ul>\n<li>SpringCloud是基于SpringBoot实现的</li>\n</ul>\n</li>\n</ul>\n<p>现在大多数公司都在使用SpringBoot进行快速开发，所以先掌握Spring及SpringMVC很重要，承上启下！</p>\n<h1 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h1><p>假如我们需要在程序内构建一辆”车“，那么我们传统的思想一般是下面这样的。</p>\n<p><img src=\"/2025/04/15/spring/image-20250415134033090.png\" alt=\"image-20250415134033090\"></p>\n<p>想要构建一辆汽车，首先要依赖于车身，而车身又依赖于地盘。而底盘需要轮胎。最终我们得到下面的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">        car.init();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽⻋对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖⻋身</span></span><br><span class=\"line\">            <span class=\"type\">Framework</span> <span class=\"variable\">framework</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Framework</span>();</span><br><span class=\"line\">            framework.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ⻋身类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Framework</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖底盘</span></span><br><span class=\"line\">            <span class=\"type\">Bottom</span> <span class=\"variable\">bottom</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bottom</span>();</span><br><span class=\"line\">            bottom.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 底盘类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bottom</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖轮胎</span></span><br><span class=\"line\">            <span class=\"type\">Tire</span> <span class=\"variable\">tire</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tire</span>();</span><br><span class=\"line\">            tire.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tire</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 尺⼨</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;轮胎尺⼨：&quot;</span> + size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 虽然这段代码的确能够满足需求，但是我们不难发现一个特点，就是它的耦合性非常高。假如我们需要更改轮胎的尺寸，我们需要将轮胎以及所有依赖轮胎的组件的构造方法全部更改一遍，加上size参数，例如下面那样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">        car.run();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽⻋对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Framework framework;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Car</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            framework = <span class=\"keyword\">new</span> <span class=\"title class_\">Framework</span>(size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖⻋身</span></span><br><span class=\"line\">            framework.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ⻋身类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Framework</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Framework</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            bottom = <span class=\"keyword\">new</span> <span class=\"title class_\">Bottom</span>(size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖底盘</span></span><br><span class=\"line\">            bottom.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 底盘类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bottom</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Bottom</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            tire = <span class=\"keyword\">new</span> <span class=\"title class_\">Tire</span>(size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖轮胎</span></span><br><span class=\"line\">            tire.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tire</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尺⼨</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Tire</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;轮胎尺⼨：&quot;</span> + size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在实际开发过程中，需求变更是很常见的。而我们不难看出，以上程序的问题是：**当最底层代码改动之后，整个调⽤链上的所有代码都需要修改。**这在实际开发过程中就会严重拖慢我们的进度，那么有什么办法能够解决这个问题呢。我们看看以下的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Tire</span> <span class=\"variable\">tire</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tire</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"type\">Bottom</span> <span class=\"variable\">bottom</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bottom</span>(tire);</span><br><span class=\"line\">        <span class=\"type\">Framework</span> <span class=\"variable\">framework</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Framework</span>(bottom);</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>(framework);</span><br><span class=\"line\">        car.run();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Framework framework;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Car</span><span class=\"params\">(Framework framework)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.framework = framework;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            framework.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Framework</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Framework</span><span class=\"params\">(Bottom bottom)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bottom = bottom;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            bottom.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bottom</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Bottom</span><span class=\"params\">(Tire tire)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tire = tire;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            tire.init();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tire</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Tire</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;轮胎：&quot;</span> + size);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 可以看到我们先创建了所有的下级依赖类，然后再通过参数传递的方式注入。这样我们不需 要在当前类中创建下级类了，所以下级类即使发⽣变化（创建或减少参数），当前类本身也⽆需修改任 何代码，这样就完成了程序的解耦。</p>\n<p> 以上就是所谓的控制反转式程序开发。此时⽆论底层类如何变化，整个调⽤链是不⽤做任何改变的，这样就完成了代码之间的解耦，从⽽实现了更加灵活、通⽤的程序设计了。<br>在传统的代码中对象创建顺序是：Car -&gt; Framework -&gt; Bottom -&gt; Tire</p>\n<p>改进之后解耦的代码的对象创建顺序是：Tire -&gt; Bottom -&gt; Framework -&gt; Car<br><img src=\"/2025/04/15/spring/image-20250415134331010.png\" alt=\"image-20250415134331010\"></p>\n<p>这里我们可以发现：通⽤程序的实现代码，类的创建顺序是反的，传统代码是 Car 控制并创建了 Framework，Framework 创建并创建了 Bottom，依次往下，⽽改进之后的控制权发⽣的反转，不再是上级对象创建并控制下级对象了，⽽是下级对象把注⼊将当前对象中，下级的控制权不再由上级类控制了，这样即使下级类发⽣任何改变，当前类都是不受影响的，这就是典型的控制反转，也就是 IoC 的实现思想。 </p>\n<p>仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .</p>\n<p>这种思想 , 从本质上解决了问题 , 我们不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !</p>\n<h3 id=\"IoC本质\"><a href=\"#IoC本质\" class=\"headerlink\" title=\"IoC本质\"></a>IoC本质</h3><p>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，所谓控制反转就是：获得依赖对象的方式反转了。</p>\n<p><img src=\"/2025/04/15/spring/0a4cf6d3f9cb9a73593e73fbf29b4758.png\" alt=\"img\"></p>\n<p>IoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。</p>\n<p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p>\n<p><img src=\"/2025/04/15/spring/6c0706d0b1875bec9cfac6620612da5d.png\" alt=\"img\"></p>\n<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p>\n<p>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</p>\n<h3 id=\"IoC容器的使用\"><a href=\"#IoC容器的使用\" class=\"headerlink\" title=\"IoC容器的使用\"></a>IoC容器的使用</h3><h4 id=\"Bean注册与配置\"><a href=\"#Bean注册与配置\" class=\"headerlink\" title=\"Bean注册与配置\"></a>Bean注册与配置</h4><p>1.Spring为我们提供了一个IoC容器用于存放我们需要使用的对象，我们可以将对象交给IoC容器来管理，当我们需要使用对象时，就可以向IoC容器索要，并由它来决定给我们哪一个对象。要使用IoC容器，就需要创建一个应用程序上下文，它代表的就是IoC容器，它会负责实例化、配置和组装Bean:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;application.xml&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>它有很多种实现方式，这里使用xml配置文件所以使用ClassPathXmlApplicationContext。</p>\n<p>2.当你写好了一个bean，可以在xml文件里添加上。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;b&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>class指定bean的类型,name（或id)表示该bean的唯一标识。</p>\n<p>我们可以给Bean起名字，也可以起别名，就像我们除了有一个名字之外，可能在家里还有自己的小名：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alias</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">alias</span>=<span class=\"string\">&quot;test&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在xml文件上的bean可以通过context的getBean方法得到。getBean方法的参数可以是类型或name等。</p>\n<p>3.那么现在又有新的问题了，IoC容器创建的Bean是只有一个还是每次索要的时候都会给我们一个新的对象？</p>\n<p>实际上，我们配置的bean有两种模式(scope)。第一种是<code>singleton</code>，默认情况下就是这一种，当然还有<code>prototype</code>，表示为原型模式（为了方便叫多例模式也行）这种模式每次得到的对象都是一个新的。当Bean的作用域为单例模式时，那么它会在一开始（容器加载配置时）就被创建，我们之后拿到的都是这个对象。而处于原型模式下，只有在获取时才会被创建，也就是说，单例模式下，Bean会被IoC容器存储，只要容器没有被销毁，那么此对象将一直存在，而原型模式才是相当于在要用的时候直接new了一个对象，并不会被保存。</p>\n<p>当然，如果我们希望单例模式下的Bean不用再一开始就加载，而是一样等到需要时再加载（加载后依然会被容器存储，之后一直使用这个对象了，不会再创建新的）我们也可以开启懒加载：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">lazy-init</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>开启懒加载后，只有在真正第一次使用时才会创建对象。</p>\n<p>因为单例模式下Bean是由IoC容器加载，但是加载顺序我们并不清楚，如果我们需要维护Bean的加载顺序（比如某个Bean必须要在另一个Bean之前创建）那么我们可以使用<code>depends-on</code>来设定前置加载Bean，这样被依赖的Bean一定会在之前加载，比如Teacher应该在Student之前加载：        </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">depends-on</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就可以保证Bean的加载顺序了。</p>\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>4.IoC容器在创建对象时，需要将我们预先给定的属性注入到对象中，非常简单，我们可以使用<code>property</code>标签来实现，</p>\n<p>首先依赖注入要求对应的属性必须有一个set方法：      </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Teacher teacher;</span><br><span class=\"line\">  \t<span class=\"comment\">//要使用依赖注入，我们必须提供一个set方法（无论成员变量的访问权限是什么）命名规则依然是驼峰命名法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTeacher</span><span class=\"params\">(Teacher teacher)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacher = teacher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>然后我们将bean标签展开插入property标签：             </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ProgramTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>name=&quot;teacher&quot;</code></strong>：指定了<code>Student</code>类中需要注入的属性名称，即<code>teacher</code>属性。</li>\n<li><strong><code>ref=&quot;teacher&quot;</code></strong>：表示这个<code>teacher</code>属性的值引用了前面定义的<code>teacher</code> Bean。也就是说，<code>Student</code>类的<code>teacher</code>属性会被注入为<code>ProgramTeacher</code>类的实例。</li>\n</ul>\n<p>更改这两个属性，就达到了切换不同的实现。</p>\n<p>当然，依赖注入并不一定要注入其他的Bean，也可以是一个简单的值：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;卢本伟&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>直接使用<code>value</code>可以直接传入一个具体值。</p>\n<p>5.实际上，在很多情况下，类中的某些参数是在构造方法中就已经完成的初始化，而不是创建之后，比如：           </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Teacher teacher;   <span class=\"comment\">//构造方法中完成，所以说是一个final变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(Teacher teacher)</span>&#123;   <span class=\"comment\">//Teacher属性是在构造方法中完成的初始化</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacher = teacher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t...</span><br></pre></td></tr></table></figure>\n\n<p>我们前面说了，Bean实际上是由IoC容器进行创建的，但是现在我们修改了默认的无参构造，可以看到配置文件里面报错了：</p>\n<p><img src=\"/2025/04/15/spring/5HN8GKQywWaYvrF.webp\" alt=\"image-20221122174328107\"></p>\n<p>指定构造器</p>\n<p>很明显，是因为我们修改了构造方法，IoC容器默认只会调用无参构造，所以，我们需要指明一个可以用的构造方法，我们展开bean标签，添加一个<code>constructor-arg</code>标签：   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>constructor-arg</code>就是构造方法的一个参数，这个参数可以写很多个，会自动匹配符合里面参数数量的构造方法，这里匹配的就是我们刚刚编写的需要一个参数的构造方法。</p>\n<p><img src=\"/2025/04/15/spring/evKArqDYcIQPCXT.webp\" alt=\"image-20221122191427776\"></p>\n<p>通过这种方式，我们也能实现依赖注入，只不过现在我们将依赖注入的时机提前到了对象构造时。</p>\n<p>那要是出现这种情况呢？现在我们的Student类中是这样定义的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是一号构造方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是二号构造方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = String.valueOf(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时我们希望使用的是二号构造方法，那么怎么才能指定呢？有2种方式，我们可以给标签添加类型：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;int&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以指定为对应的参数名称：                   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>反正只要能够保证我们指定的参数匹配到目标构造方法即可。</p>\n<p>6.特殊的类型</p>\n<p>现在我们的类中出现了一个比较特殊的类型，它是一个集合类型：    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于这种集合类型，有着特殊的支持：          </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!--  对于集合类型，我们可以直接使用标签编辑集合的默认值  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AAA<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>BBB<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>CCC<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不仅仅是List，Map、Set这类常用集合类包括数组在内，都是支持这样编写的，比如Map类型，我们也可以使用<code>entry</code>来注入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;语文&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;100.0&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;数学&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;80.0&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;英语&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;92.5&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，我们就已经完成了两种依赖注入的学习：</p>\n<ul>\n<li>Setter依赖注入：通过成员属性对应的set方法完成注入。</li>\n<li>构造方法依赖注入：通过构造方法完成注入。</li>\n</ul>\n<h4 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h4><p><strong>autowire实现自动装配</strong></p>\n<p>在之前，如果我们需要使用依赖注入的话，我们需要对<code>property</code>参数进行配置：       </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;teacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是有些时候为了方便，我们也可以开启自动装配。自动装配就是让IoC容器自己去寻找需要填入的值，我们只需要将set方法提供好就可以了，这里需要添加autowire属性：             </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>autowire</code>属性有两个值普通，一个是byName，还有一个是byType，顾名思义，一个是根据类型去寻找合适的Bean自动装配，还有一个是根据名字去找，这样我们就不需要显式指定<code>property</code>了。</p>\n<p><img src=\"/2025/04/15/spring/QIBRwScq6fu4XDm.webp\" alt=\"image-20221122221936559\"></p>\n<p>此时set方法旁边会出现一个自动装配图标，效果和上面是一样的。</p>\n<p>对于使用构造方法完成的依赖注入，也支持自动装配，我们只需要将autowire修改为：   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;constructor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，我们只需要提供一个对应参数的构造方法就可以了（这种情况默认也是byType寻找的）：</p>\n<p><img src=\"/2025/04/15/spring/rgl7fXJ2ZKAU8Rd.webp\" alt=\"image-20221122230320004\"></p>\n<p>这样同样可以完成自动注入：</p>\n<p><img src=\"/2025/04/15/spring/evKArqDYcIQPCXT.webp\" alt=\"image-20221122191427776\"></p>\n<p><strong>autowire-candidate和primary解决类型相同问题</strong></p>\n<p>自动化的东西虽然省事，但是太过机械，有些时候，自动装配可能会遇到一些问题，比如出现了下面的情况：</p>\n<p><img src=\"/2025/04/15/spring/SQTchJBq4G8NWyC.webp\" alt=\"image-20221122223048820\"></p>\n<p>此时，由于<code>autowire</code>的规则为byType，存在两个候选Bean，但是我们其实希望ProgramTeacher这个Bean在任何情况下都不参与到自动装配中，此时我们就可以将它的自动装配候选关闭：     </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ProgramTeacher&quot;</span> <span class=\"attr\">autowire-candidate</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当<code>autowire-candidate</code>设定false时，这个Bean将不再作为自动装配的候选Bean，此时自动装配候选就只剩下一个唯一的Bean了，报错消失，程序可以正常运行。</p>\n<p>除了这种方式，我们也可以设定primary属性，表示这个Bean作为主要的Bean，当出现歧义时，也会优先选择：             </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtTeacher&quot;</span> <span class=\"attr\">primary</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;teacher2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ProgramTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样写程序依然可以正常运行，并且选择的也是ArtTeacher。</p>\n<h4 id=\"生命周期与继承\"><a href=\"#生命周期与继承\" class=\"headerlink\" title=\"生命周期与继承\"></a>生命周期与继承</h4><p><strong><code>init-method</code>和<code>destroy-method</code>来指定初始和销毁方法</strong></p>\n<p>除了修改构造方法，我们也可以为Bean指定初始化方法inti()和销毁方法destroy()，以便在对象创建和被销毁时执行一些其他的任务。</p>\n<p>我们可以通过<code>init-method</code>和<code>destroy-method</code>来指定：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.Student&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么什么时候是初始化，什么时候又是销毁呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当容器创建时，默认情况下Bean都是单例的，那么都会在一开始就加载好，对象构造完成后，会执行init-method</span></span><br><span class=\"line\"><span class=\"type\">ClassPathXmlApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;test.xml&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//我们可以调用close方法关闭容器，此时容器内存放的Bean也会被一起销毁，会执行destroy-method</span></span><br><span class=\"line\">context.close();</span><br></pre></td></tr></table></figure>\n\n<p>所以说，最后的结果为：</p>\n<p><img src=\"/2025/04/15/spring/GWIyPDOaK4TAM1N.webp\" alt=\"image-20221123132604262\"></p>\n<p>注意，如果Bean不是单例模式，而是采用的原型模式，那么就只会在获取时才创建，并调用init-method，而对应的销毁方法不会被调用（因此，对于原型模式下的Bean，Spring无法顾及其完整生命周期，而在单例模式下，Spring能够从Bean对象的创建一直管理到对象的销毁）。</p>\n<p><strong>parent实现属性继承</strong></p>\n<p>Bean之间也是具备继承关系的，只不过这里的继承并不是类的继承，而是属性的继承，比如：        </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SportStudent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;                   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArtStudent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，我们先将ArtStudent注册一个Bean：              </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;artStudent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtStudent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们会注入一个name的初始值，此时我们创建了一个SportStudent的Bean，我们希望这个Bean的属性跟刚刚创建的Bean属性是一样的，那么我们可以写一个一模一样的：                 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是如果属性太多的话，是不是写起来有点麻烦？这种情况，我们就可以配置Bean之间的继承关系了，我们可以让SportStudent这个Bean直接继承ArtStudent这个Bean配置的属性：            </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span> <span class=\"attr\">parent</span>=<span class=\"string\">&quot;artStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，在ArtStudent Bean中配置的属性，会直接继承给SportStudent Bean（注意，所有配置的属性，在子Bean中必须也要存在， 并且可以进行注入，否则会出现错误）当然，如果子类中某些属性比较特殊，也可以在继承的基础上单独配置：        </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;artStudent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtStudent&quot;</span> <span class=\"attr\">abstract</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span> <span class=\"attr\">parent</span>=<span class=\"string\">&quot;artStudent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>abstract将Bean仅作为一个配置模版</strong></p>\n<p>如果我们只是希望某一个Bean仅作为一个配置模版供其他Bean继承使用，那么我们可以将其配置为abstract，这样，容器就不会创建这个Bean的对象了：        </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;artStudent&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.ArtStudent&quot;</span> <span class=\"attr\">abstract</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小明&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.SportStudent&quot;</span> <span class=\"attr\">parent</span>=<span class=\"string\">&quot;artStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，一旦声明为抽象Bean，那么就无法通过容器获取到其实例化对象了。</p>\n<p><img src=\"/2025/04/15/spring/SyDkvOldB7ETW4z.webp\" alt=\"image-20221123140409416\"></p>\n<p><strong>大标签beans实现全局默认配置</strong></p>\n<p>如果我们希望整个上下文中所有的Bean都采用某种配置，我们可以在最外层的beans标签中进行默认配置：</p>\n<p><img src=\"/2025/04/15/spring/KzSUJXa4jBfO9rd.webp\" alt=\"image-20221123141221259\"></p>\n<p>这样，即使Bean没有配置某项属性，但是只要在最外层编写了默认配置，那么同样会生效，除非Bean自己进行配置覆盖掉默认配置。</p>\n<h4 id=\"工厂模式和工厂Bean\"><a href=\"#工厂模式和工厂Bean\" class=\"headerlink\" title=\"工厂模式和工厂Bean\"></a>工厂模式和工厂Bean</h4><p>前面我们介绍了IoC容器的Bean创建机制，默认情况下，容器会调用Bean对应类型的构造方法进行对象创建，但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中（详情请观看《Java设计模式》篇 视频教程）我们更希望 Spring不要直接利用反射机制通过构造方法创建Bean对象， 而是利用反射机制先找到对应的工厂类，然后利用工厂类去生成需要的Bean对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    Student() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我被构造了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Student <span class=\"title function_\">getStudent</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      \tSystem.out.println(<span class=\"string\">&quot;欢迎光临电子厂&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时Student有一个工厂，我们正常情况下需要使用工厂才可以得到Student对象，现在我们希望Spring也这样做，不要直接去反射搞构造方法创建，我们可以通过factory-method进行指定：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.StudentFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，这里的Bean类型需要填写为Student类的工厂类，并且添加factory-method指定对应的工厂方法，但是最后注册的是工厂方法的返回类型，所以说依然是Student的Bean：</p>\n<p><img src=\"/2025/04/15/spring/5Id43xPneJiWfZs.webp\" alt=\"image-20221123143302785\"></p>\n<p>此时我们再去进行获取，拿到的也是通过工厂方法得到的对象：</p>\n<p><img src=\"/2025/04/15/spring/l8HzN7Rwthqrim5.webp\" alt=\"image-20221123143347376\"></p>\n<p>这里有一个误区，千万不要认为是我们注册了StudentFactory这个Bean，class填写为这个类这个只是为了告诉Spring我们的工厂方法在哪个位置，真正注册的是工厂方法提供的东西。</p>\n<p>可以发现，当我们采用工厂模式后，我们就无法再通过配置文件对Bean进行依赖注入等操作了，而是只能在工厂方法中完成，这似乎与Spring的设计理念背道而驰？</p>\n<p>当然，可能某些工厂类需要构造出对象之后才能使用，我们也可以将某个工厂类直接注册为工厂Bean： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">getStudent</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;欢迎光临电子厂&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在需要StudentFactory对象才可以获取到Student，此时我们就只能先将其注册为Bean了：                 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;studentFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.test.bean.StudentFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>像这样将工厂类注册为Bean，我们称其为工厂Bean，然后再使用<code>factory-bean</code>来指定Bean的工厂Bean：               </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;studentFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getStudent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，使用factory-bean之后，不再要求指定class，我们可以直接使用了：</p>\n<p><img src=\"/2025/04/15/spring/ih1Af7xBdX3ebaG.webp\" alt=\"image-20221123164134470\"></p>\n<p>此时可以看到，工厂方法上同样有了图标，这种方式，由于工厂类被注册为Bean，此时我们就可以在配置文件中为工厂Bean配置依赖注入等内容了。</p>\n<p>这里还有一个很细节的操作，如果我们想获取工厂Bean为我们提供的Bean，可以直接输入工厂Bean的名称，这样不会得到工厂Bean的实例，而是工厂Bean生产的Bean的实例：             </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> (Student) context.getBean(<span class=\"string\">&quot;studentFactory&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>当然，如果我们需要获取工厂类的实例，可以在名称前面添加<code>&amp;</code>符号：           </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StudentFactory</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> (StudentFactory) context.getBean(<span class=\"string\">&quot;&amp;studentFactory&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>又是一个小细节。</p>\n"},{"title":"刷题日记3.19","date":"2025-03-18T16:00:00.000Z","updated":"2025-03-18T16:00:00.000Z","_content":"## 1.埃氏筛法\n\n### 解决:\n\n找出所有小于等于n的质数问题。\n\n### 思想：\n\n任意一个数（大于1），它的倍数均不是质数。\n\n### 核心代码：\n\nvis[0]=vis[1]=true;//1表示不是质数，被筛掉\n\n  for(int i=2;i<=n;++i){\n\n​    if(!vis[i])for(ll j=1ll  * i  * i; j<=n;j+=i)vis[j]=true;\n\n  }\n\n### 复杂度：\n\nO(n*log(logn))， 小于1e7可用，再大用欧拉筛法\n\n\n\n### 欧拉筛法\n\n欧拉筛法的核心思想是：**每个合数只被它的最小质因数筛掉一次**。通过这种方式，避免了埃氏筛法中合数被重复标记的问题，从而提高了效率。\n\n```cpp\n    // 初始化\n    for (int i = 2; i <= n; ++i) is_prime[i] = true;\n\n    // 筛选\n    for (int i = 2; i <= n; ++i) {\n        if (is_prime[i]) prime.push_back(i); // 如果i是素数，加入素数列表\n        for (int j = 0; j < prime.size() && (long long)i * prime[j] <= n; ++j) {\n            is_prime[i * prime[j]] = false; // 标记合数\n            if (i % prime[j] == 0) break;   // 关键优化：停止条件\n        }\n    }\n```\n\n## 2.gcd和lcm\n\n### 辗转相除法\n\n求两个数的最大公因数gcd\n\nc语言代码：\n\n```c++\nint gcd（int a,int b）{\n\tif(a<b){//其实可以不加此步骤，若a<b,在第一次while循环赋值时会交换ab的值\n\t\tint temp=b;\n\t\tb=a;\n\t\ta=temp;\n\t}\n\twhile(b!=0) {//(a,b)->(b,a%b)->(a%b,a%b%b)->...//当较小数不为0时循环继续\n\t\tint temp=b;\n\t\tb=a%b;\n\t\ta=temp;\n\t}\n\treturn a;//较大数即为所求最大公因数/公约数\n}\n```\n\ntips：最小公倍数lcm即二者之积除以他们的最大公因数。\n\n## 3.快速幂\n\n把指数拆到底数中来\n\n```c++\nll qmi(ll a, ll b, ll c){\n\tll res = 1;\n\twhile(b) {\n\t\tif(b%2)res = a * res % c;\n\t\ta = a * a % c;\n\t\tb/=2;\n\t}\n\treturn res;\n};\n```\n\n## 4.乘法逆元\n\n在取模时可能会用到乘法逆元，用来求在mod意义下的同类数。在取模意义下除以一个数等于乘以这个数的乘法逆元。取模的这个数是质数时有费马小定理。费马小定理就是用来求这个数的乘法逆元的。\n\n根据费马小定理有：\n\n![image-20250319185048652](刷题日记3.19/image-20250319185048652.png)\n\n代码：\n\n```c++\nll inv(ll x){//利用费马小定理得出乘法逆元式子，快速幂快速求出其值\n\treturn qmi(x, p - 2);\n}\n\nll f(ll a, ll b, ll c, ll x) {\n\treturn (a * x % p + b) % p * inv(c * x % p) % p;\n}\n```\n\n## 5.组合数\n\n注意一个重要的性质：帕斯卡恒等式。\n\n![image-20250319222721615](刷题日记3.19/image-20250319222721615.png)\n\n","source":"_posts/刷题日记3.19.md","raw":"---\ntitle: 刷题日记3.19\ndate: 2025-03-19\nupdated: 2025-03-19\ncategories: 算法\n---\n## 1.埃氏筛法\n\n### 解决:\n\n找出所有小于等于n的质数问题。\n\n### 思想：\n\n任意一个数（大于1），它的倍数均不是质数。\n\n### 核心代码：\n\nvis[0]=vis[1]=true;//1表示不是质数，被筛掉\n\n  for(int i=2;i<=n;++i){\n\n​    if(!vis[i])for(ll j=1ll  * i  * i; j<=n;j+=i)vis[j]=true;\n\n  }\n\n### 复杂度：\n\nO(n*log(logn))， 小于1e7可用，再大用欧拉筛法\n\n\n\n### 欧拉筛法\n\n欧拉筛法的核心思想是：**每个合数只被它的最小质因数筛掉一次**。通过这种方式，避免了埃氏筛法中合数被重复标记的问题，从而提高了效率。\n\n```cpp\n    // 初始化\n    for (int i = 2; i <= n; ++i) is_prime[i] = true;\n\n    // 筛选\n    for (int i = 2; i <= n; ++i) {\n        if (is_prime[i]) prime.push_back(i); // 如果i是素数，加入素数列表\n        for (int j = 0; j < prime.size() && (long long)i * prime[j] <= n; ++j) {\n            is_prime[i * prime[j]] = false; // 标记合数\n            if (i % prime[j] == 0) break;   // 关键优化：停止条件\n        }\n    }\n```\n\n## 2.gcd和lcm\n\n### 辗转相除法\n\n求两个数的最大公因数gcd\n\nc语言代码：\n\n```c++\nint gcd（int a,int b）{\n\tif(a<b){//其实可以不加此步骤，若a<b,在第一次while循环赋值时会交换ab的值\n\t\tint temp=b;\n\t\tb=a;\n\t\ta=temp;\n\t}\n\twhile(b!=0) {//(a,b)->(b,a%b)->(a%b,a%b%b)->...//当较小数不为0时循环继续\n\t\tint temp=b;\n\t\tb=a%b;\n\t\ta=temp;\n\t}\n\treturn a;//较大数即为所求最大公因数/公约数\n}\n```\n\ntips：最小公倍数lcm即二者之积除以他们的最大公因数。\n\n## 3.快速幂\n\n把指数拆到底数中来\n\n```c++\nll qmi(ll a, ll b, ll c){\n\tll res = 1;\n\twhile(b) {\n\t\tif(b%2)res = a * res % c;\n\t\ta = a * a % c;\n\t\tb/=2;\n\t}\n\treturn res;\n};\n```\n\n## 4.乘法逆元\n\n在取模时可能会用到乘法逆元，用来求在mod意义下的同类数。在取模意义下除以一个数等于乘以这个数的乘法逆元。取模的这个数是质数时有费马小定理。费马小定理就是用来求这个数的乘法逆元的。\n\n根据费马小定理有：\n\n![image-20250319185048652](刷题日记3.19/image-20250319185048652.png)\n\n代码：\n\n```c++\nll inv(ll x){//利用费马小定理得出乘法逆元式子，快速幂快速求出其值\n\treturn qmi(x, p - 2);\n}\n\nll f(ll a, ll b, ll c, ll x) {\n\treturn (a * x % p + b) % p * inv(c * x % p) % p;\n}\n```\n\n## 5.组合数\n\n注意一个重要的性质：帕斯卡恒等式。\n\n![image-20250319222721615](刷题日记3.19/image-20250319222721615.png)\n\n","slug":"刷题日记3.19","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19ape000lpoot1y8rhbev","content":"<h2 id=\"1-埃氏筛法\"><a href=\"#1-埃氏筛法\" class=\"headerlink\" title=\"1.埃氏筛法\"></a>1.埃氏筛法</h2><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决:\"></a>解决:</h3><p>找出所有小于等于n的质数问题。</p>\n<h3 id=\"思想：\"><a href=\"#思想：\" class=\"headerlink\" title=\"思想：\"></a>思想：</h3><p>任意一个数（大于1），它的倍数均不是质数。</p>\n<h3 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h3><p>vis[0]&#x3D;vis[1]&#x3D;true;&#x2F;&#x2F;1表示不是质数，被筛掉</p>\n<p>  for(int i&#x3D;2;i&lt;&#x3D;n;++i){</p>\n<p>​    if(!vis[i])for(ll j&#x3D;1ll  * i  * i; j&lt;&#x3D;n;j+&#x3D;i)vis[j]&#x3D;true;</p>\n<p>  }</p>\n<h3 id=\"复杂度：\"><a href=\"#复杂度：\" class=\"headerlink\" title=\"复杂度：\"></a>复杂度：</h3><p>O(n*log(logn))， 小于1e7可用，再大用欧拉筛法</p>\n<h3 id=\"欧拉筛法\"><a href=\"#欧拉筛法\" class=\"headerlink\" title=\"欧拉筛法\"></a>欧拉筛法</h3><p>欧拉筛法的核心思想是：<strong>每个合数只被它的最小质因数筛掉一次</strong>。通过这种方式，避免了埃氏筛法中合数被重复标记的问题，从而提高了效率。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) is_prime[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 筛选</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_prime[i]) prime.<span class=\"built_in\">push_back</span>(i); <span class=\"comment\">// 如果i是素数，加入素数列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; prime.<span class=\"built_in\">size</span>() &amp;&amp; (<span class=\"type\">long</span> <span class=\"type\">long</span>)i * prime[j] &lt;= n; ++j) &#123;</span><br><span class=\"line\">        is_prime[i * prime[j]] = <span class=\"literal\">false</span>; <span class=\"comment\">// 标记合数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % prime[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;   <span class=\"comment\">// 关键优化：停止条件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-gcd和lcm\"><a href=\"#2-gcd和lcm\" class=\"headerlink\" title=\"2.gcd和lcm\"></a>2.gcd和lcm</h2><h3 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h3><p>求两个数的最大公因数gcd</p>\n<p>c语言代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> gcd（<span class=\"type\">int</span> a,<span class=\"type\">int</span> b）&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&lt;b)&#123;<span class=\"comment\">//其实可以不加此步骤，若a&lt;b,在第一次while循环赋值时会交换ab的值</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp=b;</span><br><span class=\"line\">\t\tb=a;</span><br><span class=\"line\">\t\ta=temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b!=<span class=\"number\">0</span>) &#123;<span class=\"comment\">//(a,b)-&gt;(b,a%b)-&gt;(a%b,a%b%b)-&gt;...//当较小数不为0时循环继续</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp=b;</span><br><span class=\"line\">\t\tb=a%b;</span><br><span class=\"line\">\t\ta=temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;<span class=\"comment\">//较大数即为所求最大公因数/公约数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips：最小公倍数lcm即二者之积除以他们的最大公因数。</p>\n<h2 id=\"3-快速幂\"><a href=\"#3-快速幂\" class=\"headerlink\" title=\"3.快速幂\"></a>3.快速幂</h2><p>把指数拆到底数中来</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qmi</span><span class=\"params\">(ll a, ll b, ll c)</span></span>&#123;</span><br><span class=\"line\">\tll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b%<span class=\"number\">2</span>)res = a * res % c;</span><br><span class=\"line\">\t\ta = a * a % c;</span><br><span class=\"line\">\t\tb/=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-乘法逆元\"><a href=\"#4-乘法逆元\" class=\"headerlink\" title=\"4.乘法逆元\"></a>4.乘法逆元</h2><p>在取模时可能会用到乘法逆元，用来求在mod意义下的同类数。在取模意义下除以一个数等于乘以这个数的乘法逆元。取模的这个数是质数时有费马小定理。费马小定理就是用来求这个数的乘法逆元的。</p>\n<p>根据费马小定理有：</p>\n<p><img src=\"/2025/03/19/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B03.19/image-20250319185048652.png\" alt=\"image-20250319185048652\"></p>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">inv</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"comment\">//利用费马小定理得出乘法逆元式子，快速幂快速求出其值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">qmi</span>(x, p - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">f</span><span class=\"params\">(ll a, ll b, ll c, ll x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a * x % p + b) % p * <span class=\"built_in\">inv</span>(c * x % p) % p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-组合数\"><a href=\"#5-组合数\" class=\"headerlink\" title=\"5.组合数\"></a>5.组合数</h2><p>注意一个重要的性质：帕斯卡恒等式。</p>\n<p><img src=\"/2025/03/19/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B03.19/image-20250319222721615.png\" alt=\"image-20250319222721615\"></p>\n","excerpt":"","more":"<h2 id=\"1-埃氏筛法\"><a href=\"#1-埃氏筛法\" class=\"headerlink\" title=\"1.埃氏筛法\"></a>1.埃氏筛法</h2><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决:\"></a>解决:</h3><p>找出所有小于等于n的质数问题。</p>\n<h3 id=\"思想：\"><a href=\"#思想：\" class=\"headerlink\" title=\"思想：\"></a>思想：</h3><p>任意一个数（大于1），它的倍数均不是质数。</p>\n<h3 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h3><p>vis[0]&#x3D;vis[1]&#x3D;true;&#x2F;&#x2F;1表示不是质数，被筛掉</p>\n<p>  for(int i&#x3D;2;i&lt;&#x3D;n;++i){</p>\n<p>​    if(!vis[i])for(ll j&#x3D;1ll  * i  * i; j&lt;&#x3D;n;j+&#x3D;i)vis[j]&#x3D;true;</p>\n<p>  }</p>\n<h3 id=\"复杂度：\"><a href=\"#复杂度：\" class=\"headerlink\" title=\"复杂度：\"></a>复杂度：</h3><p>O(n*log(logn))， 小于1e7可用，再大用欧拉筛法</p>\n<h3 id=\"欧拉筛法\"><a href=\"#欧拉筛法\" class=\"headerlink\" title=\"欧拉筛法\"></a>欧拉筛法</h3><p>欧拉筛法的核心思想是：<strong>每个合数只被它的最小质因数筛掉一次</strong>。通过这种方式，避免了埃氏筛法中合数被重复标记的问题，从而提高了效率。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) is_prime[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 筛选</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_prime[i]) prime.<span class=\"built_in\">push_back</span>(i); <span class=\"comment\">// 如果i是素数，加入素数列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; prime.<span class=\"built_in\">size</span>() &amp;&amp; (<span class=\"type\">long</span> <span class=\"type\">long</span>)i * prime[j] &lt;= n; ++j) &#123;</span><br><span class=\"line\">        is_prime[i * prime[j]] = <span class=\"literal\">false</span>; <span class=\"comment\">// 标记合数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % prime[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;   <span class=\"comment\">// 关键优化：停止条件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-gcd和lcm\"><a href=\"#2-gcd和lcm\" class=\"headerlink\" title=\"2.gcd和lcm\"></a>2.gcd和lcm</h2><h3 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h3><p>求两个数的最大公因数gcd</p>\n<p>c语言代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> gcd（<span class=\"type\">int</span> a,<span class=\"type\">int</span> b）&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&lt;b)&#123;<span class=\"comment\">//其实可以不加此步骤，若a&lt;b,在第一次while循环赋值时会交换ab的值</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp=b;</span><br><span class=\"line\">\t\tb=a;</span><br><span class=\"line\">\t\ta=temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b!=<span class=\"number\">0</span>) &#123;<span class=\"comment\">//(a,b)-&gt;(b,a%b)-&gt;(a%b,a%b%b)-&gt;...//当较小数不为0时循环继续</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp=b;</span><br><span class=\"line\">\t\tb=a%b;</span><br><span class=\"line\">\t\ta=temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;<span class=\"comment\">//较大数即为所求最大公因数/公约数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips：最小公倍数lcm即二者之积除以他们的最大公因数。</p>\n<h2 id=\"3-快速幂\"><a href=\"#3-快速幂\" class=\"headerlink\" title=\"3.快速幂\"></a>3.快速幂</h2><p>把指数拆到底数中来</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qmi</span><span class=\"params\">(ll a, ll b, ll c)</span></span>&#123;</span><br><span class=\"line\">\tll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b%<span class=\"number\">2</span>)res = a * res % c;</span><br><span class=\"line\">\t\ta = a * a % c;</span><br><span class=\"line\">\t\tb/=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-乘法逆元\"><a href=\"#4-乘法逆元\" class=\"headerlink\" title=\"4.乘法逆元\"></a>4.乘法逆元</h2><p>在取模时可能会用到乘法逆元，用来求在mod意义下的同类数。在取模意义下除以一个数等于乘以这个数的乘法逆元。取模的这个数是质数时有费马小定理。费马小定理就是用来求这个数的乘法逆元的。</p>\n<p>根据费马小定理有：</p>\n<p><img src=\"/2025/03/19/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B03.19/image-20250319185048652.png\" alt=\"image-20250319185048652\"></p>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">inv</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"comment\">//利用费马小定理得出乘法逆元式子，快速幂快速求出其值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">qmi</span>(x, p - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">f</span><span class=\"params\">(ll a, ll b, ll c, ll x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a * x % p + b) % p * <span class=\"built_in\">inv</span>(c * x % p) % p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-组合数\"><a href=\"#5-组合数\" class=\"headerlink\" title=\"5.组合数\"></a>5.组合数</h2><p>注意一个重要的性质：帕斯卡恒等式。</p>\n<p><img src=\"/2025/03/19/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B03.19/image-20250319222721615.png\" alt=\"image-20250319222721615\"></p>\n"},{"title":"刷题日记4.04","date":"2025-04-03T16:00:00.000Z","updated":"2025-04-03T16:00:00.000Z","_content":"继续stl\n\n# 1.CF808D Array Division\n\n## 题目描述\n\nVasya has an array $ a $ consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).\n\nInserting an element in the same position he was erased from is also considered moving.\n\nCan Vasya divide the array after choosing the right element to move and its new position?\n\n## 输入格式\n\nThe first line contains single integer *n* ( 1<=*n*<=100000 ) — the size of the array.\n\nThe second line contains *n* integers *a*1,*a*2... *a**n* ( 1<=*a**i*<=109 ) — the elements of the array.\n\n## 输出格式\n\nPrint YES if Vasya can divide the array after moving one element. Otherwise print NO.\n\n## 题意翻译\n\n给你一组数，问可以最多移动一个数，使得这一串数可以分成两个部分，每一部分所有数的和相等。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n3\n1 3 2\n```\n\n### 输出 #1\n\n```\nYES\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n5\n1 2 3 4 5\n```\n\n### 输出 #2\n\n```\nNO\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\n5\n2 2 3 4 5\n```\n\n### 输出 #3\n\n```\nYES\n```\n\n## 说明/提示\n\nIn the first example Vasya can move the second element to the end of the array.\n\nIn the second example no move can make the division possible.\n\nIn the third example Vasya can move the fourth element by one position to the left.\n\n## 今日题解：\n\n愚钝未想出好的解决办法，只会暴力，不写了肯定爆，我看了大佬的题解，以下是自己复现的（抄的 :-）。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nmap<ll, int> mapl, mapr;//表示左右区间分别包含的数\nbool flag=0;\nll sum;//sum表示前半数和，ans表示前缀和\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n;cin>>n;\n\tvector<ll> a(n+1);\n\tvector<ll> ans(n+1);\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i];\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tans[i]=ans[i-1]+a[i];\n\t\tmapr[a[i]]++;\n\t}\n\t\n\tif(ans[n] % 2 != 0) {\n\t\tcout<<\"NO\\n\";\n\t\treturn 0;\n\t}\n\tsum=ans[n]/2;\n\t\n\tfor(int i=1;i<n;++i) {\n\t\tif(ans[i]==sum) {\n\t\t\tcout<<\"YES\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\t//模拟切割，左半某数的个数加一，右半某数的个数减一\n\t\tmapl[a[i]]++;\n\t\tmapr[a[i]]--;\n\t\t//如果左半小于的数刚好在右半有，则可以\n\t\tif(ans[i]<sum && mapr[sum-ans[i]]) {\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(ans[i]>sum && mapl[ans[i]-sum]) {\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag) {\n\t\tcout<<\"YES\\n\";\n\t}\n\telse cout<<\"NO\\n\";\n\t\n    return 0;\n}\n\n```\n\n# 2.CF81A Plug-in\n\n## 题目描述\n\nPolycarp thinks about the meaning of life very often. He does this constantly, even when typing in the editor. Every time he starts brooding he can no longer fully concentrate and repeatedly presses the keys that need to be pressed only once. For example, instead of the phrase \"how are you\" he can type \"hhoow aaaare yyoouu\".\n\nPolycarp decided to automate the process of correcting such errors. He decided to write a plug-in to the text editor that will remove pairs of identical consecutive letters (if there are any in the text). Of course, this is not exactly what Polycarp needs, but he's got to start from something!\n\nHelp Polycarp and write the main plug-in module. Your program should remove from a string all pairs of identical letters, which are consecutive. If after the removal there appear new pairs, the program should remove them as well. Technically, its work should be equivalent to the following: while the string contains a pair of consecutive identical letters, the pair should be deleted. Note that deleting of the consecutive identical letters can be done in any order, as any order leads to the same result.\n\n## 输入格式\n\nThe input data consists of a single line to be processed. The length of the line is from 1 to 2⋅105 characters inclusive. The string contains only lowercase Latin letters.\n\n## 输出格式\n\nPrint the given string after it is processed. It is guaranteed that the result will contain at least one character.\n\n## 题意翻译\n\n给你一个仅由小写字母构成的字符串（字符串长度小于等于200000），求删除这个字符串里所有重复字串后的结果。\n\nUPD: 删除连续字母对，若删除后出现了新的字母对，也要删除。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\nhhoowaaaareyyoouu\n```\n\n### 输出 #1\n\n```\nwre\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\nreallazy\n```\n\n### 输出 #2\n\n```\nrezy\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\nabacabaabacabaa\n```\n\n### 输出 #3\n\n```\na\n```\n\n## 今日题解：\n\n算是水题，去重重复字符\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tstring s;\n\tcin>>s;\n\tvector<char> stk;\n\n\tfor(int i=0; i<s.size(); ++i) {\n\t\tif(!stk.empty()) {\n\t\t\tif(s[i]!=stk.back()) {\n\t\t\t\tstk.push_back(s[i]);\n\t\t\t}\n\t\t\telse stk.pop_back();\n\t\t}\n\t\telse stk.push_back(s[i]);\n\t}\n\tfor(auto c : stk) {\n\t\tcout<<c;\n\t}\n\n\treturn 0;\n}\n\n```\n\n# 3.CF821C Okabe and Boxes\n\n## 题目描述\n\nOkabe and Super Hacker Daru are stacking and removing boxes. There are *n* boxes numbered from 1 to *n* . Initially there are no boxes on the stack.\n\nOkabe, being a control freak, gives Daru 2*n* commands: *n* of which are to add a box to the top of the stack, and *n* of which are to remove a box from the top of the stack and throw it in the trash. Okabe wants Daru to throw away the boxes in the order from 1 to *n* . Of course, this means that it might be impossible for Daru to perform some of Okabe's remove commands, because the required box is not on the top of the stack.\n\nThat's why Daru can decide to wait until Okabe looks away and then reorder the boxes in the stack in any way he wants. He can do it at any point of time between Okabe's commands, but he can't add or remove boxes while he does it.\n\nTell Daru the minimum number of times he needs to reorder the boxes so that he can successfully complete all of Okabe's commands. It is guaranteed that every box is added before it is required to be removed.\n\n## 输入格式\n\nThe first line of input contains the integer *n* ( 1<=*n*<=3⋅105 ) — the number of boxes.\n\nEach of the next 2*n* lines of input starts with a string \"add\" or \"remove\". If the line starts with the \"add\", an integer *x* ( 1<=*x*<=*n* ) follows, indicating that Daru should add the box with number *x* to the top of the stack.\n\nIt is guaranteed that exactly *n* lines contain \"add\" operations, all the boxes added are distinct, and *n* lines contain \"remove\" operations. It is also guaranteed that a box is always added before it is required to be removed.\n\n## 输出格式\n\nPrint the minimum number of times Daru needs to reorder the boxes to successfully complete all of Okabe's commands.\n\n## 题意翻译\n\n`Okabe` 和 `Daru` 正在向一个栈中加入和删除盒子。盒子编号从 1 到 *n*，最开始栈中没有盒子。\n作为一个控制狂，`Okabe` 给了 `Daru` 2×*n* 个命令：*n* 个命令让他将某一个盒子加入栈中， *n* 个命令让他弹出栈顶。`Okabe` 希望弹出栈顶的盒子顺序是从 1 到 *n*。当然，这意味着，`Daru` 可能在他的命令下做不到按顺序弹出。\n但是 `Daru` 可以在两个命令之间调整整个栈中的盒子顺序。当然，这个时候他不能执行命令。\n`Daru` 想问你最少的调整次数。保证一个盒子在需要被弹出之前一定被加入过。\n*n*≤3×105\nBy:Call_me_Eric\n\n## 输入输出样例\n\n### 输入 #1\n\n```\n3\nadd 1\nremove\nadd 2\nadd 3\nremove\nremove\n```\n\n### 输出 #1\n\n```\n1\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n7\nadd 3\nadd 2\nadd 1\nremove\nadd 4\nremove\nremove\nremove\nadd 6\nadd 7\nadd 5\nremove\nremove\nremove\n```\n\n### 输出 #2\n\n```\n2\n```\n\n## 说明/提示\n\nIn the first sample, Daru should reorder the boxes after adding box 3 to the stack.\n\nIn the second sample, Daru should reorder the boxes after adding box 4 and box 7 to the stack.\n\n## 今天题解：\n\n加操作正常加即可，移除操作得判断是否可以顺序移除，top记录该移除的数，如果栈顶的元素不是该数，清空栈，操作数加一。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint n;cin>>n;\n\tstring s;\n\tint x;\n\tvector<int> v;\n\tint ans=0, top=0;\n\tfor(int i=0;i<(n<<1);++i) {\n\t\tcin>>s;\n\t\tif(s==\"add\") {\n\t\t\tcin>>x;\n\t\t\tv.push_back(x);\n\t\t}\n\t\telse {\n\t\t\ttop++;\n\t\t\tif(v.empty()){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(v.back()!=top) {\n\t\t\t\tans++;\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\telse v.pop_back();\n\t\t}\n\t\t\n\t}\n\tcout<<ans;\n    return 0;\n}\n\n```\n\n","source":"_posts/刷题日记4.04.md","raw":"---\ntitle: 刷题日记4.04\ndate: 2025-04-04\nupdated: 2025-04-04\ncategories: 算法\n---\n继续stl\n\n# 1.CF808D Array Division\n\n## 题目描述\n\nVasya has an array $ a $ consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).\n\nInserting an element in the same position he was erased from is also considered moving.\n\nCan Vasya divide the array after choosing the right element to move and its new position?\n\n## 输入格式\n\nThe first line contains single integer *n* ( 1<=*n*<=100000 ) — the size of the array.\n\nThe second line contains *n* integers *a*1,*a*2... *a**n* ( 1<=*a**i*<=109 ) — the elements of the array.\n\n## 输出格式\n\nPrint YES if Vasya can divide the array after moving one element. Otherwise print NO.\n\n## 题意翻译\n\n给你一组数，问可以最多移动一个数，使得这一串数可以分成两个部分，每一部分所有数的和相等。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n3\n1 3 2\n```\n\n### 输出 #1\n\n```\nYES\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n5\n1 2 3 4 5\n```\n\n### 输出 #2\n\n```\nNO\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\n5\n2 2 3 4 5\n```\n\n### 输出 #3\n\n```\nYES\n```\n\n## 说明/提示\n\nIn the first example Vasya can move the second element to the end of the array.\n\nIn the second example no move can make the division possible.\n\nIn the third example Vasya can move the fourth element by one position to the left.\n\n## 今日题解：\n\n愚钝未想出好的解决办法，只会暴力，不写了肯定爆，我看了大佬的题解，以下是自己复现的（抄的 :-）。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nmap<ll, int> mapl, mapr;//表示左右区间分别包含的数\nbool flag=0;\nll sum;//sum表示前半数和，ans表示前缀和\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n;cin>>n;\n\tvector<ll> a(n+1);\n\tvector<ll> ans(n+1);\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i];\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tans[i]=ans[i-1]+a[i];\n\t\tmapr[a[i]]++;\n\t}\n\t\n\tif(ans[n] % 2 != 0) {\n\t\tcout<<\"NO\\n\";\n\t\treturn 0;\n\t}\n\tsum=ans[n]/2;\n\t\n\tfor(int i=1;i<n;++i) {\n\t\tif(ans[i]==sum) {\n\t\t\tcout<<\"YES\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\t//模拟切割，左半某数的个数加一，右半某数的个数减一\n\t\tmapl[a[i]]++;\n\t\tmapr[a[i]]--;\n\t\t//如果左半小于的数刚好在右半有，则可以\n\t\tif(ans[i]<sum && mapr[sum-ans[i]]) {\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(ans[i]>sum && mapl[ans[i]-sum]) {\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(flag) {\n\t\tcout<<\"YES\\n\";\n\t}\n\telse cout<<\"NO\\n\";\n\t\n    return 0;\n}\n\n```\n\n# 2.CF81A Plug-in\n\n## 题目描述\n\nPolycarp thinks about the meaning of life very often. He does this constantly, even when typing in the editor. Every time he starts brooding he can no longer fully concentrate and repeatedly presses the keys that need to be pressed only once. For example, instead of the phrase \"how are you\" he can type \"hhoow aaaare yyoouu\".\n\nPolycarp decided to automate the process of correcting such errors. He decided to write a plug-in to the text editor that will remove pairs of identical consecutive letters (if there are any in the text). Of course, this is not exactly what Polycarp needs, but he's got to start from something!\n\nHelp Polycarp and write the main plug-in module. Your program should remove from a string all pairs of identical letters, which are consecutive. If after the removal there appear new pairs, the program should remove them as well. Technically, its work should be equivalent to the following: while the string contains a pair of consecutive identical letters, the pair should be deleted. Note that deleting of the consecutive identical letters can be done in any order, as any order leads to the same result.\n\n## 输入格式\n\nThe input data consists of a single line to be processed. The length of the line is from 1 to 2⋅105 characters inclusive. The string contains only lowercase Latin letters.\n\n## 输出格式\n\nPrint the given string after it is processed. It is guaranteed that the result will contain at least one character.\n\n## 题意翻译\n\n给你一个仅由小写字母构成的字符串（字符串长度小于等于200000），求删除这个字符串里所有重复字串后的结果。\n\nUPD: 删除连续字母对，若删除后出现了新的字母对，也要删除。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\nhhoowaaaareyyoouu\n```\n\n### 输出 #1\n\n```\nwre\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\nreallazy\n```\n\n### 输出 #2\n\n```\nrezy\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\nabacabaabacabaa\n```\n\n### 输出 #3\n\n```\na\n```\n\n## 今日题解：\n\n算是水题，去重重复字符\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tstring s;\n\tcin>>s;\n\tvector<char> stk;\n\n\tfor(int i=0; i<s.size(); ++i) {\n\t\tif(!stk.empty()) {\n\t\t\tif(s[i]!=stk.back()) {\n\t\t\t\tstk.push_back(s[i]);\n\t\t\t}\n\t\t\telse stk.pop_back();\n\t\t}\n\t\telse stk.push_back(s[i]);\n\t}\n\tfor(auto c : stk) {\n\t\tcout<<c;\n\t}\n\n\treturn 0;\n}\n\n```\n\n# 3.CF821C Okabe and Boxes\n\n## 题目描述\n\nOkabe and Super Hacker Daru are stacking and removing boxes. There are *n* boxes numbered from 1 to *n* . Initially there are no boxes on the stack.\n\nOkabe, being a control freak, gives Daru 2*n* commands: *n* of which are to add a box to the top of the stack, and *n* of which are to remove a box from the top of the stack and throw it in the trash. Okabe wants Daru to throw away the boxes in the order from 1 to *n* . Of course, this means that it might be impossible for Daru to perform some of Okabe's remove commands, because the required box is not on the top of the stack.\n\nThat's why Daru can decide to wait until Okabe looks away and then reorder the boxes in the stack in any way he wants. He can do it at any point of time between Okabe's commands, but he can't add or remove boxes while he does it.\n\nTell Daru the minimum number of times he needs to reorder the boxes so that he can successfully complete all of Okabe's commands. It is guaranteed that every box is added before it is required to be removed.\n\n## 输入格式\n\nThe first line of input contains the integer *n* ( 1<=*n*<=3⋅105 ) — the number of boxes.\n\nEach of the next 2*n* lines of input starts with a string \"add\" or \"remove\". If the line starts with the \"add\", an integer *x* ( 1<=*x*<=*n* ) follows, indicating that Daru should add the box with number *x* to the top of the stack.\n\nIt is guaranteed that exactly *n* lines contain \"add\" operations, all the boxes added are distinct, and *n* lines contain \"remove\" operations. It is also guaranteed that a box is always added before it is required to be removed.\n\n## 输出格式\n\nPrint the minimum number of times Daru needs to reorder the boxes to successfully complete all of Okabe's commands.\n\n## 题意翻译\n\n`Okabe` 和 `Daru` 正在向一个栈中加入和删除盒子。盒子编号从 1 到 *n*，最开始栈中没有盒子。\n作为一个控制狂，`Okabe` 给了 `Daru` 2×*n* 个命令：*n* 个命令让他将某一个盒子加入栈中， *n* 个命令让他弹出栈顶。`Okabe` 希望弹出栈顶的盒子顺序是从 1 到 *n*。当然，这意味着，`Daru` 可能在他的命令下做不到按顺序弹出。\n但是 `Daru` 可以在两个命令之间调整整个栈中的盒子顺序。当然，这个时候他不能执行命令。\n`Daru` 想问你最少的调整次数。保证一个盒子在需要被弹出之前一定被加入过。\n*n*≤3×105\nBy:Call_me_Eric\n\n## 输入输出样例\n\n### 输入 #1\n\n```\n3\nadd 1\nremove\nadd 2\nadd 3\nremove\nremove\n```\n\n### 输出 #1\n\n```\n1\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n7\nadd 3\nadd 2\nadd 1\nremove\nadd 4\nremove\nremove\nremove\nadd 6\nadd 7\nadd 5\nremove\nremove\nremove\n```\n\n### 输出 #2\n\n```\n2\n```\n\n## 说明/提示\n\nIn the first sample, Daru should reorder the boxes after adding box 3 to the stack.\n\nIn the second sample, Daru should reorder the boxes after adding box 4 and box 7 to the stack.\n\n## 今天题解：\n\n加操作正常加即可，移除操作得判断是否可以顺序移除，top记录该移除的数，如果栈顶的元素不是该数，清空栈，操作数加一。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint n;cin>>n;\n\tstring s;\n\tint x;\n\tvector<int> v;\n\tint ans=0, top=0;\n\tfor(int i=0;i<(n<<1);++i) {\n\t\tcin>>s;\n\t\tif(s==\"add\") {\n\t\t\tcin>>x;\n\t\t\tv.push_back(x);\n\t\t}\n\t\telse {\n\t\t\ttop++;\n\t\t\tif(v.empty()){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(v.back()!=top) {\n\t\t\t\tans++;\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\telse v.pop_back();\n\t\t}\n\t\t\n\t}\n\tcout<<ans;\n    return 0;\n}\n\n```\n\n","slug":"刷题日记4.04","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19ape000opoot955vdn9n","content":"<p>继续stl</p>\n<h1 id=\"1-CF808D-Array-Division\"><a href=\"#1-CF808D-Array-Division\" class=\"headerlink\" title=\"1.CF808D Array Division\"></a>1.CF808D Array Division</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Vasya has an array $ a $ consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).</p>\n<p>Inserting an element in the same position he was erased from is also considered moving.</p>\n<p>Can Vasya divide the array after choosing the right element to move and its new position?</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains single integer <em>n</em> ( 1&lt;&#x3D;<em>n</em>&lt;&#x3D;100000 ) — the size of the array.</p>\n<p>The second line contains <em>n</em> integers <em>a</em>1,<em>a</em>2… <em>a**n</em> ( 1&lt;&#x3D;<em>a**i</em>&lt;&#x3D;109 ) — the elements of the array.</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print YES if Vasya can divide the array after moving one element. Otherwise print NO.</p>\n<h2 id=\"题意翻译\"><a href=\"#题意翻译\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p>给你一组数，问可以最多移动一个数，使得这一串数可以分成两个部分，每一部分所有数的和相等。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">1 3 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1 2 3 4 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NO</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3\"><a href=\"#输入输出样例-3\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3\"><a href=\"#输入-3\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">2 2 3 4 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>In the first example Vasya can move the second element to the end of the array.</p>\n<p>In the second example no move can make the division possible.</p>\n<p>In the third example Vasya can move the fourth element by one position to the left.</p>\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>愚钝未想出好的解决办法，只会暴力，不写了肯定爆，我看了大佬的题解，以下是自己复现的（抄的 :-）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;ll, <span class=\"type\">int</span>&gt; mapl, mapr;<span class=\"comment\">//表示左右区间分别包含的数</span></span><br><span class=\"line\"><span class=\"type\">bool</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll sum;<span class=\"comment\">//sum表示前半数和，ans表示前缀和</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;ll&gt; <span class=\"title\">a</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;ll&gt; <span class=\"title\">ans</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tans[i]=ans[i<span class=\"number\">-1</span>]+a[i];</span><br><span class=\"line\">\t\tmapr[a[i]]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ans[n] % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;NO\\n&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum=ans[n]/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]==sum) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;YES\\n&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//模拟切割，左半某数的个数加一，右半某数的个数减一</span></span><br><span class=\"line\">\t\tmapl[a[i]]++;</span><br><span class=\"line\">\t\tmapr[a[i]]--;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左半小于的数刚好在右半有，则可以</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]&lt;sum &amp;&amp; mapr[sum-ans[i]]) &#123;</span><br><span class=\"line\">\t\t\tflag=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]&gt;sum &amp;&amp; mapl[ans[i]-sum]) &#123;</span><br><span class=\"line\">\t\t\tflag=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;YES\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;NO\\n&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-CF81A-Plug-in\"><a href=\"#2-CF81A-Plug-in\" class=\"headerlink\" title=\"2.CF81A Plug-in\"></a>2.CF81A Plug-in</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Polycarp thinks about the meaning of life very often. He does this constantly, even when typing in the editor. Every time he starts brooding he can no longer fully concentrate and repeatedly presses the keys that need to be pressed only once. For example, instead of the phrase “how are you” he can type “hhoow aaaare yyoouu”.</p>\n<p>Polycarp decided to automate the process of correcting such errors. He decided to write a plug-in to the text editor that will remove pairs of identical consecutive letters (if there are any in the text). Of course, this is not exactly what Polycarp needs, but he’s got to start from something!</p>\n<p>Help Polycarp and write the main plug-in module. Your program should remove from a string all pairs of identical letters, which are consecutive. If after the removal there appear new pairs, the program should remove them as well. Technically, its work should be equivalent to the following: while the string contains a pair of consecutive identical letters, the pair should be deleted. Note that deleting of the consecutive identical letters can be done in any order, as any order leads to the same result.</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The input data consists of a single line to be processed. The length of the line is from 1 to 2⋅105 characters inclusive. The string contains only lowercase Latin letters.</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print the given string after it is processed. It is guaranteed that the result will contain at least one character.</p>\n<h2 id=\"题意翻译-1\"><a href=\"#题意翻译-1\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p>给你一个仅由小写字母构成的字符串（字符串长度小于等于200000），求删除这个字符串里所有重复字串后的结果。</p>\n<p>UPD: 删除连续字母对，若删除后出现了新的字母对，也要删除。</p>\n<h2 id=\"输入输出样例-1-1\"><a href=\"#输入输出样例-1-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-1\"><a href=\"#输入-1-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hhoowaaaareyyoouu</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-1\"><a href=\"#输出-1-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wre</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-1\"><a href=\"#输入输出样例-2-1\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-1\"><a href=\"#输入-2-1\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reallazy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-1\"><a href=\"#输出-2-1\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rezy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3-1\"><a href=\"#输入输出样例-3-1\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3-1\"><a href=\"#输入-3-1\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abacabaabacabaa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3-1\"><a href=\"#输出-3-1\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：-1\"><a href=\"#今日题解：-1\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>算是水题，去重重复字符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring s;</span><br><span class=\"line\">\tcin&gt;&gt;s;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">char</span>&gt; stk;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!stk.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i]!=stk.<span class=\"built_in\">back</span>()) &#123;</span><br><span class=\"line\">\t\t\t\tstk.<span class=\"built_in\">push_back</span>(s[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> stk.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> stk.<span class=\"built_in\">push_back</span>(s[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> c : stk) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CF821C-Okabe-and-Boxes\"><a href=\"#3-CF821C-Okabe-and-Boxes\" class=\"headerlink\" title=\"3.CF821C Okabe and Boxes\"></a>3.CF821C Okabe and Boxes</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Okabe and Super Hacker Daru are stacking and removing boxes. There are <em>n</em> boxes numbered from 1 to <em>n</em> . Initially there are no boxes on the stack.</p>\n<p>Okabe, being a control freak, gives Daru 2<em>n</em> commands: <em>n</em> of which are to add a box to the top of the stack, and <em>n</em> of which are to remove a box from the top of the stack and throw it in the trash. Okabe wants Daru to throw away the boxes in the order from 1 to <em>n</em> . Of course, this means that it might be impossible for Daru to perform some of Okabe’s remove commands, because the required box is not on the top of the stack.</p>\n<p>That’s why Daru can decide to wait until Okabe looks away and then reorder the boxes in the stack in any way he wants. He can do it at any point of time between Okabe’s commands, but he can’t add or remove boxes while he does it.</p>\n<p>Tell Daru the minimum number of times he needs to reorder the boxes so that he can successfully complete all of Okabe’s commands. It is guaranteed that every box is added before it is required to be removed.</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line of input contains the integer <em>n</em> ( 1&lt;&#x3D;<em>n</em>&lt;&#x3D;3⋅105 ) — the number of boxes.</p>\n<p>Each of the next 2<em>n</em> lines of input starts with a string “add” or “remove”. If the line starts with the “add”, an integer <em>x</em> ( 1&lt;&#x3D;<em>x</em>&lt;&#x3D;<em>n</em> ) follows, indicating that Daru should add the box with number <em>x</em> to the top of the stack.</p>\n<p>It is guaranteed that exactly <em>n</em> lines contain “add” operations, all the boxes added are distinct, and <em>n</em> lines contain “remove” operations. It is also guaranteed that a box is always added before it is required to be removed.</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print the minimum number of times Daru needs to reorder the boxes to successfully complete all of Okabe’s commands.</p>\n<h2 id=\"题意翻译-2\"><a href=\"#题意翻译-2\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p><code>Okabe</code> 和 <code>Daru</code> 正在向一个栈中加入和删除盒子。盒子编号从 1 到 <em>n</em>，最开始栈中没有盒子。<br>作为一个控制狂，<code>Okabe</code> 给了 <code>Daru</code> 2×<em>n</em> 个命令：<em>n</em> 个命令让他将某一个盒子加入栈中， <em>n</em> 个命令让他弹出栈顶。<code>Okabe</code> 希望弹出栈顶的盒子顺序是从 1 到 <em>n</em>。当然，这意味着，<code>Daru</code> 可能在他的命令下做不到按顺序弹出。<br>但是 <code>Daru</code> 可以在两个命令之间调整整个栈中的盒子顺序。当然，这个时候他不能执行命令。<br><code>Daru</code> 想问你最少的调整次数。保证一个盒子在需要被弹出之前一定被加入过。<br><em>n</em>≤3×105<br>By:Call_me_Eric</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><h3 id=\"输入-1-2\"><a href=\"#输入-1-2\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">add 1</span><br><span class=\"line\">remove</span><br><span class=\"line\">add 2</span><br><span class=\"line\">add 3</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-2\"><a href=\"#输出-1-2\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-2\"><a href=\"#输入输出样例-2-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-2\"><a href=\"#输入-2-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br><span class=\"line\">add 3</span><br><span class=\"line\">add 2</span><br><span class=\"line\">add 1</span><br><span class=\"line\">remove</span><br><span class=\"line\">add 4</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br><span class=\"line\">add 6</span><br><span class=\"line\">add 7</span><br><span class=\"line\">add 5</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-2\"><a href=\"#输出-2-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>In the first sample, Daru should reorder the boxes after adding box 3 to the stack.</p>\n<p>In the second sample, Daru should reorder the boxes after adding box 4 and box 7 to the stack.</p>\n<h2 id=\"今天题解：\"><a href=\"#今天题解：\" class=\"headerlink\" title=\"今天题解：\"></a>今天题解：</h2><p>加操作正常加即可，移除操作得判断是否可以顺序移除，top记录该移除的数，如果栈顶的元素不是该数，清空栈，操作数加一。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\tstring s;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>, top=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;(n&lt;&lt;<span class=\"number\">1</span>);++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;add&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;x;</span><br><span class=\"line\">\t\t\tv.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttop++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(v.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(v.<span class=\"built_in\">back</span>()!=top) &#123;</span><br><span class=\"line\">\t\t\t\tans++;</span><br><span class=\"line\">\t\t\t\tv.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> v.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>继续stl</p>\n<h1 id=\"1-CF808D-Array-Division\"><a href=\"#1-CF808D-Array-Division\" class=\"headerlink\" title=\"1.CF808D Array Division\"></a>1.CF808D Array Division</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Vasya has an array $ a $ consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).</p>\n<p>Inserting an element in the same position he was erased from is also considered moving.</p>\n<p>Can Vasya divide the array after choosing the right element to move and its new position?</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains single integer <em>n</em> ( 1&lt;&#x3D;<em>n</em>&lt;&#x3D;100000 ) — the size of the array.</p>\n<p>The second line contains <em>n</em> integers <em>a</em>1,<em>a</em>2… <em>a**n</em> ( 1&lt;&#x3D;<em>a**i</em>&lt;&#x3D;109 ) — the elements of the array.</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print YES if Vasya can divide the array after moving one element. Otherwise print NO.</p>\n<h2 id=\"题意翻译\"><a href=\"#题意翻译\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p>给你一组数，问可以最多移动一个数，使得这一串数可以分成两个部分，每一部分所有数的和相等。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">1 3 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1 2 3 4 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NO</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3\"><a href=\"#输入输出样例-3\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3\"><a href=\"#输入-3\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">2 2 3 4 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>In the first example Vasya can move the second element to the end of the array.</p>\n<p>In the second example no move can make the division possible.</p>\n<p>In the third example Vasya can move the fourth element by one position to the left.</p>\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>愚钝未想出好的解决办法，只会暴力，不写了肯定爆，我看了大佬的题解，以下是自己复现的（抄的 :-）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;ll, <span class=\"type\">int</span>&gt; mapl, mapr;<span class=\"comment\">//表示左右区间分别包含的数</span></span><br><span class=\"line\"><span class=\"type\">bool</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">ll sum;<span class=\"comment\">//sum表示前半数和，ans表示前缀和</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;ll&gt; <span class=\"title\">a</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;ll&gt; <span class=\"title\">ans</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tans[i]=ans[i<span class=\"number\">-1</span>]+a[i];</span><br><span class=\"line\">\t\tmapr[a[i]]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ans[n] % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;NO\\n&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum=ans[n]/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]==sum) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;YES\\n&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//模拟切割，左半某数的个数加一，右半某数的个数减一</span></span><br><span class=\"line\">\t\tmapl[a[i]]++;</span><br><span class=\"line\">\t\tmapr[a[i]]--;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左半小于的数刚好在右半有，则可以</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]&lt;sum &amp;&amp; mapr[sum-ans[i]]) &#123;</span><br><span class=\"line\">\t\t\tflag=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]&gt;sum &amp;&amp; mapl[ans[i]-sum]) &#123;</span><br><span class=\"line\">\t\t\tflag=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;YES\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;NO\\n&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-CF81A-Plug-in\"><a href=\"#2-CF81A-Plug-in\" class=\"headerlink\" title=\"2.CF81A Plug-in\"></a>2.CF81A Plug-in</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Polycarp thinks about the meaning of life very often. He does this constantly, even when typing in the editor. Every time he starts brooding he can no longer fully concentrate and repeatedly presses the keys that need to be pressed only once. For example, instead of the phrase “how are you” he can type “hhoow aaaare yyoouu”.</p>\n<p>Polycarp decided to automate the process of correcting such errors. He decided to write a plug-in to the text editor that will remove pairs of identical consecutive letters (if there are any in the text). Of course, this is not exactly what Polycarp needs, but he’s got to start from something!</p>\n<p>Help Polycarp and write the main plug-in module. Your program should remove from a string all pairs of identical letters, which are consecutive. If after the removal there appear new pairs, the program should remove them as well. Technically, its work should be equivalent to the following: while the string contains a pair of consecutive identical letters, the pair should be deleted. Note that deleting of the consecutive identical letters can be done in any order, as any order leads to the same result.</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The input data consists of a single line to be processed. The length of the line is from 1 to 2⋅105 characters inclusive. The string contains only lowercase Latin letters.</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print the given string after it is processed. It is guaranteed that the result will contain at least one character.</p>\n<h2 id=\"题意翻译-1\"><a href=\"#题意翻译-1\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p>给你一个仅由小写字母构成的字符串（字符串长度小于等于200000），求删除这个字符串里所有重复字串后的结果。</p>\n<p>UPD: 删除连续字母对，若删除后出现了新的字母对，也要删除。</p>\n<h2 id=\"输入输出样例-1-1\"><a href=\"#输入输出样例-1-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-1\"><a href=\"#输入-1-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hhoowaaaareyyoouu</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-1\"><a href=\"#输出-1-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wre</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-1\"><a href=\"#输入输出样例-2-1\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-1\"><a href=\"#输入-2-1\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reallazy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-1\"><a href=\"#输出-2-1\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rezy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3-1\"><a href=\"#输入输出样例-3-1\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3-1\"><a href=\"#输入-3-1\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abacabaabacabaa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3-1\"><a href=\"#输出-3-1\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：-1\"><a href=\"#今日题解：-1\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>算是水题，去重重复字符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring s;</span><br><span class=\"line\">\tcin&gt;&gt;s;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">char</span>&gt; stk;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!stk.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i]!=stk.<span class=\"built_in\">back</span>()) &#123;</span><br><span class=\"line\">\t\t\t\tstk.<span class=\"built_in\">push_back</span>(s[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> stk.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> stk.<span class=\"built_in\">push_back</span>(s[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> c : stk) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CF821C-Okabe-and-Boxes\"><a href=\"#3-CF821C-Okabe-and-Boxes\" class=\"headerlink\" title=\"3.CF821C Okabe and Boxes\"></a>3.CF821C Okabe and Boxes</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Okabe and Super Hacker Daru are stacking and removing boxes. There are <em>n</em> boxes numbered from 1 to <em>n</em> . Initially there are no boxes on the stack.</p>\n<p>Okabe, being a control freak, gives Daru 2<em>n</em> commands: <em>n</em> of which are to add a box to the top of the stack, and <em>n</em> of which are to remove a box from the top of the stack and throw it in the trash. Okabe wants Daru to throw away the boxes in the order from 1 to <em>n</em> . Of course, this means that it might be impossible for Daru to perform some of Okabe’s remove commands, because the required box is not on the top of the stack.</p>\n<p>That’s why Daru can decide to wait until Okabe looks away and then reorder the boxes in the stack in any way he wants. He can do it at any point of time between Okabe’s commands, but he can’t add or remove boxes while he does it.</p>\n<p>Tell Daru the minimum number of times he needs to reorder the boxes so that he can successfully complete all of Okabe’s commands. It is guaranteed that every box is added before it is required to be removed.</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line of input contains the integer <em>n</em> ( 1&lt;&#x3D;<em>n</em>&lt;&#x3D;3⋅105 ) — the number of boxes.</p>\n<p>Each of the next 2<em>n</em> lines of input starts with a string “add” or “remove”. If the line starts with the “add”, an integer <em>x</em> ( 1&lt;&#x3D;<em>x</em>&lt;&#x3D;<em>n</em> ) follows, indicating that Daru should add the box with number <em>x</em> to the top of the stack.</p>\n<p>It is guaranteed that exactly <em>n</em> lines contain “add” operations, all the boxes added are distinct, and <em>n</em> lines contain “remove” operations. It is also guaranteed that a box is always added before it is required to be removed.</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print the minimum number of times Daru needs to reorder the boxes to successfully complete all of Okabe’s commands.</p>\n<h2 id=\"题意翻译-2\"><a href=\"#题意翻译-2\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p><code>Okabe</code> 和 <code>Daru</code> 正在向一个栈中加入和删除盒子。盒子编号从 1 到 <em>n</em>，最开始栈中没有盒子。<br>作为一个控制狂，<code>Okabe</code> 给了 <code>Daru</code> 2×<em>n</em> 个命令：<em>n</em> 个命令让他将某一个盒子加入栈中， <em>n</em> 个命令让他弹出栈顶。<code>Okabe</code> 希望弹出栈顶的盒子顺序是从 1 到 <em>n</em>。当然，这意味着，<code>Daru</code> 可能在他的命令下做不到按顺序弹出。<br>但是 <code>Daru</code> 可以在两个命令之间调整整个栈中的盒子顺序。当然，这个时候他不能执行命令。<br><code>Daru</code> 想问你最少的调整次数。保证一个盒子在需要被弹出之前一定被加入过。<br><em>n</em>≤3×105<br>By:Call_me_Eric</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><h3 id=\"输入-1-2\"><a href=\"#输入-1-2\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">add 1</span><br><span class=\"line\">remove</span><br><span class=\"line\">add 2</span><br><span class=\"line\">add 3</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-2\"><a href=\"#输出-1-2\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-2\"><a href=\"#输入输出样例-2-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-2\"><a href=\"#输入-2-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br><span class=\"line\">add 3</span><br><span class=\"line\">add 2</span><br><span class=\"line\">add 1</span><br><span class=\"line\">remove</span><br><span class=\"line\">add 4</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br><span class=\"line\">add 6</span><br><span class=\"line\">add 7</span><br><span class=\"line\">add 5</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br><span class=\"line\">remove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-2\"><a href=\"#输出-2-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>In the first sample, Daru should reorder the boxes after adding box 3 to the stack.</p>\n<p>In the second sample, Daru should reorder the boxes after adding box 4 and box 7 to the stack.</p>\n<h2 id=\"今天题解：\"><a href=\"#今天题解：\" class=\"headerlink\" title=\"今天题解：\"></a>今天题解：</h2><p>加操作正常加即可，移除操作得判断是否可以顺序移除，top记录该移除的数，如果栈顶的元素不是该数，清空栈，操作数加一。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\tstring s;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans=<span class=\"number\">0</span>, top=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;(n&lt;&lt;<span class=\"number\">1</span>);++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;add&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;x;</span><br><span class=\"line\">\t\t\tv.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttop++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(v.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(v.<span class=\"built_in\">back</span>()!=top) &#123;</span><br><span class=\"line\">\t\t\t\tans++;</span><br><span class=\"line\">\t\t\t\tv.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> v.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"刷题日记4.03","date":"2025-04-02T16:00:00.000Z","updated":"2025-04-02T16:00:00.000Z","_content":"\n今天继续stl的简单应用\n\n# 1.CF4C Registration system\n\n## 题目描述\n\n### 题目背景\n\n一个名为 \"Berlanddesk\" 的电子邮件系统即将在 Berland 上线运营。该电子邮件系统的管理员希望整个系统的建设可以尽早完成，因此他们找到了资深程序员您，希望您能够为他们开发一个用户注册系统的原型产品。\n\n该系统的运行遵循以下原则:\n\n新用户注册时，他将向系统发送一则内容为其用户名的请求，如果该用户名尚未存在于系统数据库内，则将该用户名插入数据库，同时用户得到回应信息 ```OK``` 表示其已经成功注册。如果用户请求的用户名已经存在于数据库内，那么系统将产生一个新的用户名并将其加入数据库。新用户名由用户请求的用户名与正整数 $i$ 构成，$i$ 为使 \"用户名i\" 尚未存在于数据库内的最小的 $i$。\n\n## 输入格式\n\n第一行一个整数 $n(1 \\le n \\le 10^5)$。接下来 $n$ 行，每行表示用户向系统发出的一则请求。每行内容均非空且均为由至多 $32$ 个小写拉丁字母组成的字符串。\n\n## 输出格式\n\n$n$ 行，每行表示系统对一则请求做出的回应。如果该用户名尚未存在于系统数据库内，则输出 ```OK``` 。如果用户请求的用户名已经被注册，则输出依照规则生成的新用户名。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n4\nabacaba\nacaba\nabacaba\nacab\n```\n\n### 输出 #1\n\n```\nOK\nOK\nabacaba1\nOK\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n6\nfirst\nfirst\nsecond\nsecond\nthird\nthird\n```\n\n### 输出 #2\n\n```\nOK\nfirst1\nOK\nsecond1\nOK\nthird1\n```\n\n## 今日题解\n\n大体思路是set保存一份原始的，map记录出现次数。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nset<string> st;\nmap<string, int> mp;\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint n;cin>>n;\n\twhile(n--) {\n\t\tstring s;cin>>s;\n\t\t//如果已存在\n\t\tif(st.find(s)!=st.end()) {\n\t\t\tmp[s]++;\n\t\t\ts+=to_string(mp[s]);\n\t\t\tcout<<s<<'\\n';\n\t\t}\n\t\telse {\n\t\t\tmp[s]=0;\n\t\t\tst.insert(s);\n\t\t\tcout<<\"OK\\n\";\t\n\t\t}\n\t}\n    return 0;\n}\n\n```\n\n# 2.CF69E Subsegments\n\n## 题目描述\n\nProgrammer Sasha has recently begun to study data structures. His coach Stas told him to solve the problem of finding a minimum on the segment of the array in ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF69E/8d33f6dbc21a91477b8c6a86185f0b1fd0e74ad4.png), which Sasha coped with. For Sasha not to think that he had learned all, Stas gave him a new task. For each segment of the fixed length Sasha must find the maximum element of those that occur on the given segment exactly once. Help Sasha solve this problem.\n\n## 输入格式\n\nThe first line contains two positive integers $ n $ and $ k $ ( $ 1<=n<=10^{5},1<=k<=n $ ) — the number of array elements and the length of the segment.\n\nThen follow $ n $ lines: the $ i $ -th one contains a single number $ a_{i} $ ( $ -10^{9}<=a_{i}<=10^{9} $ ).\n\n## 输出格式\n\nPrint $ n–k+1 $ numbers, one per line: on the $ i $ -th line print of the maximum number of those numbers from the subarray $ a_{i} $ $ a_{i+1} $ … $ a_{i+k-1} $ that occur in this subarray exactly 1 time. If there are no such numbers in this subarray, print \"Nothing\".\n\n## 题意翻译\n\n对于固定长度的每个数列，Sasha必须找到在给定数列上出现的元素的最大值。帮Sasha解决这个问题。\n\n第一行两个整数*n* 和*k* (1≤*n*≤105,1≤*k*≤*n*),表示数组元素的数目和数列的长度。\n\n然后 *n* 行，第 *i* 行包含一个数字*a**i*(−109≤*a**i*≤109)\n\n输出 *n*−*k*+1 个数，每行输出一个数，第*i*行输出以为*i*为起点，长度为*k*的数列中的最大值。\n\n并且在*a**i**a**i*+1.....*a**i*+*k*−1,中每个数只能出现一次(重复视为没有元素)，如果数列中没有元素，输出*N**o**t**hin**g*。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n5 3\n1\n2\n2\n3\n3\n```\n\n### 输出 #1\n\n```\n1\n3\n2\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n6 4\n3\n3\n3\n4\n4\n2\n```\n\n### 输出 #2\n\n```\n4\nNothing\n3\n```\n\n## 今日题解：\n\n写了两份，一份是暴力，一份是滑动窗口\n\n暴力：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tint n, k;\n\tcin>>n>>k;\n\tvector<int> a(n+1);\n\tfor(int i=1; i<=n; ++i) {\n\t\tcin>>a[i];\n\t}\n\n\tunordered_map<int, int> count;\n\tmultiset<int> uniqueMax;\n\n\tfor(int i=1; i<=n-k+1; ++i) {\n\t\tfor(int j=i; j<=i+k-1; ++j) {\n\t\t\tcount[a[j]]++;\n\t\t\tif(count[a[j]]==1) {\n\t\t\t\tuniqueMax.insert(a[j]);\n\t\t\t}\n\t\t\tif(count[a[j]]==2) {\n\t\t\t\tuniqueMax.erase(uniqueMax.find(a[j]));\n\t\t\t}\n\t\t}\n\t\tif(!uniqueMax.empty()) {\n\t\t\tcout<< *uniqueMax.rbegin()<<\"\\n\";//输出最大数\n\t\t\tuniqueMax.clear();\n\t\t} else cout<<\"Nothing\\n\";\n\t\tcount.clear();\n\t}\n\treturn 0;\n}\n```\n\n滑动窗口：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tint n, k;\n\tcin>>n>>k;\n\tvector<int> a(n+1);\n\tfor(int i=1; i<=n; ++i) {\n\t\tcin>>a[i];\n\t}\n\n\tunordered_map<int, int> count;\n\tmultiset<int> uniqueMax;\n\t\n\t//初始化\n\tfor(int i=1; i<=k;++i) {\n\t\tcount[a[i]]++;\n\t\tif(count[a[i]]==1) {\n\t\t\tuniqueMax.insert(a[i]);\n\t\t}\n\t\tif(count[a[i]]==2) {//重复则删\n\t\t\tuniqueMax.erase(uniqueMax.find(a[i]));\n\t\t}\n\t}\n\t\t\n\t//后续滑动窗口\n\tfor(int i=1;i<=n-k+1;++i) {\n\t\t\n\t\tif(uniqueMax.empty()) {\n\t\t\tcout<<\"Nothing\\n\";\n\t\t}\n\t\telse cout<< *uniqueMax.rbegin() << '\\n';\n\t\t\n\t\t\n\t\tif(i<n-k+1) {\n\t\t\t//移除前一个，如果发现移除了元素使符合条件，则需加入\n\t\t\tcount[a[i]]--;\n\t\t\tif(count[a[i]]==1) {\n\t\t\t\tuniqueMax.insert(a[i]);\n\t\t\t}\n\t\t\tif(count[a[i]]==0 ){//如果已无一个在窗口中，则移除\n\t\t\t\tuniqueMax.erase(uniqueMax.find(a[i]));\n\t\t\t}\n\t\t\t//向前扩展一个\n\t\t\tcount[a[i+k]]++;\n\t\t\tif(count[a[i+k]]==1) {\n\t\t\t\tuniqueMax.insert(a[i+k]);\n\t\t\t}\n\t\t\tif(count[a[i+k]]==2) {\n\t\t\t\tuniqueMax.erase(uniqueMax.find(a[i+k]));\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\n\treturn 0;\n}\n```\n\n# 3.CF78A Haiku\n\n## 题目描述\n\nHaiku is a genre of Japanese traditional poetry.\n\nA haiku poem consists of 17 syllables split into three phrases, containing 5, 7 and 5 syllables correspondingly (the first phrase should contain exactly 5 syllables, the second phrase should contain exactly 7 syllables, and the third phrase should contain exactly 5 syllables). A haiku masterpiece contains a description of a moment in those three phrases. Every word is important in a small poem, which is why haiku are rich with symbols. Each word has a special meaning, a special role. The main principle of haiku is to say much using a few words.\n\nTo simplify the matter, in the given problem we will consider that the number of syllable in the phrase is equal to the number of vowel letters there. Only the following letters are regarded as vowel letters: \"a\", \"e\", \"i\", \"o\" and \"u\".\n\nThree phases from a certain poem are given. Determine whether it is haiku or not.\n\n## 输入格式\n\nThe input data consists of three lines. The length of each line is between $ 1 $ and $ 100 $ , inclusive. The $ i $ -th line contains the $ i $ -th phrase of the poem. Each phrase consists of one or more words, which are separated by one or more spaces. A word is a non-empty sequence of lowercase Latin letters. Leading and/or trailing spaces in phrases are allowed. Every phrase has at least one non-space character. See the example for clarification.\n\n## 输出格式\n\nPrint \"YES\" (without the quotes) if the poem is a haiku. Otherwise, print \"NO\" (also without the quotes).\n\n## 题意翻译\n\n**题目大意：**\n\nHaiku是日本传统诗歌的一种流派。\n\n这种诗歌由三个短句组成，共有17个音节。\n\n其中，第一个短句有5个音节，第二个短句有7个音节，第三个短句有5个音节。\n\n为了简化问题，短句的音节数视为这个短句中的元音字母数。\n\n只有以下字母被视为元音字母：“a”，“e”，“i”，“o”和“u”。\n\n任务：给出一首诗，判断它是不是Haiku。\n\n**INPUT:**\n\n输入数据由三行组成。每行长度在1~100之间，由小写英文字母组成。允许有空格前缀或空格后缀。每个短句中至少有一个小写字母。\n\n**OUTPUT:**\n\n如果这首诗是Haiku，输出“YES”，否则输出“NO”。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\non  codeforces \nbeta round is running\n   a rustling of keys\n```\n\n### 输出 #1\n\n```\nYES\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\nhow many gallons\nof edo s rain did you drink\n                                cuckoo\n```\n\n### 输出 #2\n\n```\nNO\n```\n\n## 今天题解：\n\n水题，考察getline的使用：getline（cin, 变量）\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nint pd(string s) {\n\tint sum=0;\n\tfor(int i=0;i<s.size();++i) {\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')sum++;\t\t\n\t}\n\treturn sum;\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tstring s1, s2, s3;\n\tgetline(cin, s1);\n\tgetline(cin, s2);\n\tgetline(cin, s3);\n\tif(pd(s1)==5 && pd(s2)==7 && pd(s3)==5){\n\t\tcout<<\"YES\\n\";\n\t}\n\telse cout<<\"NO\\n\";\n\t\n    return 0;\n}\n\n```\n\n# 4.CF799B T-shirt buying\n\n## 题目描述\n\nA new pack of $ n $ t-shirts came to a shop. Each of the t-shirts is characterized by three integers $ p_{i} $ , $ a_{i} $ and $ b_{i} $ , where $ p_{i} $ is the price of the $ i $ -th t-shirt, $ a_{i} $ is front color of the $ i $ -th t-shirt and $ b_{i} $ is back color of the $ i $ -th t-shirt. All values $ p_{i} $ are distinct, and values $ a_{i} $ and $ b_{i} $ are integers from $ 1 $ to $ 3 $ .\n\n $ m $ buyers will come to the shop. Each of them wants to buy exactly one t-shirt. For the $ j $ -th buyer we know his favorite color $ c_{j} $ .\n\nA buyer agrees to buy a t-shirt, if at least one side (front or back) is painted in his favorite color. Among all t-shirts that have colors acceptable to this buyer he will choose the cheapest one. If there are no such t-shirts, the buyer won't buy anything. Assume that the buyers come one by one, and each buyer is served only after the previous one is served.\n\nYou are to compute the prices each buyer will pay for t-shirts.\n\n## 输入格式\n\nThe first line contains single integer $ n $ ( $ 1<=n<=200000 $ ) — the number of t-shirts.\n\nThe following line contains sequence of integers $ p_{1},p_{2},...,p_{n} $ ( $ 1<=p_{i}<=1000000000 $ ), where $ p_{i} $ equals to the price of the $ i $ -th t-shirt.\n\nThe following line contains sequence of integers $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=3 $ ), where $ a_{i} $ equals to the front color of the $ i $ -th t-shirt.\n\nThe following line contains sequence of integers $ b_{1},b_{2},...,b_{n} $ ( $ 1<=b_{i}<=3 $ ), where $ b_{i} $ equals to the back color of the $ i $ -th t-shirt.\n\nThe next line contains single integer $ m $ ( $ 1<=m<=200000 $ ) — the number of buyers.\n\nThe following line contains sequence $ c_{1},c_{2},...,c_{m} $ ( $ 1<=c_{j}<=3 $ ), where $ c_{j} $ equals to the favorite color of the $ j $ -th buyer. The buyers will come to the shop in the order they are given in the input. Each buyer is served only after the previous one is served.\n\n## 输出格式\n\nPrint to the first line $ m $ integers — the $ j $ -th integer should be equal to the price of the t-shirt which the $ j $ -th buyer will buy. If the $ j $ -th buyer won't buy anything, print -1.\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n5\n300 200 400 500 911\n1 2 1 2 3\n2 1 3 2 1\n6\n2 3 1 2 1 1\n```\n\n### 输出 #1\n\n```\n200 400 300 500 911 -1\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n2\n1000000000 1\n1 1\n1 2\n2\n2 1\n```\n\n### 输出 #2\n\n```\n1 1000000000\n```\n\n## 今日题解：\n\n我只想到暴力实现，看题解尝试写出优先队列的实现方式。\n\n暴力：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nstruct cloth {\n\tint a;\n\tint b;\n\tint price;\n};\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tint n;\n\tcin>>n;\n\tvector<cloth> c(n);\n\n\tfor(int i=0; i<n; i++) {\n\t\tcin >> c[i].price;\n\t}\n\tfor(int i=0; i<n; i++) {\n\t\tcin >> c[i].a;\n\t}\n\tfor(int i=0; i<n; i++) {\n\t\tcin >> c[i].b;\n\t}\n\n\tint m;\n\tcin>>m;\n\tvector<int> buy(m);\n\n\tfor(int i=0; i<m; ++i)cin>>buy[i];\n\n\tfor(int i=0; i<m; ++i) {\n\t\tint minn=1000000001;\n\t\tint index=-1;\n\t\tfor(int j=0; j<c.size(); ++j) {\n\t\t\tif(buy[i] == c[j].a || buy[i] == c[j].b) {\n\t\t\t\tif(minn>c[j].price) {\n\t\t\t\t\tindex=j;\n\t\t\t\t\tminn=c[j].price;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(index!=-1) {\n\t\t\tcout<<minn<<'\\n';\n\t\t\tc.erase(c.begin()+index);\n\t\t} else cout<<\"-1\\n\";\n\t}\n\treturn 0;\n}\n\n```\n\n优先队列版：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 200009;\n\nint n, m, x, p[N];\npriority_queue<pair<int, int> > Q[5];//前者存价格，后者存序号\nbool vis[N];//真就表示卖出了\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)cin>>p[i];\n\t//分别在不同的颜色类别里存衣服\n\tfor(int i=1;i<=n;++i)cin>>x, Q[x].push({-p[i], i});//前面颜色\t\n\tfor(int i=1;i<=n;++i)cin>>x, Q[x].push({-p[i], i});//后面颜色\n\t\n\tcin>>m;\n\twhile(m--) {\n\t\tcin>>x;\n\t\twhile( !Q[x].empty() && vis[Q[x].top().second]) {\n\t\t\tQ[x].pop();//如果此序号的衣服已卖出就在这种颜色衣服队列弹出\n\t\t}\n\t\tif(Q[x].empty()) {//剩下没卖出的\n\t\t\tcout<<\"-1 \";\n\t\t}\n\t\telse {\n\t\t\tcout<< -Q[x].top().first <<' ';\n\t\t\tvis[Q[x].top().second]=true;//标记此序号衣服已卖出\n\t\t\tQ[x].pop();//此颜色衣服队列中弹出此衣服\n\t\t}\n\t}\n\t\n    return 0;\n}\n\n```\n\n## 总结\n\n第一题考察map的使用，第二题考察滑动窗口。","source":"_posts/刷题日记4.03.md","raw":"---\ntitle: 刷题日记4.03\ndate: 2025-04-03\nupdated: 2025-04-03\ncategories: 算法\n---\n\n今天继续stl的简单应用\n\n# 1.CF4C Registration system\n\n## 题目描述\n\n### 题目背景\n\n一个名为 \"Berlanddesk\" 的电子邮件系统即将在 Berland 上线运营。该电子邮件系统的管理员希望整个系统的建设可以尽早完成，因此他们找到了资深程序员您，希望您能够为他们开发一个用户注册系统的原型产品。\n\n该系统的运行遵循以下原则:\n\n新用户注册时，他将向系统发送一则内容为其用户名的请求，如果该用户名尚未存在于系统数据库内，则将该用户名插入数据库，同时用户得到回应信息 ```OK``` 表示其已经成功注册。如果用户请求的用户名已经存在于数据库内，那么系统将产生一个新的用户名并将其加入数据库。新用户名由用户请求的用户名与正整数 $i$ 构成，$i$ 为使 \"用户名i\" 尚未存在于数据库内的最小的 $i$。\n\n## 输入格式\n\n第一行一个整数 $n(1 \\le n \\le 10^5)$。接下来 $n$ 行，每行表示用户向系统发出的一则请求。每行内容均非空且均为由至多 $32$ 个小写拉丁字母组成的字符串。\n\n## 输出格式\n\n$n$ 行，每行表示系统对一则请求做出的回应。如果该用户名尚未存在于系统数据库内，则输出 ```OK``` 。如果用户请求的用户名已经被注册，则输出依照规则生成的新用户名。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n4\nabacaba\nacaba\nabacaba\nacab\n```\n\n### 输出 #1\n\n```\nOK\nOK\nabacaba1\nOK\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n6\nfirst\nfirst\nsecond\nsecond\nthird\nthird\n```\n\n### 输出 #2\n\n```\nOK\nfirst1\nOK\nsecond1\nOK\nthird1\n```\n\n## 今日题解\n\n大体思路是set保存一份原始的，map记录出现次数。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nset<string> st;\nmap<string, int> mp;\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint n;cin>>n;\n\twhile(n--) {\n\t\tstring s;cin>>s;\n\t\t//如果已存在\n\t\tif(st.find(s)!=st.end()) {\n\t\t\tmp[s]++;\n\t\t\ts+=to_string(mp[s]);\n\t\t\tcout<<s<<'\\n';\n\t\t}\n\t\telse {\n\t\t\tmp[s]=0;\n\t\t\tst.insert(s);\n\t\t\tcout<<\"OK\\n\";\t\n\t\t}\n\t}\n    return 0;\n}\n\n```\n\n# 2.CF69E Subsegments\n\n## 题目描述\n\nProgrammer Sasha has recently begun to study data structures. His coach Stas told him to solve the problem of finding a minimum on the segment of the array in ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF69E/8d33f6dbc21a91477b8c6a86185f0b1fd0e74ad4.png), which Sasha coped with. For Sasha not to think that he had learned all, Stas gave him a new task. For each segment of the fixed length Sasha must find the maximum element of those that occur on the given segment exactly once. Help Sasha solve this problem.\n\n## 输入格式\n\nThe first line contains two positive integers $ n $ and $ k $ ( $ 1<=n<=10^{5},1<=k<=n $ ) — the number of array elements and the length of the segment.\n\nThen follow $ n $ lines: the $ i $ -th one contains a single number $ a_{i} $ ( $ -10^{9}<=a_{i}<=10^{9} $ ).\n\n## 输出格式\n\nPrint $ n–k+1 $ numbers, one per line: on the $ i $ -th line print of the maximum number of those numbers from the subarray $ a_{i} $ $ a_{i+1} $ … $ a_{i+k-1} $ that occur in this subarray exactly 1 time. If there are no such numbers in this subarray, print \"Nothing\".\n\n## 题意翻译\n\n对于固定长度的每个数列，Sasha必须找到在给定数列上出现的元素的最大值。帮Sasha解决这个问题。\n\n第一行两个整数*n* 和*k* (1≤*n*≤105,1≤*k*≤*n*),表示数组元素的数目和数列的长度。\n\n然后 *n* 行，第 *i* 行包含一个数字*a**i*(−109≤*a**i*≤109)\n\n输出 *n*−*k*+1 个数，每行输出一个数，第*i*行输出以为*i*为起点，长度为*k*的数列中的最大值。\n\n并且在*a**i**a**i*+1.....*a**i*+*k*−1,中每个数只能出现一次(重复视为没有元素)，如果数列中没有元素，输出*N**o**t**hin**g*。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n5 3\n1\n2\n2\n3\n3\n```\n\n### 输出 #1\n\n```\n1\n3\n2\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n6 4\n3\n3\n3\n4\n4\n2\n```\n\n### 输出 #2\n\n```\n4\nNothing\n3\n```\n\n## 今日题解：\n\n写了两份，一份是暴力，一份是滑动窗口\n\n暴力：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tint n, k;\n\tcin>>n>>k;\n\tvector<int> a(n+1);\n\tfor(int i=1; i<=n; ++i) {\n\t\tcin>>a[i];\n\t}\n\n\tunordered_map<int, int> count;\n\tmultiset<int> uniqueMax;\n\n\tfor(int i=1; i<=n-k+1; ++i) {\n\t\tfor(int j=i; j<=i+k-1; ++j) {\n\t\t\tcount[a[j]]++;\n\t\t\tif(count[a[j]]==1) {\n\t\t\t\tuniqueMax.insert(a[j]);\n\t\t\t}\n\t\t\tif(count[a[j]]==2) {\n\t\t\t\tuniqueMax.erase(uniqueMax.find(a[j]));\n\t\t\t}\n\t\t}\n\t\tif(!uniqueMax.empty()) {\n\t\t\tcout<< *uniqueMax.rbegin()<<\"\\n\";//输出最大数\n\t\t\tuniqueMax.clear();\n\t\t} else cout<<\"Nothing\\n\";\n\t\tcount.clear();\n\t}\n\treturn 0;\n}\n```\n\n滑动窗口：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tint n, k;\n\tcin>>n>>k;\n\tvector<int> a(n+1);\n\tfor(int i=1; i<=n; ++i) {\n\t\tcin>>a[i];\n\t}\n\n\tunordered_map<int, int> count;\n\tmultiset<int> uniqueMax;\n\t\n\t//初始化\n\tfor(int i=1; i<=k;++i) {\n\t\tcount[a[i]]++;\n\t\tif(count[a[i]]==1) {\n\t\t\tuniqueMax.insert(a[i]);\n\t\t}\n\t\tif(count[a[i]]==2) {//重复则删\n\t\t\tuniqueMax.erase(uniqueMax.find(a[i]));\n\t\t}\n\t}\n\t\t\n\t//后续滑动窗口\n\tfor(int i=1;i<=n-k+1;++i) {\n\t\t\n\t\tif(uniqueMax.empty()) {\n\t\t\tcout<<\"Nothing\\n\";\n\t\t}\n\t\telse cout<< *uniqueMax.rbegin() << '\\n';\n\t\t\n\t\t\n\t\tif(i<n-k+1) {\n\t\t\t//移除前一个，如果发现移除了元素使符合条件，则需加入\n\t\t\tcount[a[i]]--;\n\t\t\tif(count[a[i]]==1) {\n\t\t\t\tuniqueMax.insert(a[i]);\n\t\t\t}\n\t\t\tif(count[a[i]]==0 ){//如果已无一个在窗口中，则移除\n\t\t\t\tuniqueMax.erase(uniqueMax.find(a[i]));\n\t\t\t}\n\t\t\t//向前扩展一个\n\t\t\tcount[a[i+k]]++;\n\t\t\tif(count[a[i+k]]==1) {\n\t\t\t\tuniqueMax.insert(a[i+k]);\n\t\t\t}\n\t\t\tif(count[a[i+k]]==2) {\n\t\t\t\tuniqueMax.erase(uniqueMax.find(a[i+k]));\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\n\treturn 0;\n}\n```\n\n# 3.CF78A Haiku\n\n## 题目描述\n\nHaiku is a genre of Japanese traditional poetry.\n\nA haiku poem consists of 17 syllables split into three phrases, containing 5, 7 and 5 syllables correspondingly (the first phrase should contain exactly 5 syllables, the second phrase should contain exactly 7 syllables, and the third phrase should contain exactly 5 syllables). A haiku masterpiece contains a description of a moment in those three phrases. Every word is important in a small poem, which is why haiku are rich with symbols. Each word has a special meaning, a special role. The main principle of haiku is to say much using a few words.\n\nTo simplify the matter, in the given problem we will consider that the number of syllable in the phrase is equal to the number of vowel letters there. Only the following letters are regarded as vowel letters: \"a\", \"e\", \"i\", \"o\" and \"u\".\n\nThree phases from a certain poem are given. Determine whether it is haiku or not.\n\n## 输入格式\n\nThe input data consists of three lines. The length of each line is between $ 1 $ and $ 100 $ , inclusive. The $ i $ -th line contains the $ i $ -th phrase of the poem. Each phrase consists of one or more words, which are separated by one or more spaces. A word is a non-empty sequence of lowercase Latin letters. Leading and/or trailing spaces in phrases are allowed. Every phrase has at least one non-space character. See the example for clarification.\n\n## 输出格式\n\nPrint \"YES\" (without the quotes) if the poem is a haiku. Otherwise, print \"NO\" (also without the quotes).\n\n## 题意翻译\n\n**题目大意：**\n\nHaiku是日本传统诗歌的一种流派。\n\n这种诗歌由三个短句组成，共有17个音节。\n\n其中，第一个短句有5个音节，第二个短句有7个音节，第三个短句有5个音节。\n\n为了简化问题，短句的音节数视为这个短句中的元音字母数。\n\n只有以下字母被视为元音字母：“a”，“e”，“i”，“o”和“u”。\n\n任务：给出一首诗，判断它是不是Haiku。\n\n**INPUT:**\n\n输入数据由三行组成。每行长度在1~100之间，由小写英文字母组成。允许有空格前缀或空格后缀。每个短句中至少有一个小写字母。\n\n**OUTPUT:**\n\n如果这首诗是Haiku，输出“YES”，否则输出“NO”。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\non  codeforces \nbeta round is running\n   a rustling of keys\n```\n\n### 输出 #1\n\n```\nYES\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\nhow many gallons\nof edo s rain did you drink\n                                cuckoo\n```\n\n### 输出 #2\n\n```\nNO\n```\n\n## 今天题解：\n\n水题，考察getline的使用：getline（cin, 变量）\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nint pd(string s) {\n\tint sum=0;\n\tfor(int i=0;i<s.size();++i) {\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')sum++;\t\t\n\t}\n\treturn sum;\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tstring s1, s2, s3;\n\tgetline(cin, s1);\n\tgetline(cin, s2);\n\tgetline(cin, s3);\n\tif(pd(s1)==5 && pd(s2)==7 && pd(s3)==5){\n\t\tcout<<\"YES\\n\";\n\t}\n\telse cout<<\"NO\\n\";\n\t\n    return 0;\n}\n\n```\n\n# 4.CF799B T-shirt buying\n\n## 题目描述\n\nA new pack of $ n $ t-shirts came to a shop. Each of the t-shirts is characterized by three integers $ p_{i} $ , $ a_{i} $ and $ b_{i} $ , where $ p_{i} $ is the price of the $ i $ -th t-shirt, $ a_{i} $ is front color of the $ i $ -th t-shirt and $ b_{i} $ is back color of the $ i $ -th t-shirt. All values $ p_{i} $ are distinct, and values $ a_{i} $ and $ b_{i} $ are integers from $ 1 $ to $ 3 $ .\n\n $ m $ buyers will come to the shop. Each of them wants to buy exactly one t-shirt. For the $ j $ -th buyer we know his favorite color $ c_{j} $ .\n\nA buyer agrees to buy a t-shirt, if at least one side (front or back) is painted in his favorite color. Among all t-shirts that have colors acceptable to this buyer he will choose the cheapest one. If there are no such t-shirts, the buyer won't buy anything. Assume that the buyers come one by one, and each buyer is served only after the previous one is served.\n\nYou are to compute the prices each buyer will pay for t-shirts.\n\n## 输入格式\n\nThe first line contains single integer $ n $ ( $ 1<=n<=200000 $ ) — the number of t-shirts.\n\nThe following line contains sequence of integers $ p_{1},p_{2},...,p_{n} $ ( $ 1<=p_{i}<=1000000000 $ ), where $ p_{i} $ equals to the price of the $ i $ -th t-shirt.\n\nThe following line contains sequence of integers $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=3 $ ), where $ a_{i} $ equals to the front color of the $ i $ -th t-shirt.\n\nThe following line contains sequence of integers $ b_{1},b_{2},...,b_{n} $ ( $ 1<=b_{i}<=3 $ ), where $ b_{i} $ equals to the back color of the $ i $ -th t-shirt.\n\nThe next line contains single integer $ m $ ( $ 1<=m<=200000 $ ) — the number of buyers.\n\nThe following line contains sequence $ c_{1},c_{2},...,c_{m} $ ( $ 1<=c_{j}<=3 $ ), where $ c_{j} $ equals to the favorite color of the $ j $ -th buyer. The buyers will come to the shop in the order they are given in the input. Each buyer is served only after the previous one is served.\n\n## 输出格式\n\nPrint to the first line $ m $ integers — the $ j $ -th integer should be equal to the price of the t-shirt which the $ j $ -th buyer will buy. If the $ j $ -th buyer won't buy anything, print -1.\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n5\n300 200 400 500 911\n1 2 1 2 3\n2 1 3 2 1\n6\n2 3 1 2 1 1\n```\n\n### 输出 #1\n\n```\n200 400 300 500 911 -1\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n2\n1000000000 1\n1 1\n1 2\n2\n2 1\n```\n\n### 输出 #2\n\n```\n1 1000000000\n```\n\n## 今日题解：\n\n我只想到暴力实现，看题解尝试写出优先队列的实现方式。\n\n暴力：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nstruct cloth {\n\tint a;\n\tint b;\n\tint price;\n};\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tint n;\n\tcin>>n;\n\tvector<cloth> c(n);\n\n\tfor(int i=0; i<n; i++) {\n\t\tcin >> c[i].price;\n\t}\n\tfor(int i=0; i<n; i++) {\n\t\tcin >> c[i].a;\n\t}\n\tfor(int i=0; i<n; i++) {\n\t\tcin >> c[i].b;\n\t}\n\n\tint m;\n\tcin>>m;\n\tvector<int> buy(m);\n\n\tfor(int i=0; i<m; ++i)cin>>buy[i];\n\n\tfor(int i=0; i<m; ++i) {\n\t\tint minn=1000000001;\n\t\tint index=-1;\n\t\tfor(int j=0; j<c.size(); ++j) {\n\t\t\tif(buy[i] == c[j].a || buy[i] == c[j].b) {\n\t\t\t\tif(minn>c[j].price) {\n\t\t\t\t\tindex=j;\n\t\t\t\t\tminn=c[j].price;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(index!=-1) {\n\t\t\tcout<<minn<<'\\n';\n\t\t\tc.erase(c.begin()+index);\n\t\t} else cout<<\"-1\\n\";\n\t}\n\treturn 0;\n}\n\n```\n\n优先队列版：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 200009;\n\nint n, m, x, p[N];\npriority_queue<pair<int, int> > Q[5];//前者存价格，后者存序号\nbool vis[N];//真就表示卖出了\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)cin>>p[i];\n\t//分别在不同的颜色类别里存衣服\n\tfor(int i=1;i<=n;++i)cin>>x, Q[x].push({-p[i], i});//前面颜色\t\n\tfor(int i=1;i<=n;++i)cin>>x, Q[x].push({-p[i], i});//后面颜色\n\t\n\tcin>>m;\n\twhile(m--) {\n\t\tcin>>x;\n\t\twhile( !Q[x].empty() && vis[Q[x].top().second]) {\n\t\t\tQ[x].pop();//如果此序号的衣服已卖出就在这种颜色衣服队列弹出\n\t\t}\n\t\tif(Q[x].empty()) {//剩下没卖出的\n\t\t\tcout<<\"-1 \";\n\t\t}\n\t\telse {\n\t\t\tcout<< -Q[x].top().first <<' ';\n\t\t\tvis[Q[x].top().second]=true;//标记此序号衣服已卖出\n\t\t\tQ[x].pop();//此颜色衣服队列中弹出此衣服\n\t\t}\n\t}\n\t\n    return 0;\n}\n\n```\n\n## 总结\n\n第一题考察map的使用，第二题考察滑动窗口。","slug":"刷题日记4.03","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apf000spootb2i25dec","content":"<p>今天继续stl的简单应用</p>\n<h1 id=\"1-CF4C-Registration-system\"><a href=\"#1-CF4C-Registration-system\" class=\"headerlink\" title=\"1.CF4C Registration system\"></a>1.CF4C Registration system</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><h3 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h3><p>一个名为 “Berlanddesk” 的电子邮件系统即将在 Berland 上线运营。该电子邮件系统的管理员希望整个系统的建设可以尽早完成，因此他们找到了资深程序员您，希望您能够为他们开发一个用户注册系统的原型产品。</p>\n<p>该系统的运行遵循以下原则:</p>\n<p>新用户注册时，他将向系统发送一则内容为其用户名的请求，如果该用户名尚未存在于系统数据库内，则将该用户名插入数据库，同时用户得到回应信息 <code>OK</code> 表示其已经成功注册。如果用户请求的用户名已经存在于数据库内，那么系统将产生一个新的用户名并将其加入数据库。新用户名由用户请求的用户名与正整数 $i$ 构成，$i$ 为使 “用户名i” 尚未存在于数据库内的最小的 $i$。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行一个整数 $n(1 \\le n \\le 10^5)$。接下来 $n$ 行，每行表示用户向系统发出的一则请求。每行内容均非空且均为由至多 $32$ 个小写拉丁字母组成的字符串。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>$n$ 行，每行表示系统对一则请求做出的回应。如果该用户名尚未存在于系统数据库内，则输出 <code>OK</code> 。如果用户请求的用户名已经被注册，则输出依照规则生成的新用户名。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">abacaba</span><br><span class=\"line\">acaba</span><br><span class=\"line\">abacaba</span><br><span class=\"line\">acab</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OK</span><br><span class=\"line\">OK</span><br><span class=\"line\">abacaba1</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">first</span><br><span class=\"line\">first</span><br><span class=\"line\">second</span><br><span class=\"line\">second</span><br><span class=\"line\">third</span><br><span class=\"line\">third</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OK</span><br><span class=\"line\">first1</span><br><span class=\"line\">OK</span><br><span class=\"line\">second1</span><br><span class=\"line\">OK</span><br><span class=\"line\">third1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解\"><a href=\"#今日题解\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>大体思路是set保存一份原始的，map记录出现次数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">set&lt;string&gt; st;</span><br><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\tstring s;cin&gt;&gt;s;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果已存在</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(st.<span class=\"built_in\">find</span>(s)!=st.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t\tmp[s]++;</span><br><span class=\"line\">\t\t\ts+=<span class=\"built_in\">to_string</span>(mp[s]);</span><br><span class=\"line\">\t\t\tcout&lt;&lt;s&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tmp[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tst.<span class=\"built_in\">insert</span>(s);</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;OK\\n&quot;</span>;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-CF69E-Subsegments\"><a href=\"#2-CF69E-Subsegments\" class=\"headerlink\" title=\"2.CF69E Subsegments\"></a>2.CF69E Subsegments</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Programmer Sasha has recently begun to study data structures. His coach Stas told him to solve the problem of finding a minimum on the segment of the array in <img src=\"https://cdn.luogu.com.cn/upload/vjudge_pic/CF69E/8d33f6dbc21a91477b8c6a86185f0b1fd0e74ad4.png\">, which Sasha coped with. For Sasha not to think that he had learned all, Stas gave him a new task. For each segment of the fixed length Sasha must find the maximum element of those that occur on the given segment exactly once. Help Sasha solve this problem.</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains two positive integers $ n $ and $ k $ ( $ 1&lt;&#x3D;n&lt;&#x3D;10^{5},1&lt;&#x3D;k&lt;&#x3D;n $ ) — the number of array elements and the length of the segment.</p>\n<p>Then follow $ n $ lines: the $ i $ -th one contains a single number $ a_{i} $ ( $ -10^{9}&lt;&#x3D;a_{i}&lt;&#x3D;10^{9} $ ).</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print $ n–k+1 $ numbers, one per line: on the $ i $ -th line print of the maximum number of those numbers from the subarray $ a_{i} $ $ a_{i+1} $ … $ a_{i+k-1} $ that occur in this subarray exactly 1 time. If there are no such numbers in this subarray, print “Nothing”.</p>\n<h2 id=\"题意翻译\"><a href=\"#题意翻译\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p>对于固定长度的每个数列，Sasha必须找到在给定数列上出现的元素的最大值。帮Sasha解决这个问题。</p>\n<p>第一行两个整数<em>n</em> 和<em>k</em> (1≤<em>n</em>≤105,1≤<em>k</em>≤<em>n</em>),表示数组元素的数目和数列的长度。</p>\n<p>然后 <em>n</em> 行，第 <em>i</em> 行包含一个数字<em>a**i</em>(−109≤<em>a**i</em>≤109)</p>\n<p>输出 <em>n</em>−<em>k</em>+1 个数，每行输出一个数，第<em>i</em>行输出以为<em>i</em>为起点，长度为<em>k</em>的数列中的最大值。</p>\n<p>并且在<em>a<strong>i</strong>a**i</em>+1…..<em>a**i</em>+<em>k</em>−1,中每个数只能出现一次(重复视为没有元素)，如果数列中没有元素，输出<em>N<strong>o</strong>t<strong>hin</strong>g</em>。</p>\n<h2 id=\"输入输出样例-1-1\"><a href=\"#输入输出样例-1-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-1\"><a href=\"#输入-1-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-1\"><a href=\"#输出-1-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-1\"><a href=\"#输入输出样例-2-1\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-1\"><a href=\"#输入-2-1\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 4</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">4</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-1\"><a href=\"#输出-2-1\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">Nothing</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>写了两份，一份是暴力，一份是滑动窗口</p>\n<p>暴力：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n, k;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; count;</span><br><span class=\"line\">\tmultiset&lt;<span class=\"type\">int</span>&gt; uniqueMax;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n-k<span class=\"number\">+1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i; j&lt;=i+k<span class=\"number\">-1</span>; ++j) &#123;</span><br><span class=\"line\">\t\t\tcount[a[j]]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[j]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[j]]==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[j]));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!uniqueMax.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt; *uniqueMax.<span class=\"built_in\">rbegin</span>()&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;<span class=\"comment\">//输出最大数</span></span><br><span class=\"line\">\t\t\tuniqueMax.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;Nothing\\n&quot;</span>;</span><br><span class=\"line\">\t\tcount.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>滑动窗口：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n, k;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; count;</span><br><span class=\"line\">\tmultiset&lt;<span class=\"type\">int</span>&gt; uniqueMax;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=k;++i) &#123;</span><br><span class=\"line\">\t\tcount[a[i]]++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">2</span>) &#123;<span class=\"comment\">//重复则删</span></span><br><span class=\"line\">\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//后续滑动窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n-k<span class=\"number\">+1</span>;++i) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(uniqueMax.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;Nothing\\n&quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> cout&lt;&lt; *uniqueMax.<span class=\"built_in\">rbegin</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i&lt;n-k<span class=\"number\">+1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//移除前一个，如果发现移除了元素使符合条件，则需加入</span></span><br><span class=\"line\">\t\t\tcount[a[i]]--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">0</span> )&#123;<span class=\"comment\">//如果已无一个在窗口中，则移除</span></span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[i]));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//向前扩展一个</span></span><br><span class=\"line\">\t\t\tcount[a[i+k]]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i+k]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[i+k]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i+k]]==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[i+k]));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CF78A-Haiku\"><a href=\"#3-CF78A-Haiku\" class=\"headerlink\" title=\"3.CF78A Haiku\"></a>3.CF78A Haiku</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Haiku is a genre of Japanese traditional poetry.</p>\n<p>A haiku poem consists of 17 syllables split into three phrases, containing 5, 7 and 5 syllables correspondingly (the first phrase should contain exactly 5 syllables, the second phrase should contain exactly 7 syllables, and the third phrase should contain exactly 5 syllables). A haiku masterpiece contains a description of a moment in those three phrases. Every word is important in a small poem, which is why haiku are rich with symbols. Each word has a special meaning, a special role. The main principle of haiku is to say much using a few words.</p>\n<p>To simplify the matter, in the given problem we will consider that the number of syllable in the phrase is equal to the number of vowel letters there. Only the following letters are regarded as vowel letters: “a”, “e”, “i”, “o” and “u”.</p>\n<p>Three phases from a certain poem are given. Determine whether it is haiku or not.</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The input data consists of three lines. The length of each line is between $ 1 $ and $ 100 $ , inclusive. The $ i $ -th line contains the $ i $ -th phrase of the poem. Each phrase consists of one or more words, which are separated by one or more spaces. A word is a non-empty sequence of lowercase Latin letters. Leading and&#x2F;or trailing spaces in phrases are allowed. Every phrase has at least one non-space character. See the example for clarification.</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print “YES” (without the quotes) if the poem is a haiku. Otherwise, print “NO” (also without the quotes).</p>\n<h2 id=\"题意翻译-1\"><a href=\"#题意翻译-1\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p><strong>题目大意：</strong></p>\n<p>Haiku是日本传统诗歌的一种流派。</p>\n<p>这种诗歌由三个短句组成，共有17个音节。</p>\n<p>其中，第一个短句有5个音节，第二个短句有7个音节，第三个短句有5个音节。</p>\n<p>为了简化问题，短句的音节数视为这个短句中的元音字母数。</p>\n<p>只有以下字母被视为元音字母：“a”，“e”，“i”，“o”和“u”。</p>\n<p>任务：给出一首诗，判断它是不是Haiku。</p>\n<p><strong>INPUT:</strong></p>\n<p>输入数据由三行组成。每行长度在1~100之间，由小写英文字母组成。允许有空格前缀或空格后缀。每个短句中至少有一个小写字母。</p>\n<p><strong>OUTPUT:</strong></p>\n<p>如果这首诗是Haiku，输出“YES”，否则输出“NO”。</p>\n<h2 id=\"输入输出样例-1-2\"><a href=\"#输入输出样例-1-2\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-2\"><a href=\"#输入-1-2\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on  codeforces </span><br><span class=\"line\">beta round is running</span><br><span class=\"line\">   a rustling of keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-2\"><a href=\"#输出-1-2\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-2\"><a href=\"#输入输出样例-2-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-2\"><a href=\"#输入-2-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">how many gallons</span><br><span class=\"line\">of edo s rain did you drink</span><br><span class=\"line\">                                cuckoo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-2\"><a href=\"#输出-2-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NO</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今天题解：\"><a href=\"#今天题解：\" class=\"headerlink\" title=\"今天题解：\"></a>今天题解：</h2><p>水题，考察getline的使用：getline（cin, 变量）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pd</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;a&#x27;</span>||s[i]==<span class=\"string\">&#x27;e&#x27;</span>||s[i]==<span class=\"string\">&#x27;i&#x27;</span>||s[i]==<span class=\"string\">&#x27;o&#x27;</span>||s[i]==<span class=\"string\">&#x27;u&#x27;</span>)sum++;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstring s1, s2, s3;</span><br><span class=\"line\">\t<span class=\"built_in\">getline</span>(cin, s1);</span><br><span class=\"line\">\t<span class=\"built_in\">getline</span>(cin, s2);</span><br><span class=\"line\">\t<span class=\"built_in\">getline</span>(cin, s3);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">pd</span>(s1)==<span class=\"number\">5</span> &amp;&amp; <span class=\"built_in\">pd</span>(s2)==<span class=\"number\">7</span> &amp;&amp; <span class=\"built_in\">pd</span>(s3)==<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;YES\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;NO\\n&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-CF799B-T-shirt-buying\"><a href=\"#4-CF799B-T-shirt-buying\" class=\"headerlink\" title=\"4.CF799B T-shirt buying\"></a>4.CF799B T-shirt buying</h1><h2 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>A new pack of $ n $ t-shirts came to a shop. Each of the t-shirts is characterized by three integers $ p_{i} $ , $ a_{i} $ and $ b_{i} $ , where $ p_{i} $ is the price of the $ i $ -th t-shirt, $ a_{i} $ is front color of the $ i $ -th t-shirt and $ b_{i} $ is back color of the $ i $ -th t-shirt. All values $ p_{i} $ are distinct, and values $ a_{i} $ and $ b_{i} $ are integers from $ 1 $ to $ 3 $ .</p>\n<p> $ m $ buyers will come to the shop. Each of them wants to buy exactly one t-shirt. For the $ j $ -th buyer we know his favorite color $ c_{j} $ .</p>\n<p>A buyer agrees to buy a t-shirt, if at least one side (front or back) is painted in his favorite color. Among all t-shirts that have colors acceptable to this buyer he will choose the cheapest one. If there are no such t-shirts, the buyer won’t buy anything. Assume that the buyers come one by one, and each buyer is served only after the previous one is served.</p>\n<p>You are to compute the prices each buyer will pay for t-shirts.</p>\n<h2 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains single integer $ n $ ( $ 1&lt;&#x3D;n&lt;&#x3D;200000 $ ) — the number of t-shirts.</p>\n<p>The following line contains sequence of integers $ p_{1},p_{2},…,p_{n} $ ( $ 1&lt;&#x3D;p_{i}&lt;&#x3D;1000000000 $ ), where $ p_{i} $ equals to the price of the $ i $ -th t-shirt.</p>\n<p>The following line contains sequence of integers $ a_{1},a_{2},…,a_{n} $ ( $ 1&lt;&#x3D;a_{i}&lt;&#x3D;3 $ ), where $ a_{i} $ equals to the front color of the $ i $ -th t-shirt.</p>\n<p>The following line contains sequence of integers $ b_{1},b_{2},…,b_{n} $ ( $ 1&lt;&#x3D;b_{i}&lt;&#x3D;3 $ ), where $ b_{i} $ equals to the back color of the $ i $ -th t-shirt.</p>\n<p>The next line contains single integer $ m $ ( $ 1&lt;&#x3D;m&lt;&#x3D;200000 $ ) — the number of buyers.</p>\n<p>The following line contains sequence $ c_{1},c_{2},…,c_{m} $ ( $ 1&lt;&#x3D;c_{j}&lt;&#x3D;3 $ ), where $ c_{j} $ equals to the favorite color of the $ j $ -th buyer. The buyers will come to the shop in the order they are given in the input. Each buyer is served only after the previous one is served.</p>\n<h2 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print to the first line $ m $ integers — the $ j $ -th integer should be equal to the price of the t-shirt which the $ j $ -th buyer will buy. If the $ j $ -th buyer won’t buy anything, print -1.</p>\n<h2 id=\"输入输出样例-1-3\"><a href=\"#输入输出样例-1-3\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-3\"><a href=\"#输入-1-3\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">300 200 400 500 911</span><br><span class=\"line\">1 2 1 2 3</span><br><span class=\"line\">2 1 3 2 1</span><br><span class=\"line\">6</span><br><span class=\"line\">2 3 1 2 1 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-3\"><a href=\"#输出-1-3\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200 400 300 500 911 -1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-3\"><a href=\"#输入输出样例-2-3\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-3\"><a href=\"#输入-2-3\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1000000000 1</span><br><span class=\"line\">1 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2</span><br><span class=\"line\">2 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-3\"><a href=\"#输出-2-3\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1000000000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：-1\"><a href=\"#今日题解：-1\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>我只想到暴力实现，看题解尝试写出优先队列的实现方式。</p>\n<p>暴力：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">cloth</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;cloth&gt; <span class=\"title\">c</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; c[i].price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; c[i].a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; c[i].b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> m;</span><br><span class=\"line\">\tcin&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">buy</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;m; ++i)cin&gt;&gt;buy[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> minn=<span class=\"number\">1000000001</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> index=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;c.<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(buy[i] == c[j].a || buy[i] == c[j].b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(minn&gt;c[j].price) &#123;</span><br><span class=\"line\">\t\t\t\t\tindex=j;</span><br><span class=\"line\">\t\t\t\t\tminn=c[j].price;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index!=<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;minn&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t\tc.<span class=\"built_in\">erase</span>(c.<span class=\"built_in\">begin</span>()+index);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;-1\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>优先队列版：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200009</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m, x, p[N];</span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &gt; Q[<span class=\"number\">5</span>];<span class=\"comment\">//前者存价格，后者存序号</span></span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];<span class=\"comment\">//真就表示卖出了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)cin&gt;&gt;p[i];</span><br><span class=\"line\">\t<span class=\"comment\">//分别在不同的颜色类别里存衣服</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)cin&gt;&gt;x, Q[x].<span class=\"built_in\">push</span>(&#123;-p[i], i&#125;);<span class=\"comment\">//前面颜色\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)cin&gt;&gt;x, Q[x].<span class=\"built_in\">push</span>(&#123;-p[i], i&#125;);<span class=\"comment\">//后面颜色</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( !Q[x].<span class=\"built_in\">empty</span>() &amp;&amp; vis[Q[x].<span class=\"built_in\">top</span>().second]) &#123;</span><br><span class=\"line\">\t\t\tQ[x].<span class=\"built_in\">pop</span>();<span class=\"comment\">//如果此序号的衣服已卖出就在这种颜色衣服队列弹出</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(Q[x].<span class=\"built_in\">empty</span>()) &#123;<span class=\"comment\">//剩下没卖出的</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;-1 &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt; -Q[x].<span class=\"built_in\">top</span>().first &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t\t\tvis[Q[x].<span class=\"built_in\">top</span>().second]=<span class=\"literal\">true</span>;<span class=\"comment\">//标记此序号衣服已卖出</span></span><br><span class=\"line\">\t\t\tQ[x].<span class=\"built_in\">pop</span>();<span class=\"comment\">//此颜色衣服队列中弹出此衣服</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>第一题考察map的使用，第二题考察滑动窗口。</p>\n","excerpt":"","more":"<p>今天继续stl的简单应用</p>\n<h1 id=\"1-CF4C-Registration-system\"><a href=\"#1-CF4C-Registration-system\" class=\"headerlink\" title=\"1.CF4C Registration system\"></a>1.CF4C Registration system</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><h3 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h3><p>一个名为 “Berlanddesk” 的电子邮件系统即将在 Berland 上线运营。该电子邮件系统的管理员希望整个系统的建设可以尽早完成，因此他们找到了资深程序员您，希望您能够为他们开发一个用户注册系统的原型产品。</p>\n<p>该系统的运行遵循以下原则:</p>\n<p>新用户注册时，他将向系统发送一则内容为其用户名的请求，如果该用户名尚未存在于系统数据库内，则将该用户名插入数据库，同时用户得到回应信息 <code>OK</code> 表示其已经成功注册。如果用户请求的用户名已经存在于数据库内，那么系统将产生一个新的用户名并将其加入数据库。新用户名由用户请求的用户名与正整数 $i$ 构成，$i$ 为使 “用户名i” 尚未存在于数据库内的最小的 $i$。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行一个整数 $n(1 \\le n \\le 10^5)$。接下来 $n$ 行，每行表示用户向系统发出的一则请求。每行内容均非空且均为由至多 $32$ 个小写拉丁字母组成的字符串。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>$n$ 行，每行表示系统对一则请求做出的回应。如果该用户名尚未存在于系统数据库内，则输出 <code>OK</code> 。如果用户请求的用户名已经被注册，则输出依照规则生成的新用户名。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">abacaba</span><br><span class=\"line\">acaba</span><br><span class=\"line\">abacaba</span><br><span class=\"line\">acab</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OK</span><br><span class=\"line\">OK</span><br><span class=\"line\">abacaba1</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">first</span><br><span class=\"line\">first</span><br><span class=\"line\">second</span><br><span class=\"line\">second</span><br><span class=\"line\">third</span><br><span class=\"line\">third</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OK</span><br><span class=\"line\">first1</span><br><span class=\"line\">OK</span><br><span class=\"line\">second1</span><br><span class=\"line\">OK</span><br><span class=\"line\">third1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解\"><a href=\"#今日题解\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>大体思路是set保存一份原始的，map记录出现次数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">set&lt;string&gt; st;</span><br><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\tstring s;cin&gt;&gt;s;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果已存在</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(st.<span class=\"built_in\">find</span>(s)!=st.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t\tmp[s]++;</span><br><span class=\"line\">\t\t\ts+=<span class=\"built_in\">to_string</span>(mp[s]);</span><br><span class=\"line\">\t\t\tcout&lt;&lt;s&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tmp[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tst.<span class=\"built_in\">insert</span>(s);</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;OK\\n&quot;</span>;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-CF69E-Subsegments\"><a href=\"#2-CF69E-Subsegments\" class=\"headerlink\" title=\"2.CF69E Subsegments\"></a>2.CF69E Subsegments</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Programmer Sasha has recently begun to study data structures. His coach Stas told him to solve the problem of finding a minimum on the segment of the array in <img src=\"https://cdn.luogu.com.cn/upload/vjudge_pic/CF69E/8d33f6dbc21a91477b8c6a86185f0b1fd0e74ad4.png\">, which Sasha coped with. For Sasha not to think that he had learned all, Stas gave him a new task. For each segment of the fixed length Sasha must find the maximum element of those that occur on the given segment exactly once. Help Sasha solve this problem.</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains two positive integers $ n $ and $ k $ ( $ 1&lt;&#x3D;n&lt;&#x3D;10^{5},1&lt;&#x3D;k&lt;&#x3D;n $ ) — the number of array elements and the length of the segment.</p>\n<p>Then follow $ n $ lines: the $ i $ -th one contains a single number $ a_{i} $ ( $ -10^{9}&lt;&#x3D;a_{i}&lt;&#x3D;10^{9} $ ).</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print $ n–k+1 $ numbers, one per line: on the $ i $ -th line print of the maximum number of those numbers from the subarray $ a_{i} $ $ a_{i+1} $ … $ a_{i+k-1} $ that occur in this subarray exactly 1 time. If there are no such numbers in this subarray, print “Nothing”.</p>\n<h2 id=\"题意翻译\"><a href=\"#题意翻译\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p>对于固定长度的每个数列，Sasha必须找到在给定数列上出现的元素的最大值。帮Sasha解决这个问题。</p>\n<p>第一行两个整数<em>n</em> 和<em>k</em> (1≤<em>n</em>≤105,1≤<em>k</em>≤<em>n</em>),表示数组元素的数目和数列的长度。</p>\n<p>然后 <em>n</em> 行，第 <em>i</em> 行包含一个数字<em>a**i</em>(−109≤<em>a**i</em>≤109)</p>\n<p>输出 <em>n</em>−<em>k</em>+1 个数，每行输出一个数，第<em>i</em>行输出以为<em>i</em>为起点，长度为<em>k</em>的数列中的最大值。</p>\n<p>并且在<em>a<strong>i</strong>a**i</em>+1…..<em>a**i</em>+<em>k</em>−1,中每个数只能出现一次(重复视为没有元素)，如果数列中没有元素，输出<em>N<strong>o</strong>t<strong>hin</strong>g</em>。</p>\n<h2 id=\"输入输出样例-1-1\"><a href=\"#输入输出样例-1-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-1\"><a href=\"#输入-1-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-1\"><a href=\"#输出-1-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-1\"><a href=\"#输入输出样例-2-1\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-1\"><a href=\"#输入-2-1\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 4</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">4</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-1\"><a href=\"#输出-2-1\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">Nothing</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>写了两份，一份是暴力，一份是滑动窗口</p>\n<p>暴力：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n, k;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; count;</span><br><span class=\"line\">\tmultiset&lt;<span class=\"type\">int</span>&gt; uniqueMax;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n-k<span class=\"number\">+1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i; j&lt;=i+k<span class=\"number\">-1</span>; ++j) &#123;</span><br><span class=\"line\">\t\t\tcount[a[j]]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[j]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[j]]==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[j]));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!uniqueMax.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt; *uniqueMax.<span class=\"built_in\">rbegin</span>()&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;<span class=\"comment\">//输出最大数</span></span><br><span class=\"line\">\t\t\tuniqueMax.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;Nothing\\n&quot;</span>;</span><br><span class=\"line\">\t\tcount.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>滑动窗口：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n, k;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n<span class=\"number\">+1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; count;</span><br><span class=\"line\">\tmultiset&lt;<span class=\"type\">int</span>&gt; uniqueMax;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=k;++i) &#123;</span><br><span class=\"line\">\t\tcount[a[i]]++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">2</span>) &#123;<span class=\"comment\">//重复则删</span></span><br><span class=\"line\">\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//后续滑动窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n-k<span class=\"number\">+1</span>;++i) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(uniqueMax.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;Nothing\\n&quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> cout&lt;&lt; *uniqueMax.<span class=\"built_in\">rbegin</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i&lt;n-k<span class=\"number\">+1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//移除前一个，如果发现移除了元素使符合条件，则需加入</span></span><br><span class=\"line\">\t\t\tcount[a[i]]--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i]]==<span class=\"number\">0</span> )&#123;<span class=\"comment\">//如果已无一个在窗口中，则移除</span></span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[i]));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//向前扩展一个</span></span><br><span class=\"line\">\t\t\tcount[a[i+k]]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i+k]]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">insert</span>(a[i+k]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count[a[i+k]]==<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\tuniqueMax.<span class=\"built_in\">erase</span>(uniqueMax.<span class=\"built_in\">find</span>(a[i+k]));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CF78A-Haiku\"><a href=\"#3-CF78A-Haiku\" class=\"headerlink\" title=\"3.CF78A Haiku\"></a>3.CF78A Haiku</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Haiku is a genre of Japanese traditional poetry.</p>\n<p>A haiku poem consists of 17 syllables split into three phrases, containing 5, 7 and 5 syllables correspondingly (the first phrase should contain exactly 5 syllables, the second phrase should contain exactly 7 syllables, and the third phrase should contain exactly 5 syllables). A haiku masterpiece contains a description of a moment in those three phrases. Every word is important in a small poem, which is why haiku are rich with symbols. Each word has a special meaning, a special role. The main principle of haiku is to say much using a few words.</p>\n<p>To simplify the matter, in the given problem we will consider that the number of syllable in the phrase is equal to the number of vowel letters there. Only the following letters are regarded as vowel letters: “a”, “e”, “i”, “o” and “u”.</p>\n<p>Three phases from a certain poem are given. Determine whether it is haiku or not.</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The input data consists of three lines. The length of each line is between $ 1 $ and $ 100 $ , inclusive. The $ i $ -th line contains the $ i $ -th phrase of the poem. Each phrase consists of one or more words, which are separated by one or more spaces. A word is a non-empty sequence of lowercase Latin letters. Leading and&#x2F;or trailing spaces in phrases are allowed. Every phrase has at least one non-space character. See the example for clarification.</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print “YES” (without the quotes) if the poem is a haiku. Otherwise, print “NO” (also without the quotes).</p>\n<h2 id=\"题意翻译-1\"><a href=\"#题意翻译-1\" class=\"headerlink\" title=\"题意翻译\"></a>题意翻译</h2><p><strong>题目大意：</strong></p>\n<p>Haiku是日本传统诗歌的一种流派。</p>\n<p>这种诗歌由三个短句组成，共有17个音节。</p>\n<p>其中，第一个短句有5个音节，第二个短句有7个音节，第三个短句有5个音节。</p>\n<p>为了简化问题，短句的音节数视为这个短句中的元音字母数。</p>\n<p>只有以下字母被视为元音字母：“a”，“e”，“i”，“o”和“u”。</p>\n<p>任务：给出一首诗，判断它是不是Haiku。</p>\n<p><strong>INPUT:</strong></p>\n<p>输入数据由三行组成。每行长度在1~100之间，由小写英文字母组成。允许有空格前缀或空格后缀。每个短句中至少有一个小写字母。</p>\n<p><strong>OUTPUT:</strong></p>\n<p>如果这首诗是Haiku，输出“YES”，否则输出“NO”。</p>\n<h2 id=\"输入输出样例-1-2\"><a href=\"#输入输出样例-1-2\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-2\"><a href=\"#输入-1-2\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on  codeforces </span><br><span class=\"line\">beta round is running</span><br><span class=\"line\">   a rustling of keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-2\"><a href=\"#输出-1-2\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-2\"><a href=\"#输入输出样例-2-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-2\"><a href=\"#输入-2-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">how many gallons</span><br><span class=\"line\">of edo s rain did you drink</span><br><span class=\"line\">                                cuckoo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-2\"><a href=\"#输出-2-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NO</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今天题解：\"><a href=\"#今天题解：\" class=\"headerlink\" title=\"今天题解：\"></a>今天题解：</h2><p>水题，考察getline的使用：getline（cin, 变量）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pd</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;a&#x27;</span>||s[i]==<span class=\"string\">&#x27;e&#x27;</span>||s[i]==<span class=\"string\">&#x27;i&#x27;</span>||s[i]==<span class=\"string\">&#x27;o&#x27;</span>||s[i]==<span class=\"string\">&#x27;u&#x27;</span>)sum++;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstring s1, s2, s3;</span><br><span class=\"line\">\t<span class=\"built_in\">getline</span>(cin, s1);</span><br><span class=\"line\">\t<span class=\"built_in\">getline</span>(cin, s2);</span><br><span class=\"line\">\t<span class=\"built_in\">getline</span>(cin, s3);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">pd</span>(s1)==<span class=\"number\">5</span> &amp;&amp; <span class=\"built_in\">pd</span>(s2)==<span class=\"number\">7</span> &amp;&amp; <span class=\"built_in\">pd</span>(s3)==<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;YES\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;NO\\n&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-CF799B-T-shirt-buying\"><a href=\"#4-CF799B-T-shirt-buying\" class=\"headerlink\" title=\"4.CF799B T-shirt buying\"></a>4.CF799B T-shirt buying</h1><h2 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>A new pack of $ n $ t-shirts came to a shop. Each of the t-shirts is characterized by three integers $ p_{i} $ , $ a_{i} $ and $ b_{i} $ , where $ p_{i} $ is the price of the $ i $ -th t-shirt, $ a_{i} $ is front color of the $ i $ -th t-shirt and $ b_{i} $ is back color of the $ i $ -th t-shirt. All values $ p_{i} $ are distinct, and values $ a_{i} $ and $ b_{i} $ are integers from $ 1 $ to $ 3 $ .</p>\n<p> $ m $ buyers will come to the shop. Each of them wants to buy exactly one t-shirt. For the $ j $ -th buyer we know his favorite color $ c_{j} $ .</p>\n<p>A buyer agrees to buy a t-shirt, if at least one side (front or back) is painted in his favorite color. Among all t-shirts that have colors acceptable to this buyer he will choose the cheapest one. If there are no such t-shirts, the buyer won’t buy anything. Assume that the buyers come one by one, and each buyer is served only after the previous one is served.</p>\n<p>You are to compute the prices each buyer will pay for t-shirts.</p>\n<h2 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains single integer $ n $ ( $ 1&lt;&#x3D;n&lt;&#x3D;200000 $ ) — the number of t-shirts.</p>\n<p>The following line contains sequence of integers $ p_{1},p_{2},…,p_{n} $ ( $ 1&lt;&#x3D;p_{i}&lt;&#x3D;1000000000 $ ), where $ p_{i} $ equals to the price of the $ i $ -th t-shirt.</p>\n<p>The following line contains sequence of integers $ a_{1},a_{2},…,a_{n} $ ( $ 1&lt;&#x3D;a_{i}&lt;&#x3D;3 $ ), where $ a_{i} $ equals to the front color of the $ i $ -th t-shirt.</p>\n<p>The following line contains sequence of integers $ b_{1},b_{2},…,b_{n} $ ( $ 1&lt;&#x3D;b_{i}&lt;&#x3D;3 $ ), where $ b_{i} $ equals to the back color of the $ i $ -th t-shirt.</p>\n<p>The next line contains single integer $ m $ ( $ 1&lt;&#x3D;m&lt;&#x3D;200000 $ ) — the number of buyers.</p>\n<p>The following line contains sequence $ c_{1},c_{2},…,c_{m} $ ( $ 1&lt;&#x3D;c_{j}&lt;&#x3D;3 $ ), where $ c_{j} $ equals to the favorite color of the $ j $ -th buyer. The buyers will come to the shop in the order they are given in the input. Each buyer is served only after the previous one is served.</p>\n<h2 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print to the first line $ m $ integers — the $ j $ -th integer should be equal to the price of the t-shirt which the $ j $ -th buyer will buy. If the $ j $ -th buyer won’t buy anything, print -1.</p>\n<h2 id=\"输入输出样例-1-3\"><a href=\"#输入输出样例-1-3\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-3\"><a href=\"#输入-1-3\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">300 200 400 500 911</span><br><span class=\"line\">1 2 1 2 3</span><br><span class=\"line\">2 1 3 2 1</span><br><span class=\"line\">6</span><br><span class=\"line\">2 3 1 2 1 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-3\"><a href=\"#输出-1-3\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200 400 300 500 911 -1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-3\"><a href=\"#输入输出样例-2-3\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-3\"><a href=\"#输入-2-3\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1000000000 1</span><br><span class=\"line\">1 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2</span><br><span class=\"line\">2 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-3\"><a href=\"#输出-2-3\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1000000000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：-1\"><a href=\"#今日题解：-1\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>我只想到暴力实现，看题解尝试写出优先队列的实现方式。</p>\n<p>暴力：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">cloth</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b;</span><br><span class=\"line\">\t<span class=\"type\">int</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;cloth&gt; <span class=\"title\">c</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; c[i].price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; c[i].a;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; c[i].b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> m;</span><br><span class=\"line\">\tcin&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">buy</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;m; ++i)cin&gt;&gt;buy[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> minn=<span class=\"number\">1000000001</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> index=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;c.<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(buy[i] == c[j].a || buy[i] == c[j].b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(minn&gt;c[j].price) &#123;</span><br><span class=\"line\">\t\t\t\t\tindex=j;</span><br><span class=\"line\">\t\t\t\t\tminn=c[j].price;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index!=<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;minn&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t\tc.<span class=\"built_in\">erase</span>(c.<span class=\"built_in\">begin</span>()+index);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;-1\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>优先队列版：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200009</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m, x, p[N];</span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &gt; Q[<span class=\"number\">5</span>];<span class=\"comment\">//前者存价格，后者存序号</span></span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];<span class=\"comment\">//真就表示卖出了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)cin&gt;&gt;p[i];</span><br><span class=\"line\">\t<span class=\"comment\">//分别在不同的颜色类别里存衣服</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)cin&gt;&gt;x, Q[x].<span class=\"built_in\">push</span>(&#123;-p[i], i&#125;);<span class=\"comment\">//前面颜色\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)cin&gt;&gt;x, Q[x].<span class=\"built_in\">push</span>(&#123;-p[i], i&#125;);<span class=\"comment\">//后面颜色</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( !Q[x].<span class=\"built_in\">empty</span>() &amp;&amp; vis[Q[x].<span class=\"built_in\">top</span>().second]) &#123;</span><br><span class=\"line\">\t\t\tQ[x].<span class=\"built_in\">pop</span>();<span class=\"comment\">//如果此序号的衣服已卖出就在这种颜色衣服队列弹出</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(Q[x].<span class=\"built_in\">empty</span>()) &#123;<span class=\"comment\">//剩下没卖出的</span></span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;-1 &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt; -Q[x].<span class=\"built_in\">top</span>().first &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t\t\tvis[Q[x].<span class=\"built_in\">top</span>().second]=<span class=\"literal\">true</span>;<span class=\"comment\">//标记此序号衣服已卖出</span></span><br><span class=\"line\">\t\t\tQ[x].<span class=\"built_in\">pop</span>();<span class=\"comment\">//此颜色衣服队列中弹出此衣服</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>第一题考察map的使用，第二题考察滑动窗口。</p>\n"},{"title":"刷题注意事项","date":"2025-02-23T16:00:00.000Z","updated":"2025-02-23T16:00:00.000Z","_content":"\n**1.scanf和printf**\n\n用于格式化输入输出\n\n不能取消同步流\n\n**2.cin和cout（c++特性**）\n\n简洁，在取消同步流的情况下一般比scanf更快\n\n取消同步流一定要写完整\n\n```c++\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n一般不要使用cout << endl;改用cout << '\\n';\n\nendl='\\n'+强制刷新缓冲区（比较慢而且一般也不需要）\n\n**3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。**\n\n4.定义时一般使用using type xx = xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。\n\n","source":"_posts/刷题注意事项.md","raw":"---\ntitle: 刷题注意事项\ndate: 2025-02-24\nupdated: 2025-02-24\ncategories: 算法\n---\n\n**1.scanf和printf**\n\n用于格式化输入输出\n\n不能取消同步流\n\n**2.cin和cout（c++特性**）\n\n简洁，在取消同步流的情况下一般比scanf更快\n\n取消同步流一定要写完整\n\n```c++\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n一般不要使用cout << endl;改用cout << '\\n';\n\nendl='\\n'+强制刷新缓冲区（比较慢而且一般也不需要）\n\n**3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。**\n\n4.定义时一般使用using type xx = xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。\n\n","slug":"刷题注意事项","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apg000vpoot7o2dej9i","content":"<p><strong>1.scanf和printf</strong></p>\n<p>用于格式化输入输出</p>\n<p>不能取消同步流</p>\n<p><strong>2.cin和cout（c++特性</strong>）</p>\n<p>简洁，在取消同步流的情况下一般比scanf更快</p>\n<p>取消同步流一定要写完整</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>一般不要使用cout &lt;&lt; endl;改用cout &lt;&lt; ‘\\n’;</p>\n<p>endl&#x3D;’\\n’+强制刷新缓冲区（比较慢而且一般也不需要）</p>\n<p><strong>3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。</strong></p>\n<p>4.定义时一般使用using type xx &#x3D; xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。</p>\n","excerpt":"","more":"<p><strong>1.scanf和printf</strong></p>\n<p>用于格式化输入输出</p>\n<p>不能取消同步流</p>\n<p><strong>2.cin和cout（c++特性</strong>）</p>\n<p>简洁，在取消同步流的情况下一般比scanf更快</p>\n<p>取消同步流一定要写完整</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>一般不要使用cout &lt;&lt; endl;改用cout &lt;&lt; ‘\\n’;</p>\n<p>endl&#x3D;’\\n’+强制刷新缓冲区（比较慢而且一般也不需要）</p>\n<p><strong>3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。</strong></p>\n<p>4.定义时一般使用using type xx &#x3D; xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。</p>\n"},{"title":"刷题日记3.23","date":"2025-03-22T16:00:00.000Z","updated":"2025-03-22T16:00:00.000Z","_content":"## 动态规划\n\n找状态转移方程。\n\n[多重背包]: https://www.starrycoding.com/problem/75\n\n今日题解：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 105;\n\nll dp[N * N];\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint m, n;\n\tcin >> m >> n;\n\tfor(int i=1;i<=n;++i) {//物品数量\n\t\tint s, w, v;//对于每种物品而言\n\t\tcin >> s >> w >> v;\n\t\twhile(s--) {\n\t\t\tfor(int j = m;j>=v;--j) {\n\t\t\t\tdp[j]=max(dp[j],dp[j-v]+w);\n\t\t\t}\n\t\t}\n\t}\n\tcout << dp[m] << '\\n';\n\treturn 0;\n}\n```\n\n多重背包的二进制优化\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 2005;\n\nll dp[N];\n//核心：找到一种合并方式使得0-s中每个数都可被表示。\n//之前是依次递增的，现在按照二进制打包。\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tll m, n;\n\tcin >> m >> n;\n\tfor(int i=1; i<=n; ++i) {\n\t\tll s, w, v;\n\t\tcin >> s >> w >> v;\n\n\t\tvector<ll> vec;//存储打包的值1248等\n\t\tll x = 1;\n\t\twhile(s >= x) {\n\t\t\tvec.push_back(x);\n\t\t\ts -= x;\n\t\t\tx <<= 1;\n\t\t}\n\t\tif(s)vec.push_back(s);\n\t\tfor(auto &k : vec) {\n\t\t\tfor(int j = m; j >= k * v; --j) {\n\t\t\t\tdp[j] = max(dp[j], dp[j - k * v] + k * w);\n\t\t\t}\n\t\t}\n\t}\n\tcout << dp[m] << '\\n';\n\treturn 0;\n}\n```\n\n","source":"_posts/刷题日记3.23.md","raw":"---\ntitle: 刷题日记3.23\ndate: 2025-03-23\nupdated: 2025-03-23\ncategories: 算法\n---\n## 动态规划\n\n找状态转移方程。\n\n[多重背包]: https://www.starrycoding.com/problem/75\n\n今日题解：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 105;\n\nll dp[N * N];\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint m, n;\n\tcin >> m >> n;\n\tfor(int i=1;i<=n;++i) {//物品数量\n\t\tint s, w, v;//对于每种物品而言\n\t\tcin >> s >> w >> v;\n\t\twhile(s--) {\n\t\t\tfor(int j = m;j>=v;--j) {\n\t\t\t\tdp[j]=max(dp[j],dp[j-v]+w);\n\t\t\t}\n\t\t}\n\t}\n\tcout << dp[m] << '\\n';\n\treturn 0;\n}\n```\n\n多重背包的二进制优化\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 2005;\n\nll dp[N];\n//核心：找到一种合并方式使得0-s中每个数都可被表示。\n//之前是依次递增的，现在按照二进制打包。\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tll m, n;\n\tcin >> m >> n;\n\tfor(int i=1; i<=n; ++i) {\n\t\tll s, w, v;\n\t\tcin >> s >> w >> v;\n\n\t\tvector<ll> vec;//存储打包的值1248等\n\t\tll x = 1;\n\t\twhile(s >= x) {\n\t\t\tvec.push_back(x);\n\t\t\ts -= x;\n\t\t\tx <<= 1;\n\t\t}\n\t\tif(s)vec.push_back(s);\n\t\tfor(auto &k : vec) {\n\t\t\tfor(int j = m; j >= k * v; --j) {\n\t\t\t\tdp[j] = max(dp[j], dp[j - k * v] + k * w);\n\t\t\t}\n\t\t}\n\t}\n\tcout << dp[m] << '\\n';\n\treturn 0;\n}\n```\n\n","slug":"刷题日记3.23","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19aph000zpoot0uci8uso","content":"<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>找状态转移方程。</p>\n<p>今日题解：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">105</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll dp[N * N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> m, n;</span><br><span class=\"line\">\tcin &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;<span class=\"comment\">//物品数量</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> s, w, v;<span class=\"comment\">//对于每种物品而言</span></span><br><span class=\"line\">\t\tcin &gt;&gt; s &gt;&gt; w &gt;&gt; v;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(s--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = m;j&gt;=v;--j) &#123;</span><br><span class=\"line\">\t\t\t\tdp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v]+w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; dp[m] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多重背包的二进制优化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">2005</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll dp[N];</span><br><span class=\"line\"><span class=\"comment\">//核心：找到一种合并方式使得0-s中每个数都可被表示。</span></span><br><span class=\"line\"><span class=\"comment\">//之前是依次递增的，现在按照二进制打包。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tll m, n;</span><br><span class=\"line\">\tcin &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</span><br><span class=\"line\">\t\tll s, w, v;</span><br><span class=\"line\">\t\tcin &gt;&gt; s &gt;&gt; w &gt;&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;ll&gt; vec;<span class=\"comment\">//存储打包的值1248等</span></span><br><span class=\"line\">\t\tll x = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(s &gt;= x) &#123;</span><br><span class=\"line\">\t\t\tvec.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t\ts -= x;</span><br><span class=\"line\">\t\t\tx &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s)vec.<span class=\"built_in\">push_back</span>(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;k : vec) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = m; j &gt;= k * v; --j) &#123;</span><br><span class=\"line\">\t\t\t\tdp[j] = <span class=\"built_in\">max</span>(dp[j], dp[j - k * v] + k * w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; dp[m] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>找状态转移方程。</p>\n<p>今日题解：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">105</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll dp[N * N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> m, n;</span><br><span class=\"line\">\tcin &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;<span class=\"comment\">//物品数量</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> s, w, v;<span class=\"comment\">//对于每种物品而言</span></span><br><span class=\"line\">\t\tcin &gt;&gt; s &gt;&gt; w &gt;&gt; v;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(s--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = m;j&gt;=v;--j) &#123;</span><br><span class=\"line\">\t\t\t\tdp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v]+w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; dp[m] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多重背包的二进制优化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">2005</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll dp[N];</span><br><span class=\"line\"><span class=\"comment\">//核心：找到一种合并方式使得0-s中每个数都可被表示。</span></span><br><span class=\"line\"><span class=\"comment\">//之前是依次递增的，现在按照二进制打包。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tll m, n;</span><br><span class=\"line\">\tcin &gt;&gt; m &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; ++i) &#123;</span><br><span class=\"line\">\t\tll s, w, v;</span><br><span class=\"line\">\t\tcin &gt;&gt; s &gt;&gt; w &gt;&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;ll&gt; vec;<span class=\"comment\">//存储打包的值1248等</span></span><br><span class=\"line\">\t\tll x = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(s &gt;= x) &#123;</span><br><span class=\"line\">\t\t\tvec.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t\ts -= x;</span><br><span class=\"line\">\t\t\tx &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s)vec.<span class=\"built_in\">push_back</span>(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;k : vec) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = m; j &gt;= k * v; --j) &#123;</span><br><span class=\"line\">\t\t\t\tdp[j] = <span class=\"built_in\">max</span>(dp[j], dp[j - k * v] + k * w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; dp[m] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"图片显示测试","date":"2025-02-03T16:00:00.000Z","updated":"2025-02-03T16:00:00.000Z","_content":"### 图片\n1111  \n![示例图片](图片显示测试/image-20250201135214019.png \"logo\")  \n![示例图片](图片显示测试/logo.jpg \"logo\")  \n![示例图片](图片显示测试/image.png \"logo\")  \n\n11111\n\n111111\n","source":"_posts/图片显示测试.md","raw":"---\ntitle: 图片显示测试\ndate: 2025-02-04\nupdated: 2025-02-04\ncategories: 博客相关\n---\n### 图片\n1111  \n![示例图片](图片显示测试/image-20250201135214019.png \"logo\")  \n![示例图片](图片显示测试/logo.jpg \"logo\")  \n![示例图片](图片显示测试/image.png \"logo\")  \n\n11111\n\n111111\n","slug":"图片显示测试","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19aph0012poot24gi231b","content":"<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>1111<br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image-20250201135214019.png\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/logo.jpg\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image.png\" alt=\"示例图片\" title=\"logo\">  </p>\n<p>11111</p>\n<p>111111</p>\n","excerpt":"","more":"<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>1111<br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image-20250201135214019.png\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/logo.jpg\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image.png\" alt=\"示例图片\" title=\"logo\">  </p>\n<p>11111</p>\n<p>111111</p>\n"},{"title":"我的第一篇文章","date":"2025-01-24T16:00:00.000Z","updated":"2025-01-28T16:00:00.000Z","_content":"\n# 测试文章\n是否正常显示  \n# 这是一个一级标题\n\n## 这是一个二级标题\n\n这是一个段落文本。可以包含 **加粗文本**、*斜体文本* 和 [链接](https://blog.csdn.net/qq_73995047?type=blog)。\n\n### 列表\n- 项目 1\n- 项目 2\n  - 子项目 2.1\n- 项目 3\n\n### 图片\n![示例图片](我的第一篇文章/logo.jpg \"logo\")\n","source":"_posts/我的第一篇文章.md","raw":"---\ntitle: 我的第一篇文章\ndate: 2025-01-25\nupdated: 2025-01-29\ncategories: 博客相关\n---\n\n# 测试文章\n是否正常显示  \n# 这是一个一级标题\n\n## 这是一个二级标题\n\n这是一个段落文本。可以包含 **加粗文本**、*斜体文本* 和 [链接](https://blog.csdn.net/qq_73995047?type=blog)。\n\n### 列表\n- 项目 1\n- 项目 2\n  - 子项目 2.1\n- 项目 3\n\n### 图片\n![示例图片](我的第一篇文章/logo.jpg \"logo\")\n","slug":"我的第一篇文章","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19api0015poot12wr3165","content":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>是否正常显示  </p>\n<h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><p>这是一个段落文本。可以包含 <strong>加粗文本</strong>、<em>斜体文本</em> 和 <a href=\"https://blog.csdn.net/qq_73995047?type=blog\">链接</a>。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>项目 1</li>\n<li>项目 2<ul>\n<li>子项目 2.1</li>\n</ul>\n</li>\n<li>项目 3</li>\n</ul>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><img src=\"/2025/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/logo.jpg\" alt=\"示例图片\" title=\"logo\"></p>\n","excerpt":"","more":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>是否正常显示  </p>\n<h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><p>这是一个段落文本。可以包含 <strong>加粗文本</strong>、<em>斜体文本</em> 和 <a href=\"https://blog.csdn.net/qq_73995047?type=blog\">链接</a>。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>项目 1</li>\n<li>项目 2<ul>\n<li>子项目 2.1</li>\n</ul>\n</li>\n<li>项目 3</li>\n</ul>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><img src=\"/2025/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/logo.jpg\" alt=\"示例图片\" title=\"logo\"></p>\n"},{"title":"刷题日记4.07-4.10","date":"2025-04-06T16:00:00.000Z","updated":"2025-04-09T16:00:00.000Z","_content":"# 1.P1473 [USACO2.3] 零的数列 Zero Sum\n\n## 题目描述\n\n请考虑一个由 1 到 *N* 的数字组成的递增数列：1,2,3,…,*N*。\n\n现在请在数列中插入 `+` 表示加，或者 `-` 表示减，` `（空格） 表示空白（例如 `1-2 3` 就等于 `1-23`），来将每一对数字组合在一起（请不要在第一个数字前插入符号）。\n\n计算该表达式的结果并判断其值是否为 0。 请你写一个程序找出所有产生和为零的长度为N的数列。\n\n## 输入格式\n\n单独的一行表示整数 *N*（3≤*N*≤9）。\n\n## 输出格式\n\n按照 ASCII码的顺序，输出所有在每对数字间插入 `+`，`-`，` `（空格） 后能得到结果为零的数列。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n7\n```\n\n### 输出 #1\n\n```\n1+2-3+4-5-6+7\n1+2-3-4+5+6-7\n1-2 3+4+5+6+7\n1-2 3-4 5+6 7\n1-2+3+4-5+6-7\n1-2-3-4-5+6+7\n```\n\n## 说明/提示\n\n翻译来自NOCOW\n\nUSACO 2.3\n\n## 今日题解：\n\n利用递归构造出所有的可能情况，利用token的转化计算sum。如果已到末尾，需要额外添加一个符号来触发token的转化。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nvector<string> results;\nint N;\n\nvoid dfs(int idx, string expr) {\n\tif(idx>N) {//递归终点\n\t\tint sum=0;//总和\n\t\tstring token=\"\";//当前处理的字符串\n\t\tint sign=1;//符号(1为+， -1为-)\n\t\tfor(char c : expr + '+') {//在末尾添加+手动触发token转数字\n\t\t\tif(c=='+' || c=='-') {//遇到符号了，就处理符号前的数\n\t\t\t\tif(!token.empty()) {\n\t\t\t\t\tsum+= sign*stoi(token);\n\t\t\t\t\ttoken.clear();//处理过了就清空以便下一个数的处理\n\t\t\t\t}\n\t\t\t\t(c=='+') ? sign=1 : sign=-1;//更新符号\n\t\t\t} else if(c!=' ') { //如果不是符号也不是空格就连接上一个数\n\t\t\t\ttoken+=c;\n\t\t\t}\n\t\t}\n\t\tif(sum==0) {\n\t\t\tresults.push_back(expr);\n\t\t}\n\t\treturn;\n\t}\n\n\n\n\tdfs(idx+1, expr + \"+\" + to_string(idx));\n\tdfs(idx+1, expr + \"-\" + to_string(idx));\n\tdfs(idx+1, expr + \" \" + to_string(idx));\n\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcin>>N;\n\tdfs(2,\"1\");\n\tsort(result.begin(), result.end());//字典序\n\tfor(string expr: results) {\n\t\tcout<<expr<<'\\n';\n\t}\n\treturn 0;\n}\n\n```\n\n# 2.P8649 [蓝桥杯 2017 省 B] k 倍区间\n\n## 题目描述\n\n给定一个长度为 *N* 的数列，*A*1,*A*2,⋯*A**N*，如果其中一段连续的子序列 *A**i*,*A**i*+1,⋯*A**j*(*i*≤*j*) 之和是 *K* 的倍数，我们就称这个区间 [*i*,*j*] 是 *K* 倍区间。\n\n你能求出数列中总共有多少个 *K* 倍区间吗？\n\n## 输入格式\n\n第一行包含两个整数 *N* 和 *K* (1≤*N*,*K*≤105)。\n\n以下 *N* 行每行包含一个整数 *A**i* (1≤*A**i*≤105)。\n\n## 输出格式\n\n输出一个整数，代表 *K* 倍区间的数目。\n\n## 输入输出样例\n\n**输入 #1**复制\n\n```\n5 2\n1  \n2  \n3  \n4  \n5  \n```\n\n**输出 #1**复制\n\n```\n6\n```\n\n## 说明/提示\n\n时限 2 秒, 256M。蓝桥杯 2017 年第八届\n\n## 今日题解\n\n理解同余定理，如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数，新出现的同余数可以与前面所有同余数的数分别构成区间，即直接加上其出现次数即可。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint n, k;\n\tcin>>n>>k;\n\t\n\tvector<int> A(n);\n\tfor(int i=0;i<n;++i) {\n\t\tcin>>A[i];\n\t}\n\t\n\t//如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数\n    // 使用哈希表来存储前缀和模K的结果\n\tunordered_map<int, int> cnt;\n\tcnt[0]=1;\n\tll ans=0;\n\tll pre=0;//保存前缀和模k的结果\n\t\n\tfor(int i=0;i<n;++i) {\n\t\tpre=(pre+A[i]) % k;\n\t\t\n\t\tif(cnt.find(pre) != cnt.end()) {\n\t\t\tans+=cnt[pre];\n\t\t}\n\t\t\n\t\tcnt[pre]++;\n\t}\n\tcout<<ans;\n    return 0;\n}\n```\n\n# 3.P4310 绝世好题\n\n## 题目描述\n\n给定一个长度为 *n* 的数列 *a**i*，求 *a**i* 的子序列 *b**i* 的最长长度 *k*，满足 *b**i*&*b**i*−1=0，其中 2≤*i*≤*k*， & 表示位运算取与。\n\n## 输入格式\n\n输入文件共 2 行。 第一行包括一个整数 *n*。 第二行包括 *n* 个整数，第 *i* 个整数表示 *a**i*。\n\n## 输出格式\n\n输出文件共一行。 包括一个整数，表示子序列 *b**i* 的最长长度。\n\n## 输入输出样例\n\n**输入 #1**\n\n```\n3\n1 2 3\n```\n\n**输出 #1**\n\n```\n2\n```\n\n## 说明/提示\n\n对于100%的数据，1≤*n*≤100000，*a**i*≤109。\n\n## 今日题解\n\n可以直接暴力解,类似于最长上升子序列O(n^2)。\n\n优化：发现新添加的数,\n只能由:\n**在同一二进制位上 , 同为1的数转移而来**\n\n所以找到最长连续同2进制位为1即可\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n    int n;\n    cin >> n;\n\n    int dp[32] = {0}; // dp[c] 表示以第 c 位为1的数结尾的最长子序列长度\n    int maxLength = 0; // 用于记录最长子序列的长度\n\n    for (int i = 1; i <= n; i++) {\n        int currentNumber; // 当前处理的数\n        cin >> currentNumber;\n\n        int currentLength = 1; // 当前数的最长子序列长度，初始化为1（自身）\n\n        // 检查当前数的每一位\n        for (int bit = 0; bit <= 30; bit++) {\n            if ((1 << bit) & currentNumber) { // 如果第 bit 位为1\n                currentLength = max(dp[bit] + 1, currentLength); // 更新当前数的最长子序列长度\n            }\n        }\n\n        // 更新 dp 数组\n        for (int bit = 0; bit <= 30; bit++) {\n            if ((1 << bit) & currentNumber) { // 如果第 bit 位为1\n                dp[bit] = max(dp[bit], currentLength); // 更新以第 bit 位为1的数结尾的最长子序列长度\n            }\n        }\n\n        // 更新全局最长子序列长度\n        maxLength = max(maxLength, currentLength);\n    }\n\n    cout << maxLength; // 输出最长子序列的长度\n    return 0;\n}\n```\n\n\n\n# 4.P2036 [COCI 2008/2009 #2] PERKET\n\n## 题目描述\n\nPerket 是一种流行的美食。为了做好 Perket，厨师必须谨慎选择食材，以在保持传统风味的同时尽可能获得最全面的味道。你有 *n* 种可支配的配料。对于每一种配料，我们知道它们各自的酸度 *s* 和苦度 *b*。当我们添加配料时，总的酸度为每一种配料的酸度总乘积；总的苦度为每一种配料的苦度的总和。\n\n众所周知，美食应该做到口感适中，所以我们希望选取配料，以使得酸度和苦度的绝对差最小。\n\n另外，我们必须添加至少一种配料，因为没有任何食物以水为配料的。\n\n## 输入格式\n\n第一行一个整数 *n*，表示可供选用的食材种类数。\n\n接下来 *n* 行，每行 2 个整数 *s**i* 和 *b**i*，表示第 *i* 种食材的酸度和苦度。\n\n## 输出格式\n\n一行一个整数，表示可能的总酸度和总苦度的最小绝对差。\n\n## 输入输出样例\n\n**输入 #1**\n\n```\n1\n3 10\n```\n\n**输出 #1**\n\n```\n7\n```\n\n**输入 #2**\n\n```\n2\n3 8\n5 8\n```\n\n**输出 #2**\n\n```\n1\n```\n\n**输入 #3**\n\n```\n4\n1 7\n2 6\n3 8\n4 9\n```\n\n**输出 #3**\n\n```\n1\n```\n\n## 说明/提示\n\n#### 数据规模与约定\n\n对于 100% 的数据，有 1≤*n*≤10，且将所有可用食材全部使用产生的总酸度和总苦度小于 1×109，酸度和苦度不同时为 1 和 0。\n\n#### 说明\n\n- 本题满分 70 分。\n- 题目译自 [COCI2008-2009](https://hsin.hr/coci/archive/2008_2009/) [CONTEST #2](https://hsin.hr/coci/archive/2008_2009/contest2_tasks.pdf) PERKET，译者 @[mnesia](https://www.luogu.com.cn/user/115711)。\n\n## 今日题解\n\n利用二进制位的01来表示选不选，以达到枚举所有子集的可能。\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> s(n), b(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> s[i] >> b[i];\n    }\n\n    int ans = INT_MAX;\n\n    // 枚举所有非空子集\n    for (int mask = 1; mask < (1 << n); ++mask) {\n        int total_s = 1, total_b = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (mask & (1 << i)) {\n                total_s *= s[i]; // 酸度乘积\n                total_b += b[i]; // 苦度加和\n            }\n        }\n\n        ans = min(ans, abs(total_s - total_b));\n    }\n\n    cout << ans << '\\n';\n    return 0;\n}\n\n```\n\n# 5.P1464 Function\n\n## 题目描述\n\n对于一个递归函数 *w*(*a*,*b*,*c*)\n\n- 如果 *a*≤0 或 *b*≤0 或 *c*≤0 就返回值 1。\n- 如果 *a*>20 或 *b*>20 或 *c*>20 就返回 *w*(20,20,20)\n- 如果 *a*<*b* 并且 *b*<*c* 就返回 *w*(*a*,*b*,*c*−1)+*w*(*a*,*b*−1,*c*−1)−*w*(*a*,*b*−1,*c*)。\n- 其它的情况就返回 *w*(*a*−1,*b*,*c*)+*w*(*a*−1,*b*−1,*c*)+*w*(*a*−1,*b*,*c*−1)−*w*(*a*−1,*b*−1,*c*−1)\n\n这是个简单的递归函数，但实现起来可能会有些问题。当 *a*,*b*,*c* 均为 15 时，调用的次数将非常的多。你要想个办法才行。\n\n注意：例如 *w*(30,−1,0) 又满足条件 1 又满足条件 2，请按照最上面的条件来算，答案为 1。\n\n## 输入格式\n\n会有若干行。\n\n并以 −1,−1,−1 结束。\n\n## 输出格式\n\n输出若干行，每一行格式：\n\n```\nw(a, b, c) = ans\n```\n\n注意空格。\n\n## 输入输出样例\n\n**输入 #1**复制\n\n```\n1 1 1\n2 2 2\n-1 -1 -1\n```\n\n**输出 #1**复制\n\n```\nw(1, 1, 1) = 2\nw(2, 2, 2) = 4\n```\n\n## 说明/提示\n\n### 数据规模与约定\n\n保证输入的数在 [−9223372036854775808,9223372036854775807] 之间，并且是整数。\n\n保证不包括 −1,−1,−1 的输入行数 *T* 满足 1≤*T*≤105。\n\n## 今日题解\n\n记忆化存储\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nvector<vector<vector<ll>>> dp(21, vector<vector<ll>>(21, vector<ll>(21, -1)));\n\nll w(ll a,ll b, ll c) {\n\t//处理边界条件\n\tif(a<=0||b<=0||c<=0) {\n\t\treturn 1;\n\t}\n\tif(a>20||b>20||c>20)return w(20, 20, 20);\n\t\n\tif(dp[a][b][c] != -1)return dp[a][b][c];\n\t\n\tif(a<b && b<c) {\n\t\tdp[a][b][c]=w(a,b,c-1)+w(a,b-1,c-1)-w(a,b-1,c);\n\t}  \n\telse {\n\t\tdp[a][b][c] = w(a-1, b, c)+w(a-1, b-1, c)+w(a-1, b, c-1)-w(a-1,b-1,c-1);\n\t}\n\treturn dp[a][b][c];\n\t\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tll a, b, c;\n\t\n\twhile(cin>>a>>b>>c) {\n\t\tif(a==-1&&b==-1&&c==-1) {\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\tcout<<\"w(\"<<a<<\", \"<<b<<\", \"<<c<<\") = \"<<w(a, b, c)<<'\\n';\n\t\t}\n\t}\n\t\n    return 0;\n}\n\n```\n\n","source":"_posts/刷题日记4.07-4.10.md","raw":"---\ntitle: 刷题日记4.07-4.10\ndate: 2025-04-07\nupdated: 2025-04-010\ncategories: 算法\n---\n# 1.P1473 [USACO2.3] 零的数列 Zero Sum\n\n## 题目描述\n\n请考虑一个由 1 到 *N* 的数字组成的递增数列：1,2,3,…,*N*。\n\n现在请在数列中插入 `+` 表示加，或者 `-` 表示减，` `（空格） 表示空白（例如 `1-2 3` 就等于 `1-23`），来将每一对数字组合在一起（请不要在第一个数字前插入符号）。\n\n计算该表达式的结果并判断其值是否为 0。 请你写一个程序找出所有产生和为零的长度为N的数列。\n\n## 输入格式\n\n单独的一行表示整数 *N*（3≤*N*≤9）。\n\n## 输出格式\n\n按照 ASCII码的顺序，输出所有在每对数字间插入 `+`，`-`，` `（空格） 后能得到结果为零的数列。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n7\n```\n\n### 输出 #1\n\n```\n1+2-3+4-5-6+7\n1+2-3-4+5+6-7\n1-2 3+4+5+6+7\n1-2 3-4 5+6 7\n1-2+3+4-5+6-7\n1-2-3-4-5+6+7\n```\n\n## 说明/提示\n\n翻译来自NOCOW\n\nUSACO 2.3\n\n## 今日题解：\n\n利用递归构造出所有的可能情况，利用token的转化计算sum。如果已到末尾，需要额外添加一个符号来触发token的转化。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nvector<string> results;\nint N;\n\nvoid dfs(int idx, string expr) {\n\tif(idx>N) {//递归终点\n\t\tint sum=0;//总和\n\t\tstring token=\"\";//当前处理的字符串\n\t\tint sign=1;//符号(1为+， -1为-)\n\t\tfor(char c : expr + '+') {//在末尾添加+手动触发token转数字\n\t\t\tif(c=='+' || c=='-') {//遇到符号了，就处理符号前的数\n\t\t\t\tif(!token.empty()) {\n\t\t\t\t\tsum+= sign*stoi(token);\n\t\t\t\t\ttoken.clear();//处理过了就清空以便下一个数的处理\n\t\t\t\t}\n\t\t\t\t(c=='+') ? sign=1 : sign=-1;//更新符号\n\t\t\t} else if(c!=' ') { //如果不是符号也不是空格就连接上一个数\n\t\t\t\ttoken+=c;\n\t\t\t}\n\t\t}\n\t\tif(sum==0) {\n\t\t\tresults.push_back(expr);\n\t\t}\n\t\treturn;\n\t}\n\n\n\n\tdfs(idx+1, expr + \"+\" + to_string(idx));\n\tdfs(idx+1, expr + \"-\" + to_string(idx));\n\tdfs(idx+1, expr + \" \" + to_string(idx));\n\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcin>>N;\n\tdfs(2,\"1\");\n\tsort(result.begin(), result.end());//字典序\n\tfor(string expr: results) {\n\t\tcout<<expr<<'\\n';\n\t}\n\treturn 0;\n}\n\n```\n\n# 2.P8649 [蓝桥杯 2017 省 B] k 倍区间\n\n## 题目描述\n\n给定一个长度为 *N* 的数列，*A*1,*A*2,⋯*A**N*，如果其中一段连续的子序列 *A**i*,*A**i*+1,⋯*A**j*(*i*≤*j*) 之和是 *K* 的倍数，我们就称这个区间 [*i*,*j*] 是 *K* 倍区间。\n\n你能求出数列中总共有多少个 *K* 倍区间吗？\n\n## 输入格式\n\n第一行包含两个整数 *N* 和 *K* (1≤*N*,*K*≤105)。\n\n以下 *N* 行每行包含一个整数 *A**i* (1≤*A**i*≤105)。\n\n## 输出格式\n\n输出一个整数，代表 *K* 倍区间的数目。\n\n## 输入输出样例\n\n**输入 #1**复制\n\n```\n5 2\n1  \n2  \n3  \n4  \n5  \n```\n\n**输出 #1**复制\n\n```\n6\n```\n\n## 说明/提示\n\n时限 2 秒, 256M。蓝桥杯 2017 年第八届\n\n## 今日题解\n\n理解同余定理，如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数，新出现的同余数可以与前面所有同余数的数分别构成区间，即直接加上其出现次数即可。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tint n, k;\n\tcin>>n>>k;\n\t\n\tvector<int> A(n);\n\tfor(int i=0;i<n;++i) {\n\t\tcin>>A[i];\n\t}\n\t\n\t//如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数\n    // 使用哈希表来存储前缀和模K的结果\n\tunordered_map<int, int> cnt;\n\tcnt[0]=1;\n\tll ans=0;\n\tll pre=0;//保存前缀和模k的结果\n\t\n\tfor(int i=0;i<n;++i) {\n\t\tpre=(pre+A[i]) % k;\n\t\t\n\t\tif(cnt.find(pre) != cnt.end()) {\n\t\t\tans+=cnt[pre];\n\t\t}\n\t\t\n\t\tcnt[pre]++;\n\t}\n\tcout<<ans;\n    return 0;\n}\n```\n\n# 3.P4310 绝世好题\n\n## 题目描述\n\n给定一个长度为 *n* 的数列 *a**i*，求 *a**i* 的子序列 *b**i* 的最长长度 *k*，满足 *b**i*&*b**i*−1=0，其中 2≤*i*≤*k*， & 表示位运算取与。\n\n## 输入格式\n\n输入文件共 2 行。 第一行包括一个整数 *n*。 第二行包括 *n* 个整数，第 *i* 个整数表示 *a**i*。\n\n## 输出格式\n\n输出文件共一行。 包括一个整数，表示子序列 *b**i* 的最长长度。\n\n## 输入输出样例\n\n**输入 #1**\n\n```\n3\n1 2 3\n```\n\n**输出 #1**\n\n```\n2\n```\n\n## 说明/提示\n\n对于100%的数据，1≤*n*≤100000，*a**i*≤109。\n\n## 今日题解\n\n可以直接暴力解,类似于最长上升子序列O(n^2)。\n\n优化：发现新添加的数,\n只能由:\n**在同一二进制位上 , 同为1的数转移而来**\n\n所以找到最长连续同2进制位为1即可\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n    int n;\n    cin >> n;\n\n    int dp[32] = {0}; // dp[c] 表示以第 c 位为1的数结尾的最长子序列长度\n    int maxLength = 0; // 用于记录最长子序列的长度\n\n    for (int i = 1; i <= n; i++) {\n        int currentNumber; // 当前处理的数\n        cin >> currentNumber;\n\n        int currentLength = 1; // 当前数的最长子序列长度，初始化为1（自身）\n\n        // 检查当前数的每一位\n        for (int bit = 0; bit <= 30; bit++) {\n            if ((1 << bit) & currentNumber) { // 如果第 bit 位为1\n                currentLength = max(dp[bit] + 1, currentLength); // 更新当前数的最长子序列长度\n            }\n        }\n\n        // 更新 dp 数组\n        for (int bit = 0; bit <= 30; bit++) {\n            if ((1 << bit) & currentNumber) { // 如果第 bit 位为1\n                dp[bit] = max(dp[bit], currentLength); // 更新以第 bit 位为1的数结尾的最长子序列长度\n            }\n        }\n\n        // 更新全局最长子序列长度\n        maxLength = max(maxLength, currentLength);\n    }\n\n    cout << maxLength; // 输出最长子序列的长度\n    return 0;\n}\n```\n\n\n\n# 4.P2036 [COCI 2008/2009 #2] PERKET\n\n## 题目描述\n\nPerket 是一种流行的美食。为了做好 Perket，厨师必须谨慎选择食材，以在保持传统风味的同时尽可能获得最全面的味道。你有 *n* 种可支配的配料。对于每一种配料，我们知道它们各自的酸度 *s* 和苦度 *b*。当我们添加配料时，总的酸度为每一种配料的酸度总乘积；总的苦度为每一种配料的苦度的总和。\n\n众所周知，美食应该做到口感适中，所以我们希望选取配料，以使得酸度和苦度的绝对差最小。\n\n另外，我们必须添加至少一种配料，因为没有任何食物以水为配料的。\n\n## 输入格式\n\n第一行一个整数 *n*，表示可供选用的食材种类数。\n\n接下来 *n* 行，每行 2 个整数 *s**i* 和 *b**i*，表示第 *i* 种食材的酸度和苦度。\n\n## 输出格式\n\n一行一个整数，表示可能的总酸度和总苦度的最小绝对差。\n\n## 输入输出样例\n\n**输入 #1**\n\n```\n1\n3 10\n```\n\n**输出 #1**\n\n```\n7\n```\n\n**输入 #2**\n\n```\n2\n3 8\n5 8\n```\n\n**输出 #2**\n\n```\n1\n```\n\n**输入 #3**\n\n```\n4\n1 7\n2 6\n3 8\n4 9\n```\n\n**输出 #3**\n\n```\n1\n```\n\n## 说明/提示\n\n#### 数据规模与约定\n\n对于 100% 的数据，有 1≤*n*≤10，且将所有可用食材全部使用产生的总酸度和总苦度小于 1×109，酸度和苦度不同时为 1 和 0。\n\n#### 说明\n\n- 本题满分 70 分。\n- 题目译自 [COCI2008-2009](https://hsin.hr/coci/archive/2008_2009/) [CONTEST #2](https://hsin.hr/coci/archive/2008_2009/contest2_tasks.pdf) PERKET，译者 @[mnesia](https://www.luogu.com.cn/user/115711)。\n\n## 今日题解\n\n利用二进制位的01来表示选不选，以达到枚举所有子集的可能。\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> s(n), b(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> s[i] >> b[i];\n    }\n\n    int ans = INT_MAX;\n\n    // 枚举所有非空子集\n    for (int mask = 1; mask < (1 << n); ++mask) {\n        int total_s = 1, total_b = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (mask & (1 << i)) {\n                total_s *= s[i]; // 酸度乘积\n                total_b += b[i]; // 苦度加和\n            }\n        }\n\n        ans = min(ans, abs(total_s - total_b));\n    }\n\n    cout << ans << '\\n';\n    return 0;\n}\n\n```\n\n# 5.P1464 Function\n\n## 题目描述\n\n对于一个递归函数 *w*(*a*,*b*,*c*)\n\n- 如果 *a*≤0 或 *b*≤0 或 *c*≤0 就返回值 1。\n- 如果 *a*>20 或 *b*>20 或 *c*>20 就返回 *w*(20,20,20)\n- 如果 *a*<*b* 并且 *b*<*c* 就返回 *w*(*a*,*b*,*c*−1)+*w*(*a*,*b*−1,*c*−1)−*w*(*a*,*b*−1,*c*)。\n- 其它的情况就返回 *w*(*a*−1,*b*,*c*)+*w*(*a*−1,*b*−1,*c*)+*w*(*a*−1,*b*,*c*−1)−*w*(*a*−1,*b*−1,*c*−1)\n\n这是个简单的递归函数，但实现起来可能会有些问题。当 *a*,*b*,*c* 均为 15 时，调用的次数将非常的多。你要想个办法才行。\n\n注意：例如 *w*(30,−1,0) 又满足条件 1 又满足条件 2，请按照最上面的条件来算，答案为 1。\n\n## 输入格式\n\n会有若干行。\n\n并以 −1,−1,−1 结束。\n\n## 输出格式\n\n输出若干行，每一行格式：\n\n```\nw(a, b, c) = ans\n```\n\n注意空格。\n\n## 输入输出样例\n\n**输入 #1**复制\n\n```\n1 1 1\n2 2 2\n-1 -1 -1\n```\n\n**输出 #1**复制\n\n```\nw(1, 1, 1) = 2\nw(2, 2, 2) = 4\n```\n\n## 说明/提示\n\n### 数据规模与约定\n\n保证输入的数在 [−9223372036854775808,9223372036854775807] 之间，并且是整数。\n\n保证不包括 −1,−1,−1 的输入行数 *T* 满足 1≤*T*≤105。\n\n## 今日题解\n\n记忆化存储\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nvector<vector<vector<ll>>> dp(21, vector<vector<ll>>(21, vector<ll>(21, -1)));\n\nll w(ll a,ll b, ll c) {\n\t//处理边界条件\n\tif(a<=0||b<=0||c<=0) {\n\t\treturn 1;\n\t}\n\tif(a>20||b>20||c>20)return w(20, 20, 20);\n\t\n\tif(dp[a][b][c] != -1)return dp[a][b][c];\n\t\n\tif(a<b && b<c) {\n\t\tdp[a][b][c]=w(a,b,c-1)+w(a,b-1,c-1)-w(a,b-1,c);\n\t}  \n\telse {\n\t\tdp[a][b][c] = w(a-1, b, c)+w(a-1, b-1, c)+w(a-1, b, c-1)-w(a-1,b-1,c-1);\n\t}\n\treturn dp[a][b][c];\n\t\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tll a, b, c;\n\t\n\twhile(cin>>a>>b>>c) {\n\t\tif(a==-1&&b==-1&&c==-1) {\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\tcout<<\"w(\"<<a<<\", \"<<b<<\", \"<<c<<\") = \"<<w(a, b, c)<<'\\n';\n\t\t}\n\t}\n\t\n    return 0;\n}\n\n```\n\n","slug":"刷题日记4.07-4.10","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19api0017pootfv3a9sh2","content":"<h1 id=\"1-P1473-USACO2-3-零的数列-Zero-Sum\"><a href=\"#1-P1473-USACO2-3-零的数列-Zero-Sum\" class=\"headerlink\" title=\"1.P1473 [USACO2.3] 零的数列 Zero Sum\"></a>1.P1473 [USACO2.3] 零的数列 Zero Sum</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>请考虑一个由 1 到 <em>N</em> 的数字组成的递增数列：1,2,3,…,<em>N</em>。</p>\n<p>现在请在数列中插入 <code>+</code> 表示加，或者 <code>-</code> 表示减，<code> </code>（空格） 表示空白（例如 <code>1-2 3</code> 就等于 <code>1-23</code>），来将每一对数字组合在一起（请不要在第一个数字前插入符号）。</p>\n<p>计算该表达式的结果并判断其值是否为 0。 请你写一个程序找出所有产生和为零的长度为N的数列。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>单独的一行表示整数 <em>N</em>（3≤<em>N</em>≤9）。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>按照 ASCII码的顺序，输出所有在每对数字间插入 <code>+</code>，<code>-</code>，<code> </code>（空格） 后能得到结果为零的数列。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1+2-3+4-5-6+7</span><br><span class=\"line\">1+2-3-4+5+6-7</span><br><span class=\"line\">1-2 3+4+5+6+7</span><br><span class=\"line\">1-2 3-4 5+6 7</span><br><span class=\"line\">1-2+3+4-5+6-7</span><br><span class=\"line\">1-2-3-4-5+6+7</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>翻译来自NOCOW</p>\n<p>USACO 2.3</p>\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>利用递归构造出所有的可能情况，利用token的转化计算sum。如果已到末尾，需要额外添加一个符号来触发token的转化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;string&gt; results;</span><br><span class=\"line\"><span class=\"type\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> idx, string expr)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(idx&gt;N) &#123;<span class=\"comment\">//递归终点</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> sum=<span class=\"number\">0</span>;<span class=\"comment\">//总和</span></span><br><span class=\"line\">\t\tstring token=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//当前处理的字符串</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> sign=<span class=\"number\">1</span>;<span class=\"comment\">//符号(1为+， -1为-)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">char</span> c : expr + <span class=\"string\">&#x27;+&#x27;</span>) &#123;<span class=\"comment\">//在末尾添加+手动触发token转数字</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;+&#x27;</span> || c==<span class=\"string\">&#x27;-&#x27;</span>) &#123;<span class=\"comment\">//遇到符号了，就处理符号前的数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!token.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t\t\tsum+= sign*<span class=\"built_in\">stoi</span>(token);</span><br><span class=\"line\">\t\t\t\t\ttoken.<span class=\"built_in\">clear</span>();<span class=\"comment\">//处理过了就清空以便下一个数的处理</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t(c==<span class=\"string\">&#x27;+&#x27;</span>) ? sign=<span class=\"number\">1</span> : sign=<span class=\"number\">-1</span>;<span class=\"comment\">//更新符号</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c!=<span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//如果不是符号也不是空格就连接上一个数</span></span><br><span class=\"line\">\t\t\t\ttoken+=c;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(sum==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresults.<span class=\"built_in\">push_back</span>(expr);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(idx<span class=\"number\">+1</span>, expr + <span class=\"string\">&quot;+&quot;</span> + <span class=\"built_in\">to_string</span>(idx));</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(idx<span class=\"number\">+1</span>, expr + <span class=\"string\">&quot;-&quot;</span> + <span class=\"built_in\">to_string</span>(idx));</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(idx<span class=\"number\">+1</span>, expr + <span class=\"string\">&quot; &quot;</span> + <span class=\"built_in\">to_string</span>(idx));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tcin&gt;&gt;N;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">2</span>,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());<span class=\"comment\">//字典序</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(string expr: results) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;expr&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-P8649-蓝桥杯-2017-省-B-k-倍区间\"><a href=\"#2-P8649-蓝桥杯-2017-省-B-k-倍区间\" class=\"headerlink\" title=\"2.P8649 [蓝桥杯 2017 省 B] k 倍区间\"></a>2.P8649 [蓝桥杯 2017 省 B] k 倍区间</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为 <em>N</em> 的数列，<em>A</em>1,<em>A</em>2,⋯<em>A**N</em>，如果其中一段连续的子序列 <em>A**i</em>,<em>A**i</em>+1,⋯<em>A**j</em>(<em>i</em>≤<em>j</em>) 之和是 <em>K</em> 的倍数，我们就称这个区间 [<em>i</em>,<em>j</em>] 是 <em>K</em> 倍区间。</p>\n<p>你能求出数列中总共有多少个 <em>K</em> 倍区间吗？</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含两个整数 <em>N</em> 和 <em>K</em> (1≤<em>N</em>,<em>K</em>≤105)。</p>\n<p>以下 <em>N</em> 行每行包含一个整数 <em>A**i</em> (1≤<em>A**i</em>≤105)。</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出一个整数，代表 <em>K</em> 倍区间的数目。</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 2</span><br><span class=\"line\">1  </span><br><span class=\"line\">2  </span><br><span class=\"line\">3  </span><br><span class=\"line\">4  </span><br><span class=\"line\">5  </span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>时限 2 秒, 256M。蓝桥杯 2017 年第八届</p>\n<h2 id=\"今日题解\"><a href=\"#今日题解\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>理解同余定理，如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数，新出现的同余数可以与前面所有同余数的数分别构成区间，即直接加上其出现次数即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, k;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">A</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;A[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用哈希表来存储前缀和模K的结果</span></span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">\tcnt[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\tll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tll pre=<span class=\"number\">0</span>;<span class=\"comment\">//保存前缀和模k的结果</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) &#123;</span><br><span class=\"line\">\t\tpre=(pre+A[i]) % k;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt.<span class=\"built_in\">find</span>(pre) != cnt.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t\tans+=cnt[pre];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcnt[pre]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-P4310-绝世好题\"><a href=\"#3-P4310-绝世好题\" class=\"headerlink\" title=\"3.P4310 绝世好题\"></a>3.P4310 绝世好题</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为 <em>n</em> 的数列 <em>a**i</em>，求 <em>a**i</em> 的子序列 <em>b**i</em> 的最长长度 <em>k</em>，满足 <em>b**i</em>&amp;<em>b**i</em>−1&#x3D;0，其中 2≤<em>i</em>≤<em>k</em>， &amp; 表示位运算取与。</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>输入文件共 2 行。 第一行包括一个整数 <em>n</em>。 第二行包括 <em>n</em> 个整数，第 <em>i</em> 个整数表示 <em>a**i</em>。</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出文件共一行。 包括一个整数，表示子序列 <em>b**i</em> 的最长长度。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">1 2 3</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-2\"><a href=\"#说明-提示-2\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>对于100%的数据，1≤<em>n</em>≤100000，<em>a**i</em>≤109。</p>\n<h2 id=\"今日题解-1\"><a href=\"#今日题解-1\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>可以直接暴力解,类似于最长上升子序列O(n^2)。</p>\n<p>优化：发现新添加的数,<br>只能由:<br><strong>在同一二进制位上 , 同为1的数转移而来</strong></p>\n<p>所以找到最长连续同2进制位为1即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> dp[<span class=\"number\">32</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// dp[c] 表示以第 c 位为1的数结尾的最长子序列长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxLength = <span class=\"number\">0</span>; <span class=\"comment\">// 用于记录最长子序列的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> currentNumber; <span class=\"comment\">// 当前处理的数</span></span><br><span class=\"line\">        cin &gt;&gt; currentNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> currentLength = <span class=\"number\">1</span>; <span class=\"comment\">// 当前数的最长子序列长度，初始化为1（自身）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查当前数的每一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> bit = <span class=\"number\">0</span>; bit &lt;= <span class=\"number\">30</span>; bit++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"number\">1</span> &lt;&lt; bit) &amp; currentNumber) &#123; <span class=\"comment\">// 如果第 bit 位为1</span></span><br><span class=\"line\">                currentLength = <span class=\"built_in\">max</span>(dp[bit] + <span class=\"number\">1</span>, currentLength); <span class=\"comment\">// 更新当前数的最长子序列长度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 dp 数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> bit = <span class=\"number\">0</span>; bit &lt;= <span class=\"number\">30</span>; bit++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"number\">1</span> &lt;&lt; bit) &amp; currentNumber) &#123; <span class=\"comment\">// 如果第 bit 位为1</span></span><br><span class=\"line\">                dp[bit] = <span class=\"built_in\">max</span>(dp[bit], currentLength); <span class=\"comment\">// 更新以第 bit 位为1的数结尾的最长子序列长度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新全局最长子序列长度</span></span><br><span class=\"line\">        maxLength = <span class=\"built_in\">max</span>(maxLength, currentLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; maxLength; <span class=\"comment\">// 输出最长子序列的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"4-P2036-COCI-2008-2009-2-PERKET\"><a href=\"#4-P2036-COCI-2008-2009-2-PERKET\" class=\"headerlink\" title=\"4.P2036 [COCI 2008&#x2F;2009 #2] PERKET\"></a>4.P2036 [COCI 2008&#x2F;2009 #2] PERKET</h1><h2 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Perket 是一种流行的美食。为了做好 Perket，厨师必须谨慎选择食材，以在保持传统风味的同时尽可能获得最全面的味道。你有 <em>n</em> 种可支配的配料。对于每一种配料，我们知道它们各自的酸度 <em>s</em> 和苦度 <em>b</em>。当我们添加配料时，总的酸度为每一种配料的酸度总乘积；总的苦度为每一种配料的苦度的总和。</p>\n<p>众所周知，美食应该做到口感适中，所以我们希望选取配料，以使得酸度和苦度的绝对差最小。</p>\n<p>另外，我们必须添加至少一种配料，因为没有任何食物以水为配料的。</p>\n<h2 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行一个整数 <em>n</em>，表示可供选用的食材种类数。</p>\n<p>接下来 <em>n</em> 行，每行 2 个整数 <em>s**i</em> 和 <em>b**i</em>，表示第 <em>i</em> 种食材的酸度和苦度。</p>\n<h2 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>一行一个整数，表示可能的总酸度和总苦度的最小绝对差。</p>\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">3 10</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入 #2</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 8</span><br><span class=\"line\">5 8</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #2</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入 #3</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 7</span><br><span class=\"line\">2 6</span><br><span class=\"line\">3 8</span><br><span class=\"line\">4 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #3</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-3\"><a href=\"#说明-提示-3\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><h4 id=\"数据规模与约定\"><a href=\"#数据规模与约定\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h4><p>对于 100% 的数据，有 1≤<em>n</em>≤10，且将所有可用食材全部使用产生的总酸度和总苦度小于 1×109，酸度和苦度不同时为 1 和 0。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li>本题满分 70 分。</li>\n<li>题目译自 <a href=\"https://hsin.hr/coci/archive/2008_2009/\">COCI2008-2009</a> <a href=\"https://hsin.hr/coci/archive/2008_2009/contest2_tasks.pdf\">CONTEST #2</a> PERKET，译者 @<a href=\"https://www.luogu.com.cn/user/115711\">mnesia</a>。</li>\n</ul>\n<h2 id=\"今日题解-2\"><a href=\"#今日题解-2\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>利用二进制位的01来表示选不选，以达到枚举所有子集的可能。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">s</span><span class=\"params\">(n)</span>, <span class=\"title\">b</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; s[i] &gt;&gt; b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 枚举所有非空子集</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> mask = <span class=\"number\">1</span>; mask &lt; (<span class=\"number\">1</span> &lt;&lt; n); ++mask) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> total_s = <span class=\"number\">1</span>, total_b = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mask &amp; (<span class=\"number\">1</span> &lt;&lt; i)) &#123;</span><br><span class=\"line\">                total_s *= s[i]; <span class=\"comment\">// 酸度乘积</span></span><br><span class=\"line\">                total_b += b[i]; <span class=\"comment\">// 苦度加和</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">abs</span>(total_s - total_b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-P1464-Function\"><a href=\"#5-P1464-Function\" class=\"headerlink\" title=\"5.P1464 Function\"></a>5.P1464 Function</h1><h2 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>对于一个递归函数 <em>w</em>(<em>a</em>,<em>b</em>,<em>c</em>)</p>\n<ul>\n<li>如果 <em>a</em>≤0 或 <em>b</em>≤0 或 <em>c</em>≤0 就返回值 1。</li>\n<li>如果 <em>a</em>&gt;20 或 <em>b</em>&gt;20 或 <em>c</em>&gt;20 就返回 <em>w</em>(20,20,20)</li>\n<li>如果 <em>a</em>&lt;<em>b</em> 并且 <em>b</em>&lt;<em>c</em> 就返回 <em>w</em>(<em>a</em>,<em>b</em>,<em>c</em>−1)+<em>w</em>(<em>a</em>,<em>b</em>−1,<em>c</em>−1)−<em>w</em>(<em>a</em>,<em>b</em>−1,<em>c</em>)。</li>\n<li>其它的情况就返回 <em>w</em>(<em>a</em>−1,<em>b</em>,<em>c</em>)+<em>w</em>(<em>a</em>−1,<em>b</em>−1,<em>c</em>)+<em>w</em>(<em>a</em>−1,<em>b</em>,<em>c</em>−1)−<em>w</em>(<em>a</em>−1,<em>b</em>−1,<em>c</em>−1)</li>\n</ul>\n<p>这是个简单的递归函数，但实现起来可能会有些问题。当 <em>a</em>,<em>b</em>,<em>c</em> 均为 15 时，调用的次数将非常的多。你要想个办法才行。</p>\n<p>注意：例如 <em>w</em>(30,−1,0) 又满足条件 1 又满足条件 2，请按照最上面的条件来算，答案为 1。</p>\n<h2 id=\"输入格式-4\"><a href=\"#输入格式-4\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>会有若干行。</p>\n<p>并以 −1,−1,−1 结束。</p>\n<h2 id=\"输出格式-4\"><a href=\"#输出格式-4\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出若干行，每一行格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w(a, b, c) = ans</span><br></pre></td></tr></table></figure>\n\n<p>注意空格。</p>\n<h2 id=\"输入输出样例-3\"><a href=\"#输入输出样例-3\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 1</span><br><span class=\"line\">2 2 2</span><br><span class=\"line\">-1 -1 -1</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w(1, 1, 1) = 2</span><br><span class=\"line\">w(2, 2, 2) = 4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-4\"><a href=\"#说明-提示-4\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><h3 id=\"数据规模与约定-1\"><a href=\"#数据规模与约定-1\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h3><p>保证输入的数在 [−9223372036854775808,9223372036854775807] 之间，并且是整数。</p>\n<p>保证不包括 −1,−1,−1 的输入行数 <em>T</em> 满足 1≤<em>T</em>≤105。</p>\n<h2 id=\"今日题解-3\"><a href=\"#今日题解-3\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>记忆化存储</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;vector&lt;vector&lt;ll&gt;&gt;&gt; <span class=\"built_in\">dp</span>(<span class=\"number\">21</span>, vector&lt;vector&lt;ll&gt;&gt;(<span class=\"number\">21</span>, <span class=\"built_in\">vector</span>&lt;ll&gt;(<span class=\"number\">21</span>, <span class=\"number\">-1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">w</span><span class=\"params\">(ll a,ll b, ll c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//处理边界条件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&lt;=<span class=\"number\">0</span>||b&lt;=<span class=\"number\">0</span>||c&lt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&gt;<span class=\"number\">20</span>||b&gt;<span class=\"number\">20</span>||c&gt;<span class=\"number\">20</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">w</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dp[a][b][c] != <span class=\"number\">-1</span>)<span class=\"keyword\">return</span> dp[a][b][c];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&lt;b &amp;&amp; b&lt;c) &#123;</span><br><span class=\"line\">\t\tdp[a][b][c]=<span class=\"built_in\">w</span>(a,b,c<span class=\"number\">-1</span>)+<span class=\"built_in\">w</span>(a,b<span class=\"number\">-1</span>,c<span class=\"number\">-1</span>)-<span class=\"built_in\">w</span>(a,b<span class=\"number\">-1</span>,c);</span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdp[a][b][c] = <span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>, b, c)+<span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>, b<span class=\"number\">-1</span>, c)+<span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>, b, c<span class=\"number\">-1</span>)-<span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>,b<span class=\"number\">-1</span>,c<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp[a][b][c];</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tll a, b, c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cin&gt;&gt;a&gt;&gt;b&gt;&gt;c) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a==<span class=\"number\">-1</span>&amp;&amp;b==<span class=\"number\">-1</span>&amp;&amp;c==<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;w(&quot;</span>&lt;&lt;a&lt;&lt;<span class=\"string\">&quot;, &quot;</span>&lt;&lt;b&lt;&lt;<span class=\"string\">&quot;, &quot;</span>&lt;&lt;c&lt;&lt;<span class=\"string\">&quot;) = &quot;</span>&lt;&lt;<span class=\"built_in\">w</span>(a, b, c)&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"1-P1473-USACO2-3-零的数列-Zero-Sum\"><a href=\"#1-P1473-USACO2-3-零的数列-Zero-Sum\" class=\"headerlink\" title=\"1.P1473 [USACO2.3] 零的数列 Zero Sum\"></a>1.P1473 [USACO2.3] 零的数列 Zero Sum</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>请考虑一个由 1 到 <em>N</em> 的数字组成的递增数列：1,2,3,…,<em>N</em>。</p>\n<p>现在请在数列中插入 <code>+</code> 表示加，或者 <code>-</code> 表示减，<code> </code>（空格） 表示空白（例如 <code>1-2 3</code> 就等于 <code>1-23</code>），来将每一对数字组合在一起（请不要在第一个数字前插入符号）。</p>\n<p>计算该表达式的结果并判断其值是否为 0。 请你写一个程序找出所有产生和为零的长度为N的数列。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>单独的一行表示整数 <em>N</em>（3≤<em>N</em>≤9）。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>按照 ASCII码的顺序，输出所有在每对数字间插入 <code>+</code>，<code>-</code>，<code> </code>（空格） 后能得到结果为零的数列。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1+2-3+4-5-6+7</span><br><span class=\"line\">1+2-3-4+5+6-7</span><br><span class=\"line\">1-2 3+4+5+6+7</span><br><span class=\"line\">1-2 3-4 5+6 7</span><br><span class=\"line\">1-2+3+4-5+6-7</span><br><span class=\"line\">1-2-3-4-5+6+7</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>翻译来自NOCOW</p>\n<p>USACO 2.3</p>\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>利用递归构造出所有的可能情况，利用token的转化计算sum。如果已到末尾，需要额外添加一个符号来触发token的转化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;string&gt; results;</span><br><span class=\"line\"><span class=\"type\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> idx, string expr)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(idx&gt;N) &#123;<span class=\"comment\">//递归终点</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> sum=<span class=\"number\">0</span>;<span class=\"comment\">//总和</span></span><br><span class=\"line\">\t\tstring token=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//当前处理的字符串</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> sign=<span class=\"number\">1</span>;<span class=\"comment\">//符号(1为+， -1为-)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">char</span> c : expr + <span class=\"string\">&#x27;+&#x27;</span>) &#123;<span class=\"comment\">//在末尾添加+手动触发token转数字</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;+&#x27;</span> || c==<span class=\"string\">&#x27;-&#x27;</span>) &#123;<span class=\"comment\">//遇到符号了，就处理符号前的数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!token.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t\t\tsum+= sign*<span class=\"built_in\">stoi</span>(token);</span><br><span class=\"line\">\t\t\t\t\ttoken.<span class=\"built_in\">clear</span>();<span class=\"comment\">//处理过了就清空以便下一个数的处理</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t(c==<span class=\"string\">&#x27;+&#x27;</span>) ? sign=<span class=\"number\">1</span> : sign=<span class=\"number\">-1</span>;<span class=\"comment\">//更新符号</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c!=<span class=\"string\">&#x27; &#x27;</span>) &#123; <span class=\"comment\">//如果不是符号也不是空格就连接上一个数</span></span><br><span class=\"line\">\t\t\t\ttoken+=c;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(sum==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresults.<span class=\"built_in\">push_back</span>(expr);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(idx<span class=\"number\">+1</span>, expr + <span class=\"string\">&quot;+&quot;</span> + <span class=\"built_in\">to_string</span>(idx));</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(idx<span class=\"number\">+1</span>, expr + <span class=\"string\">&quot;-&quot;</span> + <span class=\"built_in\">to_string</span>(idx));</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(idx<span class=\"number\">+1</span>, expr + <span class=\"string\">&quot; &quot;</span> + <span class=\"built_in\">to_string</span>(idx));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tcin&gt;&gt;N;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">2</span>,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());<span class=\"comment\">//字典序</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(string expr: results) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;expr&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-P8649-蓝桥杯-2017-省-B-k-倍区间\"><a href=\"#2-P8649-蓝桥杯-2017-省-B-k-倍区间\" class=\"headerlink\" title=\"2.P8649 [蓝桥杯 2017 省 B] k 倍区间\"></a>2.P8649 [蓝桥杯 2017 省 B] k 倍区间</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为 <em>N</em> 的数列，<em>A</em>1,<em>A</em>2,⋯<em>A**N</em>，如果其中一段连续的子序列 <em>A**i</em>,<em>A**i</em>+1,⋯<em>A**j</em>(<em>i</em>≤<em>j</em>) 之和是 <em>K</em> 的倍数，我们就称这个区间 [<em>i</em>,<em>j</em>] 是 <em>K</em> 倍区间。</p>\n<p>你能求出数列中总共有多少个 <em>K</em> 倍区间吗？</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含两个整数 <em>N</em> 和 <em>K</em> (1≤<em>N</em>,<em>K</em>≤105)。</p>\n<p>以下 <em>N</em> 行每行包含一个整数 <em>A**i</em> (1≤<em>A**i</em>≤105)。</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出一个整数，代表 <em>K</em> 倍区间的数目。</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 2</span><br><span class=\"line\">1  </span><br><span class=\"line\">2  </span><br><span class=\"line\">3  </span><br><span class=\"line\">4  </span><br><span class=\"line\">5  </span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-1\"><a href=\"#说明-提示-1\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>时限 2 秒, 256M。蓝桥杯 2017 年第八届</p>\n<h2 id=\"今日题解\"><a href=\"#今日题解\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>理解同余定理，如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数，新出现的同余数可以与前面所有同余数的数分别构成区间，即直接加上其出现次数即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, k;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">A</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;A[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//如果两个不同位置的前缀和模k的结果一样，那么他们构成的区间和一定为k的倍数</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用哈希表来存储前缀和模K的结果</span></span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">\tcnt[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\tll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tll pre=<span class=\"number\">0</span>;<span class=\"comment\">//保存前缀和模k的结果</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) &#123;</span><br><span class=\"line\">\t\tpre=(pre+A[i]) % k;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt.<span class=\"built_in\">find</span>(pre) != cnt.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t\tans+=cnt[pre];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcnt[pre]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-P4310-绝世好题\"><a href=\"#3-P4310-绝世好题\" class=\"headerlink\" title=\"3.P4310 绝世好题\"></a>3.P4310 绝世好题</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为 <em>n</em> 的数列 <em>a**i</em>，求 <em>a**i</em> 的子序列 <em>b**i</em> 的最长长度 <em>k</em>，满足 <em>b**i</em>&amp;<em>b**i</em>−1&#x3D;0，其中 2≤<em>i</em>≤<em>k</em>， &amp; 表示位运算取与。</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>输入文件共 2 行。 第一行包括一个整数 <em>n</em>。 第二行包括 <em>n</em> 个整数，第 <em>i</em> 个整数表示 <em>a**i</em>。</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出文件共一行。 包括一个整数，表示子序列 <em>b**i</em> 的最长长度。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">1 2 3</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-2\"><a href=\"#说明-提示-2\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><p>对于100%的数据，1≤<em>n</em>≤100000，<em>a**i</em>≤109。</p>\n<h2 id=\"今日题解-1\"><a href=\"#今日题解-1\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>可以直接暴力解,类似于最长上升子序列O(n^2)。</p>\n<p>优化：发现新添加的数,<br>只能由:<br><strong>在同一二进制位上 , 同为1的数转移而来</strong></p>\n<p>所以找到最长连续同2进制位为1即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> dp[<span class=\"number\">32</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// dp[c] 表示以第 c 位为1的数结尾的最长子序列长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxLength = <span class=\"number\">0</span>; <span class=\"comment\">// 用于记录最长子序列的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> currentNumber; <span class=\"comment\">// 当前处理的数</span></span><br><span class=\"line\">        cin &gt;&gt; currentNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> currentLength = <span class=\"number\">1</span>; <span class=\"comment\">// 当前数的最长子序列长度，初始化为1（自身）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查当前数的每一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> bit = <span class=\"number\">0</span>; bit &lt;= <span class=\"number\">30</span>; bit++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"number\">1</span> &lt;&lt; bit) &amp; currentNumber) &#123; <span class=\"comment\">// 如果第 bit 位为1</span></span><br><span class=\"line\">                currentLength = <span class=\"built_in\">max</span>(dp[bit] + <span class=\"number\">1</span>, currentLength); <span class=\"comment\">// 更新当前数的最长子序列长度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 dp 数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> bit = <span class=\"number\">0</span>; bit &lt;= <span class=\"number\">30</span>; bit++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"number\">1</span> &lt;&lt; bit) &amp; currentNumber) &#123; <span class=\"comment\">// 如果第 bit 位为1</span></span><br><span class=\"line\">                dp[bit] = <span class=\"built_in\">max</span>(dp[bit], currentLength); <span class=\"comment\">// 更新以第 bit 位为1的数结尾的最长子序列长度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新全局最长子序列长度</span></span><br><span class=\"line\">        maxLength = <span class=\"built_in\">max</span>(maxLength, currentLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; maxLength; <span class=\"comment\">// 输出最长子序列的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"4-P2036-COCI-2008-2009-2-PERKET\"><a href=\"#4-P2036-COCI-2008-2009-2-PERKET\" class=\"headerlink\" title=\"4.P2036 [COCI 2008&#x2F;2009 #2] PERKET\"></a>4.P2036 [COCI 2008&#x2F;2009 #2] PERKET</h1><h2 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Perket 是一种流行的美食。为了做好 Perket，厨师必须谨慎选择食材，以在保持传统风味的同时尽可能获得最全面的味道。你有 <em>n</em> 种可支配的配料。对于每一种配料，我们知道它们各自的酸度 <em>s</em> 和苦度 <em>b</em>。当我们添加配料时，总的酸度为每一种配料的酸度总乘积；总的苦度为每一种配料的苦度的总和。</p>\n<p>众所周知，美食应该做到口感适中，所以我们希望选取配料，以使得酸度和苦度的绝对差最小。</p>\n<p>另外，我们必须添加至少一种配料，因为没有任何食物以水为配料的。</p>\n<h2 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行一个整数 <em>n</em>，表示可供选用的食材种类数。</p>\n<p>接下来 <em>n</em> 行，每行 2 个整数 <em>s**i</em> 和 <em>b**i</em>，表示第 <em>i</em> 种食材的酸度和苦度。</p>\n<h2 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>一行一个整数，表示可能的总酸度和总苦度的最小绝对差。</p>\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">3 10</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入 #2</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 8</span><br><span class=\"line\">5 8</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #2</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入 #3</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 7</span><br><span class=\"line\">2 6</span><br><span class=\"line\">3 8</span><br><span class=\"line\">4 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #3</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-3\"><a href=\"#说明-提示-3\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><h4 id=\"数据规模与约定\"><a href=\"#数据规模与约定\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h4><p>对于 100% 的数据，有 1≤<em>n</em>≤10，且将所有可用食材全部使用产生的总酸度和总苦度小于 1×109，酸度和苦度不同时为 1 和 0。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li>本题满分 70 分。</li>\n<li>题目译自 <a href=\"https://hsin.hr/coci/archive/2008_2009/\">COCI2008-2009</a> <a href=\"https://hsin.hr/coci/archive/2008_2009/contest2_tasks.pdf\">CONTEST #2</a> PERKET，译者 @<a href=\"https://www.luogu.com.cn/user/115711\">mnesia</a>。</li>\n</ul>\n<h2 id=\"今日题解-2\"><a href=\"#今日题解-2\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>利用二进制位的01来表示选不选，以达到枚举所有子集的可能。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">s</span><span class=\"params\">(n)</span>, <span class=\"title\">b</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; s[i] &gt;&gt; b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 枚举所有非空子集</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> mask = <span class=\"number\">1</span>; mask &lt; (<span class=\"number\">1</span> &lt;&lt; n); ++mask) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> total_s = <span class=\"number\">1</span>, total_b = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mask &amp; (<span class=\"number\">1</span> &lt;&lt; i)) &#123;</span><br><span class=\"line\">                total_s *= s[i]; <span class=\"comment\">// 酸度乘积</span></span><br><span class=\"line\">                total_b += b[i]; <span class=\"comment\">// 苦度加和</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">abs</span>(total_s - total_b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-P1464-Function\"><a href=\"#5-P1464-Function\" class=\"headerlink\" title=\"5.P1464 Function\"></a>5.P1464 Function</h1><h2 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>对于一个递归函数 <em>w</em>(<em>a</em>,<em>b</em>,<em>c</em>)</p>\n<ul>\n<li>如果 <em>a</em>≤0 或 <em>b</em>≤0 或 <em>c</em>≤0 就返回值 1。</li>\n<li>如果 <em>a</em>&gt;20 或 <em>b</em>&gt;20 或 <em>c</em>&gt;20 就返回 <em>w</em>(20,20,20)</li>\n<li>如果 <em>a</em>&lt;<em>b</em> 并且 <em>b</em>&lt;<em>c</em> 就返回 <em>w</em>(<em>a</em>,<em>b</em>,<em>c</em>−1)+<em>w</em>(<em>a</em>,<em>b</em>−1,<em>c</em>−1)−<em>w</em>(<em>a</em>,<em>b</em>−1,<em>c</em>)。</li>\n<li>其它的情况就返回 <em>w</em>(<em>a</em>−1,<em>b</em>,<em>c</em>)+<em>w</em>(<em>a</em>−1,<em>b</em>−1,<em>c</em>)+<em>w</em>(<em>a</em>−1,<em>b</em>,<em>c</em>−1)−<em>w</em>(<em>a</em>−1,<em>b</em>−1,<em>c</em>−1)</li>\n</ul>\n<p>这是个简单的递归函数，但实现起来可能会有些问题。当 <em>a</em>,<em>b</em>,<em>c</em> 均为 15 时，调用的次数将非常的多。你要想个办法才行。</p>\n<p>注意：例如 <em>w</em>(30,−1,0) 又满足条件 1 又满足条件 2，请按照最上面的条件来算，答案为 1。</p>\n<h2 id=\"输入格式-4\"><a href=\"#输入格式-4\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>会有若干行。</p>\n<p>并以 −1,−1,−1 结束。</p>\n<h2 id=\"输出格式-4\"><a href=\"#输出格式-4\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出若干行，每一行格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w(a, b, c) = ans</span><br></pre></td></tr></table></figure>\n\n<p>注意空格。</p>\n<h2 id=\"输入输出样例-3\"><a href=\"#输入输出样例-3\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 1</span><br><span class=\"line\">2 2 2</span><br><span class=\"line\">-1 -1 -1</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong>复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w(1, 1, 1) = 2</span><br><span class=\"line\">w(2, 2, 2) = 4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示-4\"><a href=\"#说明-提示-4\" class=\"headerlink\" title=\"说明&#x2F;提示\"></a>说明&#x2F;提示</h2><h3 id=\"数据规模与约定-1\"><a href=\"#数据规模与约定-1\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h3><p>保证输入的数在 [−9223372036854775808,9223372036854775807] 之间，并且是整数。</p>\n<p>保证不包括 −1,−1,−1 的输入行数 <em>T</em> 满足 1≤<em>T</em>≤105。</p>\n<h2 id=\"今日题解-3\"><a href=\"#今日题解-3\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>记忆化存储</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;vector&lt;vector&lt;ll&gt;&gt;&gt; <span class=\"built_in\">dp</span>(<span class=\"number\">21</span>, vector&lt;vector&lt;ll&gt;&gt;(<span class=\"number\">21</span>, <span class=\"built_in\">vector</span>&lt;ll&gt;(<span class=\"number\">21</span>, <span class=\"number\">-1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">w</span><span class=\"params\">(ll a,ll b, ll c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//处理边界条件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&lt;=<span class=\"number\">0</span>||b&lt;=<span class=\"number\">0</span>||c&lt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&gt;<span class=\"number\">20</span>||b&gt;<span class=\"number\">20</span>||c&gt;<span class=\"number\">20</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">w</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dp[a][b][c] != <span class=\"number\">-1</span>)<span class=\"keyword\">return</span> dp[a][b][c];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a&lt;b &amp;&amp; b&lt;c) &#123;</span><br><span class=\"line\">\t\tdp[a][b][c]=<span class=\"built_in\">w</span>(a,b,c<span class=\"number\">-1</span>)+<span class=\"built_in\">w</span>(a,b<span class=\"number\">-1</span>,c<span class=\"number\">-1</span>)-<span class=\"built_in\">w</span>(a,b<span class=\"number\">-1</span>,c);</span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdp[a][b][c] = <span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>, b, c)+<span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>, b<span class=\"number\">-1</span>, c)+<span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>, b, c<span class=\"number\">-1</span>)-<span class=\"built_in\">w</span>(a<span class=\"number\">-1</span>,b<span class=\"number\">-1</span>,c<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp[a][b][c];</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tll a, b, c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cin&gt;&gt;a&gt;&gt;b&gt;&gt;c) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a==<span class=\"number\">-1</span>&amp;&amp;b==<span class=\"number\">-1</span>&amp;&amp;c==<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcout&lt;&lt;<span class=\"string\">&quot;w(&quot;</span>&lt;&lt;a&lt;&lt;<span class=\"string\">&quot;, &quot;</span>&lt;&lt;b&lt;&lt;<span class=\"string\">&quot;, &quot;</span>&lt;&lt;c&lt;&lt;<span class=\"string\">&quot;) = &quot;</span>&lt;&lt;<span class=\"built_in\">w</span>(a, b, c)&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"操作系统","date":"2025-02-17T16:00:00.000Z","updated":"2025-02-18T16:00:00.000Z","_content":"\n## 操作系统概述\n\n### 定义\n\n操作系统(Operating System;OS)是**计算机硬件与用户之间的接口**(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入/输出设备等），并提供用户与计算机交互的界面。\n\n### 特征\n\n最基本特征为**并发**和**共享**(二者互为存在条件)\n\n**并发**：是指两个或多个活动在同一给定的时间段中进行\n\n**共享**：是指计算机系统中的资源被多个进程所共用\n\n**异步**：进程以不可预知的速度向前推进\n\n**虚拟**：把一个物理上的实体变为若干个逻辑上的对应物\n\n关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。\n\n### 功能\n\n**1.计算机资源管理：**\n\n**处理器管理**:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等\n\n**存储器管理**:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等\n\n**文件管理**:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等\n\n**设备管理**:主要包括缓冲管理、设备分配、设备处理、虚拟设备等\n\n2.**作为用户与计算机硬件系统之间的接口**：**命令接口和程序接口**\n\n3.**用作扩充机器**。\n\n### 一些基本概念\n\n- 特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。\n- 非特权指令：普通的运算指令\n- 内核程序：系统的管理者，可以执行一切指令，运行在核心态\n- 应用程序：普通用户程序只能执行非特权程序，运行在用户态\n\n**处理器状态：**\n\n- 用户态(目态)：CPU只能执行非特权指令\n- 核心态(管态、内核态)：可以执行所有指令\n- 用户态到内核态：通过中断或异常**(是硬件完成的)**\n- 核心态到用户态：特权指令psw的标志位，0用户态，1核心态。\n\n**原语：**\n\n- 处在操作系统的最底层，是最接近硬件的部分\n- 这些程序的运行具有原子性，其操作只能一气呵成\n- 这些程序的运行时间都较短，而且调用频繁\n\n## 进程管理\n\n### **进程（Process）**\n\n进程是**操作系统进行资源分配和调度的基本单位**，是**程序在处理器上的一次运行活动**。进程包括程序控制块、PCB、程序段、数据段。\n\nPCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息\n\n**特点：**\n\n- **动态性(基本特征)**：进程是动态的实体，有创建、运行、阻塞、终止等状态。\n- **并发性**：多个进程可以同时运行，共享系统资源。\n- **独立性**：**进程是资源分配的基本单位**，具有独立的资源和运行环境。\n- 异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。\n- 结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。\n\n**进程状态：**\n\n- **就绪态（Ready）**：进程已准备好运行，等待CPU分配。\n- **运行态（Running）**：进程正在CPU上运行。\n- **阻塞态（Blocked）**：进程因等待某种事件（如I/O操作完成）而暂停运行。\n\n进程的状态转换：\n\n![](操作系统/image-20250218154211332.png)\n\n**线程（Thread）**\n\n**线程是进程中的一个执行单元，是CPU调度的基本单位**。一个进程可以包含多个线程，它们共享进程的资源。\n**特点：**\n\n- **轻量级**：线程的创建和切换开销小。\n- **并发性**：多个线程可以并发执行，提高程序的效率。\n- **共享资源**：线程共享所属进程的资源，如内存空间。\n\n**线程与进程的区别：**\n\n- 线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。\n- 进程是资源分配的基本单位，线程是CPU调度的基本单位。\n\nCPU调度常用算法\n\n- **先来先服务（FCFS，First-Come-First-Served）**：按进程到达的顺序调度，简单但可能导致饥饿现象。\n\n- **最短作业优先（SJF，Shortest Job First）**：优先调度运行时间最短的进程，但需要预估进程运行时间。\n\n- **优先级调度（Priority Scheduling）**：根据进程的优先级进行调度，优先级高的进程优先运行。\n\n- **最高响应比优先（HRRN,Highest Response Ratio Next）**：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的**响应比**来选择下一个执行的进程，响应比公式为：\n\n  **响应比 = 1 + 等待时间 / 执行时间**\n\n  - **特点**：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。\n  - **优点**：兼顾公平性和效率，避免饥饿问题，适合批处理系统。\n  - **缺点**：计算复杂度较高，调度开销大。\n  - **适用场景**：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。\n\n- **时间片轮转（RR，Round-Robin）**：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。\n\n### 进程的通信\n\n1）进程通信是指进程之间的信息交换。\n\n**低级通信**：PV操作\n\n**高级通信**：是指以较高的效率传输大量数据的通信方式。\n\n高级通信方法主要有三类：\n\n1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。\n\n2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。\n\n3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。\n\n**临界区**：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段**代码**称为临界区。\n\n进程同步机制应遵循的**原则**：空闲让进、忙则等待、有限等待、让权等待。\n\n实现进程同步的**机制**有：\n\n- **互斥锁（Mutex）**：确保同一时间只有一个线程可以访问共享资源。\n- **信号量（Semaphore）**：用于控制对共享资源的访问数量。\n- **条件变量（Condition Variable）**：用于线程间的同步，等待某个条件满足后再执行。\n\n#### PV操作解决生产者-消费者问题\n\n**信号量定义**\n\n- `mutex`：用于保护缓冲区的互斥访问，初始值为1。\n- `empty`：表示缓冲区中空闲位置的数量，初始值为`N`（缓冲区大小）。\n- `full`：表示缓冲区中已占用位置的数量，初始值为0。\n\n**生产者伪代码**\n\n```c\nsemaphore mutex = 1;  // 互斥信号量\nsemaphore empty = N;  // 空位信号量，初始值为缓冲区大小\nsemaphore full = 0;   // 满位信号量，初始值为0\n\nvoid producer() {\n    while (true) {\n        produce_item();  // 生产一个产品\n\t\t//消耗一个产品进入空闲缓冲区\n        P(empty);        // 等待空位，减少空位计数\n        P(mutex);        // 进入临界区\n\n        // 将产品放入缓冲区\n        put_item_into_buffer();\n\n        V(mutex);        // 离开临界区\n        V(full);         // 增加满位计数，通知消费者\n    }\n}\n```\n\n**消费者伪代码**\n\n```c\nvoid consumer() {\n    while (true) {\n        P(full);         // 等待有产品，减少满位计数\n        P(mutex);        // 进入临界区\n\n        // 从缓冲区取出产品\n        take_item_from_buffer();\n\n        V(mutex);        // 离开临界区\n        V(empty);        // 增加空位计数，通知生产者\n        consume_item();  // 消费产品\n    }\n}\n```\n\n**运行示例**\n\n假设缓冲区大小为`N`：\n\n- 初始时，`empty = N`，`full = 0`。\n- 生产者执行`P(empty)`，`empty`减1，表示占用一个空位。\n- 生产者执行`V(full)`，`full`加1，表示增加一个满位。\n- 消费者执行`P(full)`，`full`减1，表示取出一个产品。\n- 消费者执行`V(empty)`，`empty`加1，表示释放一个空位。","source":"_posts/操作系统.md","raw":"---\ntitle: 操作系统\ndate: 2025-02-18\nupdated: 2025-02-19\ncategories: 计算机基础\n---\n\n## 操作系统概述\n\n### 定义\n\n操作系统(Operating System;OS)是**计算机硬件与用户之间的接口**(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入/输出设备等），并提供用户与计算机交互的界面。\n\n### 特征\n\n最基本特征为**并发**和**共享**(二者互为存在条件)\n\n**并发**：是指两个或多个活动在同一给定的时间段中进行\n\n**共享**：是指计算机系统中的资源被多个进程所共用\n\n**异步**：进程以不可预知的速度向前推进\n\n**虚拟**：把一个物理上的实体变为若干个逻辑上的对应物\n\n关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。\n\n### 功能\n\n**1.计算机资源管理：**\n\n**处理器管理**:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等\n\n**存储器管理**:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等\n\n**文件管理**:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等\n\n**设备管理**:主要包括缓冲管理、设备分配、设备处理、虚拟设备等\n\n2.**作为用户与计算机硬件系统之间的接口**：**命令接口和程序接口**\n\n3.**用作扩充机器**。\n\n### 一些基本概念\n\n- 特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。\n- 非特权指令：普通的运算指令\n- 内核程序：系统的管理者，可以执行一切指令，运行在核心态\n- 应用程序：普通用户程序只能执行非特权程序，运行在用户态\n\n**处理器状态：**\n\n- 用户态(目态)：CPU只能执行非特权指令\n- 核心态(管态、内核态)：可以执行所有指令\n- 用户态到内核态：通过中断或异常**(是硬件完成的)**\n- 核心态到用户态：特权指令psw的标志位，0用户态，1核心态。\n\n**原语：**\n\n- 处在操作系统的最底层，是最接近硬件的部分\n- 这些程序的运行具有原子性，其操作只能一气呵成\n- 这些程序的运行时间都较短，而且调用频繁\n\n## 进程管理\n\n### **进程（Process）**\n\n进程是**操作系统进行资源分配和调度的基本单位**，是**程序在处理器上的一次运行活动**。进程包括程序控制块、PCB、程序段、数据段。\n\nPCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息\n\n**特点：**\n\n- **动态性(基本特征)**：进程是动态的实体，有创建、运行、阻塞、终止等状态。\n- **并发性**：多个进程可以同时运行，共享系统资源。\n- **独立性**：**进程是资源分配的基本单位**，具有独立的资源和运行环境。\n- 异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。\n- 结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。\n\n**进程状态：**\n\n- **就绪态（Ready）**：进程已准备好运行，等待CPU分配。\n- **运行态（Running）**：进程正在CPU上运行。\n- **阻塞态（Blocked）**：进程因等待某种事件（如I/O操作完成）而暂停运行。\n\n进程的状态转换：\n\n![](操作系统/image-20250218154211332.png)\n\n**线程（Thread）**\n\n**线程是进程中的一个执行单元，是CPU调度的基本单位**。一个进程可以包含多个线程，它们共享进程的资源。\n**特点：**\n\n- **轻量级**：线程的创建和切换开销小。\n- **并发性**：多个线程可以并发执行，提高程序的效率。\n- **共享资源**：线程共享所属进程的资源，如内存空间。\n\n**线程与进程的区别：**\n\n- 线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。\n- 进程是资源分配的基本单位，线程是CPU调度的基本单位。\n\nCPU调度常用算法\n\n- **先来先服务（FCFS，First-Come-First-Served）**：按进程到达的顺序调度，简单但可能导致饥饿现象。\n\n- **最短作业优先（SJF，Shortest Job First）**：优先调度运行时间最短的进程，但需要预估进程运行时间。\n\n- **优先级调度（Priority Scheduling）**：根据进程的优先级进行调度，优先级高的进程优先运行。\n\n- **最高响应比优先（HRRN,Highest Response Ratio Next）**：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的**响应比**来选择下一个执行的进程，响应比公式为：\n\n  **响应比 = 1 + 等待时间 / 执行时间**\n\n  - **特点**：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。\n  - **优点**：兼顾公平性和效率，避免饥饿问题，适合批处理系统。\n  - **缺点**：计算复杂度较高，调度开销大。\n  - **适用场景**：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。\n\n- **时间片轮转（RR，Round-Robin）**：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。\n\n### 进程的通信\n\n1）进程通信是指进程之间的信息交换。\n\n**低级通信**：PV操作\n\n**高级通信**：是指以较高的效率传输大量数据的通信方式。\n\n高级通信方法主要有三类：\n\n1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。\n\n2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。\n\n3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。\n\n**临界区**：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段**代码**称为临界区。\n\n进程同步机制应遵循的**原则**：空闲让进、忙则等待、有限等待、让权等待。\n\n实现进程同步的**机制**有：\n\n- **互斥锁（Mutex）**：确保同一时间只有一个线程可以访问共享资源。\n- **信号量（Semaphore）**：用于控制对共享资源的访问数量。\n- **条件变量（Condition Variable）**：用于线程间的同步，等待某个条件满足后再执行。\n\n#### PV操作解决生产者-消费者问题\n\n**信号量定义**\n\n- `mutex`：用于保护缓冲区的互斥访问，初始值为1。\n- `empty`：表示缓冲区中空闲位置的数量，初始值为`N`（缓冲区大小）。\n- `full`：表示缓冲区中已占用位置的数量，初始值为0。\n\n**生产者伪代码**\n\n```c\nsemaphore mutex = 1;  // 互斥信号量\nsemaphore empty = N;  // 空位信号量，初始值为缓冲区大小\nsemaphore full = 0;   // 满位信号量，初始值为0\n\nvoid producer() {\n    while (true) {\n        produce_item();  // 生产一个产品\n\t\t//消耗一个产品进入空闲缓冲区\n        P(empty);        // 等待空位，减少空位计数\n        P(mutex);        // 进入临界区\n\n        // 将产品放入缓冲区\n        put_item_into_buffer();\n\n        V(mutex);        // 离开临界区\n        V(full);         // 增加满位计数，通知消费者\n    }\n}\n```\n\n**消费者伪代码**\n\n```c\nvoid consumer() {\n    while (true) {\n        P(full);         // 等待有产品，减少满位计数\n        P(mutex);        // 进入临界区\n\n        // 从缓冲区取出产品\n        take_item_from_buffer();\n\n        V(mutex);        // 离开临界区\n        V(empty);        // 增加空位计数，通知生产者\n        consume_item();  // 消费产品\n    }\n}\n```\n\n**运行示例**\n\n假设缓冲区大小为`N`：\n\n- 初始时，`empty = N`，`full = 0`。\n- 生产者执行`P(empty)`，`empty`减1，表示占用一个空位。\n- 生产者执行`V(full)`，`full`加1，表示增加一个满位。\n- 消费者执行`P(full)`，`full`减1，表示取出一个产品。\n- 消费者执行`V(empty)`，`empty`加1，表示释放一个空位。","slug":"操作系统","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19api0019poot3sgk3sor","content":"<h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>操作系统(Operating System;OS)是<strong>计算机硬件与用户之间的接口</strong>(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入&#x2F;输出设备等），并提供用户与计算机交互的界面。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><p>最基本特征为<strong>并发</strong>和<strong>共享</strong>(二者互为存在条件)</p>\n<p><strong>并发</strong>：是指两个或多个活动在同一给定的时间段中进行</p>\n<p><strong>共享</strong>：是指计算机系统中的资源被多个进程所共用</p>\n<p><strong>异步</strong>：进程以不可预知的速度向前推进</p>\n<p><strong>虚拟</strong>：把一个物理上的实体变为若干个逻辑上的对应物</p>\n<p>关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p><strong>1.计算机资源管理：</strong></p>\n<p><strong>处理器管理</strong>:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等</p>\n<p><strong>存储器管理</strong>:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等</p>\n<p><strong>文件管理</strong>:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等</p>\n<p><strong>设备管理</strong>:主要包括缓冲管理、设备分配、设备处理、虚拟设备等</p>\n<p>2.<strong>作为用户与计算机硬件系统之间的接口</strong>：<strong>命令接口和程序接口</strong></p>\n<p>3.<strong>用作扩充机器</strong>。</p>\n<h3 id=\"一些基本概念\"><a href=\"#一些基本概念\" class=\"headerlink\" title=\"一些基本概念\"></a>一些基本概念</h3><ul>\n<li>特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。</li>\n<li>非特权指令：普通的运算指令</li>\n<li>内核程序：系统的管理者，可以执行一切指令，运行在核心态</li>\n<li>应用程序：普通用户程序只能执行非特权程序，运行在用户态</li>\n</ul>\n<p><strong>处理器状态：</strong></p>\n<ul>\n<li>用户态(目态)：CPU只能执行非特权指令</li>\n<li>核心态(管态、内核态)：可以执行所有指令</li>\n<li>用户态到内核态：通过中断或异常**(是硬件完成的)**</li>\n<li>核心态到用户态：特权指令psw的标志位，0用户态，1核心态。</li>\n</ul>\n<p><strong>原语：</strong></p>\n<ul>\n<li>处在操作系统的最底层，是最接近硬件的部分</li>\n<li>这些程序的运行具有原子性，其操作只能一气呵成</li>\n<li>这些程序的运行时间都较短，而且调用频繁</li>\n</ul>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><h3 id=\"进程（Process）\"><a href=\"#进程（Process）\" class=\"headerlink\" title=\"进程（Process）\"></a><strong>进程（Process）</strong></h3><p>进程是<strong>操作系统进行资源分配和调度的基本单位</strong>，是<strong>程序在处理器上的一次运行活动</strong>。进程包括程序控制块、PCB、程序段、数据段。</p>\n<p>PCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>动态性(基本特征)</strong>：进程是动态的实体，有创建、运行、阻塞、终止等状态。</li>\n<li><strong>并发性</strong>：多个进程可以同时运行，共享系统资源。</li>\n<li><strong>独立性</strong>：<strong>进程是资源分配的基本单位</strong>，具有独立的资源和运行环境。</li>\n<li>异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。</li>\n<li>结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。</li>\n</ul>\n<p><strong>进程状态：</strong></p>\n<ul>\n<li><strong>就绪态（Ready）</strong>：进程已准备好运行，等待CPU分配。</li>\n<li><strong>运行态（Running）</strong>：进程正在CPU上运行。</li>\n<li><strong>阻塞态（Blocked）</strong>：进程因等待某种事件（如I&#x2F;O操作完成）而暂停运行。</li>\n</ul>\n<p>进程的状态转换：</p>\n<p><img src=\"/2025/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20250218154211332.png\"></p>\n<p><strong>线程（Thread）</strong></p>\n<p><strong>线程是进程中的一个执行单元，是CPU调度的基本单位</strong>。一个进程可以包含多个线程，它们共享进程的资源。<br><strong>特点：</strong></p>\n<ul>\n<li><strong>轻量级</strong>：线程的创建和切换开销小。</li>\n<li><strong>并发性</strong>：多个线程可以并发执行，提高程序的效率。</li>\n<li><strong>共享资源</strong>：线程共享所属进程的资源，如内存空间。</li>\n</ul>\n<p><strong>线程与进程的区别：</strong></p>\n<ul>\n<li>线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。</li>\n<li>进程是资源分配的基本单位，线程是CPU调度的基本单位。</li>\n</ul>\n<p>CPU调度常用算法</p>\n<ul>\n<li><p><strong>先来先服务（FCFS，First-Come-First-Served）</strong>：按进程到达的顺序调度，简单但可能导致饥饿现象。</p>\n</li>\n<li><p><strong>最短作业优先（SJF，Shortest Job First）</strong>：优先调度运行时间最短的进程，但需要预估进程运行时间。</p>\n</li>\n<li><p><strong>优先级调度（Priority Scheduling）</strong>：根据进程的优先级进行调度，优先级高的进程优先运行。</p>\n</li>\n<li><p><strong>最高响应比优先（HRRN,Highest Response Ratio Next）</strong>：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的<strong>响应比</strong>来选择下一个执行的进程，响应比公式为：</p>\n<p><strong>响应比 &#x3D; 1 + 等待时间 &#x2F; 执行时间</strong></p>\n<ul>\n<li><strong>特点</strong>：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。</li>\n<li><strong>优点</strong>：兼顾公平性和效率，避免饥饿问题，适合批处理系统。</li>\n<li><strong>缺点</strong>：计算复杂度较高，调度开销大。</li>\n<li><strong>适用场景</strong>：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。</li>\n</ul>\n</li>\n<li><p><strong>时间片轮转（RR，Round-Robin）</strong>：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。</p>\n</li>\n</ul>\n<h3 id=\"进程的通信\"><a href=\"#进程的通信\" class=\"headerlink\" title=\"进程的通信\"></a>进程的通信</h3><p>1）进程通信是指进程之间的信息交换。</p>\n<p><strong>低级通信</strong>：PV操作</p>\n<p><strong>高级通信</strong>：是指以较高的效率传输大量数据的通信方式。</p>\n<p>高级通信方法主要有三类：</p>\n<p>1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。</p>\n<p>2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。</p>\n<p>3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。</p>\n<p><strong>临界区</strong>：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段<strong>代码</strong>称为临界区。</p>\n<p>进程同步机制应遵循的<strong>原则</strong>：空闲让进、忙则等待、有限等待、让权等待。</p>\n<p>实现进程同步的<strong>机制</strong>有：</p>\n<ul>\n<li><strong>互斥锁（Mutex）</strong>：确保同一时间只有一个线程可以访问共享资源。</li>\n<li><strong>信号量（Semaphore）</strong>：用于控制对共享资源的访问数量。</li>\n<li><strong>条件变量（Condition Variable）</strong>：用于线程间的同步，等待某个条件满足后再执行。</li>\n</ul>\n<h4 id=\"PV操作解决生产者-消费者问题\"><a href=\"#PV操作解决生产者-消费者问题\" class=\"headerlink\" title=\"PV操作解决生产者-消费者问题\"></a>PV操作解决生产者-消费者问题</h4><p><strong>信号量定义</strong></p>\n<ul>\n<li><code>mutex</code>：用于保护缓冲区的互斥访问，初始值为1。</li>\n<li><code>empty</code>：表示缓冲区中空闲位置的数量，初始值为<code>N</code>（缓冲区大小）。</li>\n<li><code>full</code>：表示缓冲区中已占用位置的数量，初始值为0。</li>\n</ul>\n<p><strong>生产者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semaphore mutex = <span class=\"number\">1</span>;  <span class=\"comment\">// 互斥信号量</span></span><br><span class=\"line\">semaphore empty = N;  <span class=\"comment\">// 空位信号量，初始值为缓冲区大小</span></span><br><span class=\"line\">semaphore full = <span class=\"number\">0</span>;   <span class=\"comment\">// 满位信号量，初始值为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">producer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        produce_item();  <span class=\"comment\">// 生产一个产品</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//消耗一个产品进入空闲缓冲区</span></span><br><span class=\"line\">        P(empty);        <span class=\"comment\">// 等待空位，减少空位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将产品放入缓冲区</span></span><br><span class=\"line\">        put_item_into_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(full);         <span class=\"comment\">// 增加满位计数，通知消费者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">consumer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        P(full);         <span class=\"comment\">// 等待有产品，减少满位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从缓冲区取出产品</span></span><br><span class=\"line\">        take_item_from_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(empty);        <span class=\"comment\">// 增加空位计数，通知生产者</span></span><br><span class=\"line\">        consume_item();  <span class=\"comment\">// 消费产品</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行示例</strong></p>\n<p>假设缓冲区大小为<code>N</code>：</p>\n<ul>\n<li>初始时，<code>empty = N</code>，<code>full = 0</code>。</li>\n<li>生产者执行<code>P(empty)</code>，<code>empty</code>减1，表示占用一个空位。</li>\n<li>生产者执行<code>V(full)</code>，<code>full</code>加1，表示增加一个满位。</li>\n<li>消费者执行<code>P(full)</code>，<code>full</code>减1，表示取出一个产品。</li>\n<li>消费者执行<code>V(empty)</code>，<code>empty</code>加1，表示释放一个空位。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>操作系统(Operating System;OS)是<strong>计算机硬件与用户之间的接口</strong>(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入&#x2F;输出设备等），并提供用户与计算机交互的界面。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><p>最基本特征为<strong>并发</strong>和<strong>共享</strong>(二者互为存在条件)</p>\n<p><strong>并发</strong>：是指两个或多个活动在同一给定的时间段中进行</p>\n<p><strong>共享</strong>：是指计算机系统中的资源被多个进程所共用</p>\n<p><strong>异步</strong>：进程以不可预知的速度向前推进</p>\n<p><strong>虚拟</strong>：把一个物理上的实体变为若干个逻辑上的对应物</p>\n<p>关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p><strong>1.计算机资源管理：</strong></p>\n<p><strong>处理器管理</strong>:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等</p>\n<p><strong>存储器管理</strong>:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等</p>\n<p><strong>文件管理</strong>:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等</p>\n<p><strong>设备管理</strong>:主要包括缓冲管理、设备分配、设备处理、虚拟设备等</p>\n<p>2.<strong>作为用户与计算机硬件系统之间的接口</strong>：<strong>命令接口和程序接口</strong></p>\n<p>3.<strong>用作扩充机器</strong>。</p>\n<h3 id=\"一些基本概念\"><a href=\"#一些基本概念\" class=\"headerlink\" title=\"一些基本概念\"></a>一些基本概念</h3><ul>\n<li>特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。</li>\n<li>非特权指令：普通的运算指令</li>\n<li>内核程序：系统的管理者，可以执行一切指令，运行在核心态</li>\n<li>应用程序：普通用户程序只能执行非特权程序，运行在用户态</li>\n</ul>\n<p><strong>处理器状态：</strong></p>\n<ul>\n<li>用户态(目态)：CPU只能执行非特权指令</li>\n<li>核心态(管态、内核态)：可以执行所有指令</li>\n<li>用户态到内核态：通过中断或异常**(是硬件完成的)**</li>\n<li>核心态到用户态：特权指令psw的标志位，0用户态，1核心态。</li>\n</ul>\n<p><strong>原语：</strong></p>\n<ul>\n<li>处在操作系统的最底层，是最接近硬件的部分</li>\n<li>这些程序的运行具有原子性，其操作只能一气呵成</li>\n<li>这些程序的运行时间都较短，而且调用频繁</li>\n</ul>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><h3 id=\"进程（Process）\"><a href=\"#进程（Process）\" class=\"headerlink\" title=\"进程（Process）\"></a><strong>进程（Process）</strong></h3><p>进程是<strong>操作系统进行资源分配和调度的基本单位</strong>，是<strong>程序在处理器上的一次运行活动</strong>。进程包括程序控制块、PCB、程序段、数据段。</p>\n<p>PCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>动态性(基本特征)</strong>：进程是动态的实体，有创建、运行、阻塞、终止等状态。</li>\n<li><strong>并发性</strong>：多个进程可以同时运行，共享系统资源。</li>\n<li><strong>独立性</strong>：<strong>进程是资源分配的基本单位</strong>，具有独立的资源和运行环境。</li>\n<li>异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。</li>\n<li>结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。</li>\n</ul>\n<p><strong>进程状态：</strong></p>\n<ul>\n<li><strong>就绪态（Ready）</strong>：进程已准备好运行，等待CPU分配。</li>\n<li><strong>运行态（Running）</strong>：进程正在CPU上运行。</li>\n<li><strong>阻塞态（Blocked）</strong>：进程因等待某种事件（如I&#x2F;O操作完成）而暂停运行。</li>\n</ul>\n<p>进程的状态转换：</p>\n<p><img src=\"/2025/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20250218154211332.png\"></p>\n<p><strong>线程（Thread）</strong></p>\n<p><strong>线程是进程中的一个执行单元，是CPU调度的基本单位</strong>。一个进程可以包含多个线程，它们共享进程的资源。<br><strong>特点：</strong></p>\n<ul>\n<li><strong>轻量级</strong>：线程的创建和切换开销小。</li>\n<li><strong>并发性</strong>：多个线程可以并发执行，提高程序的效率。</li>\n<li><strong>共享资源</strong>：线程共享所属进程的资源，如内存空间。</li>\n</ul>\n<p><strong>线程与进程的区别：</strong></p>\n<ul>\n<li>线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。</li>\n<li>进程是资源分配的基本单位，线程是CPU调度的基本单位。</li>\n</ul>\n<p>CPU调度常用算法</p>\n<ul>\n<li><p><strong>先来先服务（FCFS，First-Come-First-Served）</strong>：按进程到达的顺序调度，简单但可能导致饥饿现象。</p>\n</li>\n<li><p><strong>最短作业优先（SJF，Shortest Job First）</strong>：优先调度运行时间最短的进程，但需要预估进程运行时间。</p>\n</li>\n<li><p><strong>优先级调度（Priority Scheduling）</strong>：根据进程的优先级进行调度，优先级高的进程优先运行。</p>\n</li>\n<li><p><strong>最高响应比优先（HRRN,Highest Response Ratio Next）</strong>：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的<strong>响应比</strong>来选择下一个执行的进程，响应比公式为：</p>\n<p><strong>响应比 &#x3D; 1 + 等待时间 &#x2F; 执行时间</strong></p>\n<ul>\n<li><strong>特点</strong>：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。</li>\n<li><strong>优点</strong>：兼顾公平性和效率，避免饥饿问题，适合批处理系统。</li>\n<li><strong>缺点</strong>：计算复杂度较高，调度开销大。</li>\n<li><strong>适用场景</strong>：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。</li>\n</ul>\n</li>\n<li><p><strong>时间片轮转（RR，Round-Robin）</strong>：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。</p>\n</li>\n</ul>\n<h3 id=\"进程的通信\"><a href=\"#进程的通信\" class=\"headerlink\" title=\"进程的通信\"></a>进程的通信</h3><p>1）进程通信是指进程之间的信息交换。</p>\n<p><strong>低级通信</strong>：PV操作</p>\n<p><strong>高级通信</strong>：是指以较高的效率传输大量数据的通信方式。</p>\n<p>高级通信方法主要有三类：</p>\n<p>1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。</p>\n<p>2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。</p>\n<p>3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。</p>\n<p><strong>临界区</strong>：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段<strong>代码</strong>称为临界区。</p>\n<p>进程同步机制应遵循的<strong>原则</strong>：空闲让进、忙则等待、有限等待、让权等待。</p>\n<p>实现进程同步的<strong>机制</strong>有：</p>\n<ul>\n<li><strong>互斥锁（Mutex）</strong>：确保同一时间只有一个线程可以访问共享资源。</li>\n<li><strong>信号量（Semaphore）</strong>：用于控制对共享资源的访问数量。</li>\n<li><strong>条件变量（Condition Variable）</strong>：用于线程间的同步，等待某个条件满足后再执行。</li>\n</ul>\n<h4 id=\"PV操作解决生产者-消费者问题\"><a href=\"#PV操作解决生产者-消费者问题\" class=\"headerlink\" title=\"PV操作解决生产者-消费者问题\"></a>PV操作解决生产者-消费者问题</h4><p><strong>信号量定义</strong></p>\n<ul>\n<li><code>mutex</code>：用于保护缓冲区的互斥访问，初始值为1。</li>\n<li><code>empty</code>：表示缓冲区中空闲位置的数量，初始值为<code>N</code>（缓冲区大小）。</li>\n<li><code>full</code>：表示缓冲区中已占用位置的数量，初始值为0。</li>\n</ul>\n<p><strong>生产者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semaphore mutex = <span class=\"number\">1</span>;  <span class=\"comment\">// 互斥信号量</span></span><br><span class=\"line\">semaphore empty = N;  <span class=\"comment\">// 空位信号量，初始值为缓冲区大小</span></span><br><span class=\"line\">semaphore full = <span class=\"number\">0</span>;   <span class=\"comment\">// 满位信号量，初始值为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">producer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        produce_item();  <span class=\"comment\">// 生产一个产品</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//消耗一个产品进入空闲缓冲区</span></span><br><span class=\"line\">        P(empty);        <span class=\"comment\">// 等待空位，减少空位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将产品放入缓冲区</span></span><br><span class=\"line\">        put_item_into_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(full);         <span class=\"comment\">// 增加满位计数，通知消费者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">consumer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        P(full);         <span class=\"comment\">// 等待有产品，减少满位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从缓冲区取出产品</span></span><br><span class=\"line\">        take_item_from_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(empty);        <span class=\"comment\">// 增加空位计数，通知生产者</span></span><br><span class=\"line\">        consume_item();  <span class=\"comment\">// 消费产品</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行示例</strong></p>\n<p>假设缓冲区大小为<code>N</code>：</p>\n<ul>\n<li>初始时，<code>empty = N</code>，<code>full = 0</code>。</li>\n<li>生产者执行<code>P(empty)</code>，<code>empty</code>减1，表示占用一个空位。</li>\n<li>生产者执行<code>V(full)</code>，<code>full</code>加1，表示增加一个满位。</li>\n<li>消费者执行<code>P(full)</code>，<code>full</code>减1，表示取出一个产品。</li>\n<li>消费者执行<code>V(empty)</code>，<code>empty</code>加1，表示释放一个空位。</li>\n</ul>\n"},{"title":"编译原理","date":"2025-02-20T16:00:00.000Z","updated":"2025-02-20T16:00:00.000Z","_content":"\n## 引论\n\n### **编译程序的工作过程：**\n\n**1.词法分析**：扫描源程序，**分解和识别出每个单词**，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。\n\n![image-20250227151200265](编译原理/image-20250227151200265.png)\n\n![image-20250227151247399](编译原理/image-20250227151247399.png)\n\n**2.语法分析**：把单词符号串**分解成各类语法单位**，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。生成语法分析树。\n\n![image-20250227151841607](编译原理/image-20250227151841607.png)\n\n![image-20250227152023060](编译原理/image-20250227152023060.png)\n\n**3.语义分析**：保证标识符和常数的正确使用。\n\n![image-20250227152807156](编译原理/image-20250227152807156.png)\n\n![image-20250227152724965](编译原理/image-20250227152724965.png)\n\n**4.中间代码生成**(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。\n\n**5.中间代码优化**(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。\n\n![image-20250227153008093](编译原理/image-20250227153008093.png)\n\n**6.目标代码生成**：将优化后的代码转换成等价的机器代码或汇编指令。\n\n### **编译程序结构**\n\n![1740148009384](编译原理/1740148009384.jpg)\n\n### 编译器的结构\n\n![image-20250227150333372](编译原理/image-20250227150333372.png)\n\n### 高级程序设计语言翻译的两种方式\n\n1.编译方式是指在程序运行之前，将高级语言程序完整地**翻译**成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。\n\n2.解释方式是指在程序运行时，逐条读取高级语言程序并**翻译执行**。解释器（Interpreter）是实现这一过程的软件工具。\n\n![image-20250221230151097](编译原理/image-20250221230151097.png)\n\n### 编译程序的自展\n\n1. **定义**：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。\n2. **过程**：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。\n3. **优点**：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。\n\n### 编译程序的移植\n\n1. **定义**：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。\n2. **方法**：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。\n3. **挑战**：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。\n\n### 编译程序的自动化\n\n**定义**：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。\n\n### 并行编译的概念\n\n1. **定义**：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。\n2. **原理**：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。\n\n## 形式语言理论\n\n形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。\n\n### 词法语法分析基本概念：\n\n![image-20250228145123531](编译原理/image-20250228145123531.png)\n\n![image-20250228145227529](编译原理/image-20250228145227529.png)\n\n![image-20250228145403598](编译原理/image-20250228145403598.png)\n\n### **形式文法（Formal Grammar）**\n\n形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：\n\n![image-20250228145643174](编译原理/image-20250228145643174.png)\n\n![](编译原理/image-20250228150052444.png)\n\nS:开始符号。表示该文法最大的语法成分。例如：S=<句子>。\n\n简单示例：\n\n![image-20250228150333188](编译原理/image-20250228150333188.png)\n\n![image-20250228150433021](编译原理/image-20250228150433021.png)\n\n符号约定\n\n![image-20250228150731110](编译原理/image-20250228150731110.png)\n\n### 语言的定义：\n\n![image-20250228151432029](编译原理/image-20250228151432029.png)\n\n![image-20250228151703680](编译原理/image-20250228151703680.png)\n\n**文法解决了无穷语言的有穷表示问题**\n\n### 文法的分类\n\n**乔姆斯基文法层次的四个类型及其特点：**\n\n------\n\n1. **0型文法（无限制文法或短语结构文法，Type-0 Grammar）PSG**\n\n- **定义**：产生式规则的形式为`α → β`，其中`α`和`β`是字母表上的符号序列，且**`α`中至少包含一个非终结符**。\n- **特点**：\n  - 产生式规则没有任何限制。\n  - 可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。\n- **对应的自动机**：图灵机（Turing Machine）。\n- **应用场景**：图灵机是计算模型的理论基础，用于研究可计算性问题。\n\n------\n\n2. **1型文法（上下文有关文法，Type-1 Grammar）CSG**\n\n- **定义**：产生式规则的形式为`αAβ → αγβ`，其中`A`是非终结符，`α`、`β`和`γ`是符号序列，**且`γ`不能为空**即不包含空产生式。\n- **特点**：\n  - 非终结符的替换依赖于上下文（即`α`和`β`）。\n  - 生成的语言称为上下文有关语言（Context-Sensitive Languages）。\n  - 语言的复杂性介于上下文无关语言和递归可枚举语言之间。\n- **对应的自动机**：线性有界自动机（Linear Bounded Automata, LBA）。\n- **应用场景**：主要用于理论研究，实际应用较少。\n\n------\n\n3. **2型文法（上下文无关文法，Type-2 Grammar）CFG**\n\n- **定义**：产生式规则的形式为`A → α`，其中`A`是非终结符，`α`是符号序列（可以包含终结符和非终结符）。\n- **特点**：\n  - 非终结符的替换不依赖于上下文。\n  - 生成的语言称为上下文无关语言（Context-Free Languages）。\n  - 语言的复杂性较低，适合描述程序设计语言的语法结构。\n- **对应的自动机**：下推自动机（Pushdown Automata, PDA）。\n- **应用场景**：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。\n\n------\n\n4. **3型文法（正则文法，Type-3 Grammar）RG**\n\n- **定义**：产生式规则的形式为`A → aB`或`A → a`，其中`A`和`B`是非终结符，`a`是终结符。\n  - 也可以写成`A → a`或`A → aB`的形式（右线性文法）。\n- **特点**：\n  - 生成的语言称为正则语言（Regular Languages）。\n  - 语言的复杂性最低，适合描述简单的模式匹配。\n- **对应的自动机**：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。\n- **应用场景**：广泛用于词法分析器的设计，例如正则表达式匹配。\n\n#### 乔姆斯基文法层次的总结\n\n| 类型    | 特点       | 产生式规则                           | 语言类别       | 对应的自动机   |\n| :------ | :--------- | :----------------------------------- | :------------- | :------------- |\n| 0型文法 | 无限制     | `α → β`（`α`中至少包含一个非终结符） | 递归可枚举语言 | 图灵机         |\n| 1型文法 | 上下文有关 | `αAβ → αγβ`（`γ`不能为空）           | 上下文有关语言 | 线性有界自动机 |\n| 2型文法 | 上下文无关 | `A → α`                              | 上下文无关语言 | 下推自动机     |\n| 3型文法 | 正则       | `A → aB` 或 `A → a`                  | 正则语言       | 有限状态自动机 |\n\n### CFG的分析树\n\n![image-20250228192438996](编译原理/image-20250228192438996.png)\n\n![image-20250228192800546](编译原理/image-20250228192800546.png)\n\n## 词法分析\n\n### 正则表达式\n\n![image-20250228193938121](编译原理/image-20250228193938121.png)\n\n![image-20250228194036448](编译原理/image-20250228194036448.png)\n\n![image-20250228194128221](编译原理/image-20250228194128221.png)\n\n![image-20250228194206882](编译原理/image-20250228194206882.png)\n\n### 正则定义\n\n![image-20250228194501097](编译原理/image-20250228194501097.png)\n\n![image-20250228194515565](编译原理/image-20250228194515565.png)\n\n![image-20250228194652018](编译原理/image-20250228194652018.png)\n\n### 有穷自动机\n\n有穷自动机（Finite Automaton）FA是一种数学模型，用于描述具有有限状态的系统，它可以用来识别输入符号串是否符合某种模式或语言。\n\n![image-20250228212619061](编译原理/image-20250228212619061.png)\n\n![image-20250228212648230](编译原理/image-20250228212648230.png)\n\n**分类**\n\n有穷自动机主要分为以下两种类型：\n\n- **确定型有穷自动机（DFA, Deterministic Finite Automaton）**：对于每个状态和输入符号，转移函数 *δ* 定义了唯一一个确定的下一个状态。\n- **非确定型有穷自动机（NFA, Nondeterministic Finite Automaton）**：对于每个状态和输入符号，转移函数 *δ* 可以定义多个可能的下一个状态，甚至允许在没有输入的情况下进行状态转移（即空转移）。\n\n![image-20250228212945534](编译原理/image-20250228212945534.png)\n\n![image-20250228213348367](编译原理/image-20250228213348367.png)\n\n![image-20250228213537699](编译原理/image-20250228213537699.png)\n\n![image-20250228213653344](编译原理/image-20250228213653344.png)\n\n![image-20250228213802223](编译原理/image-20250228213802223.png)\n\n![image-20250228213930767](编译原理/image-20250228213930767.png)\n\n![image-20250228214124879](编译原理/image-20250228214124879.png)\n\n![image-20250228214223449](编译原理/image-20250228214223449.png)\n\n![image-20250228214400701](编译原理/image-20250228214400701.png)\n\n### 从正则表达式到有穷自动机\n\n![image-20250228214703417](编译原理/image-20250228214703417.png)\n\n![image-20250228214909259](编译原理/image-20250228214909259.png)\n\n![](编译原理/image-20250228215155976.png)\n\n![image-20250228215437342](编译原理/image-20250228215437342.png) \n\n### 识别单词的DFA\n\n![image-20250228232506318](编译原理/image-20250228232506318.png)\n\n![image-20250228232533260](编译原理/image-20250228232533260.png)\n\n![image-20250228232627479](编译原理/image-20250228232627479.png)\n\n![image-20250228232702871](编译原理/image-20250228232702871.png)\n\n![image-20250228232725709](编译原理/image-20250228232725709.png)\n\n![image-20250228232819417](编译原理/image-20250228232819417.png)\n\n![image-20250228232857300](编译原理/image-20250228232857300.png)","source":"_posts/编译原理.md","raw":"---\ntitle: 编译原理\ndate: 2025-02-21\nupdated: 2025-02-21\ncategories: 计算机基础\n---\n\n## 引论\n\n### **编译程序的工作过程：**\n\n**1.词法分析**：扫描源程序，**分解和识别出每个单词**，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。\n\n![image-20250227151200265](编译原理/image-20250227151200265.png)\n\n![image-20250227151247399](编译原理/image-20250227151247399.png)\n\n**2.语法分析**：把单词符号串**分解成各类语法单位**，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。生成语法分析树。\n\n![image-20250227151841607](编译原理/image-20250227151841607.png)\n\n![image-20250227152023060](编译原理/image-20250227152023060.png)\n\n**3.语义分析**：保证标识符和常数的正确使用。\n\n![image-20250227152807156](编译原理/image-20250227152807156.png)\n\n![image-20250227152724965](编译原理/image-20250227152724965.png)\n\n**4.中间代码生成**(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。\n\n**5.中间代码优化**(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。\n\n![image-20250227153008093](编译原理/image-20250227153008093.png)\n\n**6.目标代码生成**：将优化后的代码转换成等价的机器代码或汇编指令。\n\n### **编译程序结构**\n\n![1740148009384](编译原理/1740148009384.jpg)\n\n### 编译器的结构\n\n![image-20250227150333372](编译原理/image-20250227150333372.png)\n\n### 高级程序设计语言翻译的两种方式\n\n1.编译方式是指在程序运行之前，将高级语言程序完整地**翻译**成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。\n\n2.解释方式是指在程序运行时，逐条读取高级语言程序并**翻译执行**。解释器（Interpreter）是实现这一过程的软件工具。\n\n![image-20250221230151097](编译原理/image-20250221230151097.png)\n\n### 编译程序的自展\n\n1. **定义**：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。\n2. **过程**：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。\n3. **优点**：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。\n\n### 编译程序的移植\n\n1. **定义**：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。\n2. **方法**：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。\n3. **挑战**：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。\n\n### 编译程序的自动化\n\n**定义**：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。\n\n### 并行编译的概念\n\n1. **定义**：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。\n2. **原理**：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。\n\n## 形式语言理论\n\n形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。\n\n### 词法语法分析基本概念：\n\n![image-20250228145123531](编译原理/image-20250228145123531.png)\n\n![image-20250228145227529](编译原理/image-20250228145227529.png)\n\n![image-20250228145403598](编译原理/image-20250228145403598.png)\n\n### **形式文法（Formal Grammar）**\n\n形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：\n\n![image-20250228145643174](编译原理/image-20250228145643174.png)\n\n![](编译原理/image-20250228150052444.png)\n\nS:开始符号。表示该文法最大的语法成分。例如：S=<句子>。\n\n简单示例：\n\n![image-20250228150333188](编译原理/image-20250228150333188.png)\n\n![image-20250228150433021](编译原理/image-20250228150433021.png)\n\n符号约定\n\n![image-20250228150731110](编译原理/image-20250228150731110.png)\n\n### 语言的定义：\n\n![image-20250228151432029](编译原理/image-20250228151432029.png)\n\n![image-20250228151703680](编译原理/image-20250228151703680.png)\n\n**文法解决了无穷语言的有穷表示问题**\n\n### 文法的分类\n\n**乔姆斯基文法层次的四个类型及其特点：**\n\n------\n\n1. **0型文法（无限制文法或短语结构文法，Type-0 Grammar）PSG**\n\n- **定义**：产生式规则的形式为`α → β`，其中`α`和`β`是字母表上的符号序列，且**`α`中至少包含一个非终结符**。\n- **特点**：\n  - 产生式规则没有任何限制。\n  - 可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。\n- **对应的自动机**：图灵机（Turing Machine）。\n- **应用场景**：图灵机是计算模型的理论基础，用于研究可计算性问题。\n\n------\n\n2. **1型文法（上下文有关文法，Type-1 Grammar）CSG**\n\n- **定义**：产生式规则的形式为`αAβ → αγβ`，其中`A`是非终结符，`α`、`β`和`γ`是符号序列，**且`γ`不能为空**即不包含空产生式。\n- **特点**：\n  - 非终结符的替换依赖于上下文（即`α`和`β`）。\n  - 生成的语言称为上下文有关语言（Context-Sensitive Languages）。\n  - 语言的复杂性介于上下文无关语言和递归可枚举语言之间。\n- **对应的自动机**：线性有界自动机（Linear Bounded Automata, LBA）。\n- **应用场景**：主要用于理论研究，实际应用较少。\n\n------\n\n3. **2型文法（上下文无关文法，Type-2 Grammar）CFG**\n\n- **定义**：产生式规则的形式为`A → α`，其中`A`是非终结符，`α`是符号序列（可以包含终结符和非终结符）。\n- **特点**：\n  - 非终结符的替换不依赖于上下文。\n  - 生成的语言称为上下文无关语言（Context-Free Languages）。\n  - 语言的复杂性较低，适合描述程序设计语言的语法结构。\n- **对应的自动机**：下推自动机（Pushdown Automata, PDA）。\n- **应用场景**：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。\n\n------\n\n4. **3型文法（正则文法，Type-3 Grammar）RG**\n\n- **定义**：产生式规则的形式为`A → aB`或`A → a`，其中`A`和`B`是非终结符，`a`是终结符。\n  - 也可以写成`A → a`或`A → aB`的形式（右线性文法）。\n- **特点**：\n  - 生成的语言称为正则语言（Regular Languages）。\n  - 语言的复杂性最低，适合描述简单的模式匹配。\n- **对应的自动机**：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。\n- **应用场景**：广泛用于词法分析器的设计，例如正则表达式匹配。\n\n#### 乔姆斯基文法层次的总结\n\n| 类型    | 特点       | 产生式规则                           | 语言类别       | 对应的自动机   |\n| :------ | :--------- | :----------------------------------- | :------------- | :------------- |\n| 0型文法 | 无限制     | `α → β`（`α`中至少包含一个非终结符） | 递归可枚举语言 | 图灵机         |\n| 1型文法 | 上下文有关 | `αAβ → αγβ`（`γ`不能为空）           | 上下文有关语言 | 线性有界自动机 |\n| 2型文法 | 上下文无关 | `A → α`                              | 上下文无关语言 | 下推自动机     |\n| 3型文法 | 正则       | `A → aB` 或 `A → a`                  | 正则语言       | 有限状态自动机 |\n\n### CFG的分析树\n\n![image-20250228192438996](编译原理/image-20250228192438996.png)\n\n![image-20250228192800546](编译原理/image-20250228192800546.png)\n\n## 词法分析\n\n### 正则表达式\n\n![image-20250228193938121](编译原理/image-20250228193938121.png)\n\n![image-20250228194036448](编译原理/image-20250228194036448.png)\n\n![image-20250228194128221](编译原理/image-20250228194128221.png)\n\n![image-20250228194206882](编译原理/image-20250228194206882.png)\n\n### 正则定义\n\n![image-20250228194501097](编译原理/image-20250228194501097.png)\n\n![image-20250228194515565](编译原理/image-20250228194515565.png)\n\n![image-20250228194652018](编译原理/image-20250228194652018.png)\n\n### 有穷自动机\n\n有穷自动机（Finite Automaton）FA是一种数学模型，用于描述具有有限状态的系统，它可以用来识别输入符号串是否符合某种模式或语言。\n\n![image-20250228212619061](编译原理/image-20250228212619061.png)\n\n![image-20250228212648230](编译原理/image-20250228212648230.png)\n\n**分类**\n\n有穷自动机主要分为以下两种类型：\n\n- **确定型有穷自动机（DFA, Deterministic Finite Automaton）**：对于每个状态和输入符号，转移函数 *δ* 定义了唯一一个确定的下一个状态。\n- **非确定型有穷自动机（NFA, Nondeterministic Finite Automaton）**：对于每个状态和输入符号，转移函数 *δ* 可以定义多个可能的下一个状态，甚至允许在没有输入的情况下进行状态转移（即空转移）。\n\n![image-20250228212945534](编译原理/image-20250228212945534.png)\n\n![image-20250228213348367](编译原理/image-20250228213348367.png)\n\n![image-20250228213537699](编译原理/image-20250228213537699.png)\n\n![image-20250228213653344](编译原理/image-20250228213653344.png)\n\n![image-20250228213802223](编译原理/image-20250228213802223.png)\n\n![image-20250228213930767](编译原理/image-20250228213930767.png)\n\n![image-20250228214124879](编译原理/image-20250228214124879.png)\n\n![image-20250228214223449](编译原理/image-20250228214223449.png)\n\n![image-20250228214400701](编译原理/image-20250228214400701.png)\n\n### 从正则表达式到有穷自动机\n\n![image-20250228214703417](编译原理/image-20250228214703417.png)\n\n![image-20250228214909259](编译原理/image-20250228214909259.png)\n\n![](编译原理/image-20250228215155976.png)\n\n![image-20250228215437342](编译原理/image-20250228215437342.png) \n\n### 识别单词的DFA\n\n![image-20250228232506318](编译原理/image-20250228232506318.png)\n\n![image-20250228232533260](编译原理/image-20250228232533260.png)\n\n![image-20250228232627479](编译原理/image-20250228232627479.png)\n\n![image-20250228232702871](编译原理/image-20250228232702871.png)\n\n![image-20250228232725709](编译原理/image-20250228232725709.png)\n\n![image-20250228232819417](编译原理/image-20250228232819417.png)\n\n![image-20250228232857300](编译原理/image-20250228232857300.png)","slug":"编译原理","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apj001bpootcgs09aen","content":"<h2 id=\"引论\"><a href=\"#引论\" class=\"headerlink\" title=\"引论\"></a>引论</h2><h3 id=\"编译程序的工作过程：\"><a href=\"#编译程序的工作过程：\" class=\"headerlink\" title=\"编译程序的工作过程：\"></a><strong>编译程序的工作过程：</strong></h3><p><strong>1.词法分析</strong>：扫描源程序，<strong>分解和识别出每个单词</strong>，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227151200265.png\" alt=\"image-20250227151200265\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227151247399.png\" alt=\"image-20250227151247399\"></p>\n<p><strong>2.语法分析</strong>：把单词符号串<strong>分解成各类语法单位</strong>，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。生成语法分析树。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227151841607.png\" alt=\"image-20250227151841607\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227152023060.png\" alt=\"image-20250227152023060\"></p>\n<p><strong>3.语义分析</strong>：保证标识符和常数的正确使用。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227152807156.png\" alt=\"image-20250227152807156\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227152724965.png\" alt=\"image-20250227152724965\"></p>\n<p><strong>4.中间代码生成</strong>(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。</p>\n<p><strong>5.中间代码优化</strong>(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227153008093.png\" alt=\"image-20250227153008093\"></p>\n<p><strong>6.目标代码生成</strong>：将优化后的代码转换成等价的机器代码或汇编指令。</p>\n<h3 id=\"编译程序结构\"><a href=\"#编译程序结构\" class=\"headerlink\" title=\"编译程序结构\"></a><strong>编译程序结构</strong></h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1740148009384.jpg\" alt=\"1740148009384\"></p>\n<h3 id=\"编译器的结构\"><a href=\"#编译器的结构\" class=\"headerlink\" title=\"编译器的结构\"></a>编译器的结构</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227150333372.png\" alt=\"image-20250227150333372\"></p>\n<h3 id=\"高级程序设计语言翻译的两种方式\"><a href=\"#高级程序设计语言翻译的两种方式\" class=\"headerlink\" title=\"高级程序设计语言翻译的两种方式\"></a>高级程序设计语言翻译的两种方式</h3><p>1.编译方式是指在程序运行之前，将高级语言程序完整地<strong>翻译</strong>成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。</p>\n<p>2.解释方式是指在程序运行时，逐条读取高级语言程序并<strong>翻译执行</strong>。解释器（Interpreter）是实现这一过程的软件工具。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250221230151097.png\" alt=\"image-20250221230151097\"></p>\n<h3 id=\"编译程序的自展\"><a href=\"#编译程序的自展\" class=\"headerlink\" title=\"编译程序的自展\"></a>编译程序的自展</h3><ol>\n<li><strong>定义</strong>：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。</li>\n<li><strong>过程</strong>：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。</li>\n<li><strong>优点</strong>：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。</li>\n</ol>\n<h3 id=\"编译程序的移植\"><a href=\"#编译程序的移植\" class=\"headerlink\" title=\"编译程序的移植\"></a>编译程序的移植</h3><ol>\n<li><strong>定义</strong>：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。</li>\n<li><strong>方法</strong>：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。</li>\n<li><strong>挑战</strong>：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。</li>\n</ol>\n<h3 id=\"编译程序的自动化\"><a href=\"#编译程序的自动化\" class=\"headerlink\" title=\"编译程序的自动化\"></a>编译程序的自动化</h3><p><strong>定义</strong>：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。</p>\n<h3 id=\"并行编译的概念\"><a href=\"#并行编译的概念\" class=\"headerlink\" title=\"并行编译的概念\"></a>并行编译的概念</h3><ol>\n<li><strong>定义</strong>：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。</li>\n<li><strong>原理</strong>：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。</li>\n</ol>\n<h2 id=\"形式语言理论\"><a href=\"#形式语言理论\" class=\"headerlink\" title=\"形式语言理论\"></a>形式语言理论</h2><p>形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。</p>\n<h3 id=\"词法语法分析基本概念：\"><a href=\"#词法语法分析基本概念：\" class=\"headerlink\" title=\"词法语法分析基本概念：\"></a>词法语法分析基本概念：</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145123531.png\" alt=\"image-20250228145123531\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145227529.png\" alt=\"image-20250228145227529\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145403598.png\" alt=\"image-20250228145403598\"></p>\n<h3 id=\"形式文法（Formal-Grammar）\"><a href=\"#形式文法（Formal-Grammar）\" class=\"headerlink\" title=\"形式文法（Formal Grammar）\"></a><strong>形式文法（Formal Grammar）</strong></h3><p>形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145643174.png\" alt=\"image-20250228145643174\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150052444.png\"></p>\n<p>S:开始符号。表示该文法最大的语法成分。例如：S&#x3D;&lt;句子&gt;。</p>\n<p>简单示例：</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150333188.png\" alt=\"image-20250228150333188\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150433021.png\" alt=\"image-20250228150433021\"></p>\n<p>符号约定</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150731110.png\" alt=\"image-20250228150731110\"></p>\n<h3 id=\"语言的定义：\"><a href=\"#语言的定义：\" class=\"headerlink\" title=\"语言的定义：\"></a>语言的定义：</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228151432029.png\" alt=\"image-20250228151432029\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228151703680.png\" alt=\"image-20250228151703680\"></p>\n<p><strong>文法解决了无穷语言的有穷表示问题</strong></p>\n<h3 id=\"文法的分类\"><a href=\"#文法的分类\" class=\"headerlink\" title=\"文法的分类\"></a>文法的分类</h3><p><strong>乔姆斯基文法层次的四个类型及其特点：</strong></p>\n<hr>\n<ol>\n<li><strong>0型文法（无限制文法或短语结构文法，Type-0 Grammar）PSG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>α → β</code>，其中<code>α</code>和<code>β</code>是字母表上的符号序列，且**<code>α</code>中至少包含一个非终结符**。</li>\n<li><strong>特点</strong>：<ul>\n<li>产生式规则没有任何限制。</li>\n<li>可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：图灵机（Turing Machine）。</li>\n<li><strong>应用场景</strong>：图灵机是计算模型的理论基础，用于研究可计算性问题。</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li><strong>1型文法（上下文有关文法，Type-1 Grammar）CSG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>αAβ → αγβ</code>，其中<code>A</code>是非终结符，<code>α</code>、<code>β</code>和<code>γ</code>是符号序列，<strong>且<code>γ</code>不能为空</strong>即不包含空产生式。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换依赖于上下文（即<code>α</code>和<code>β</code>）。</li>\n<li>生成的语言称为上下文有关语言（Context-Sensitive Languages）。</li>\n<li>语言的复杂性介于上下文无关语言和递归可枚举语言之间。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：线性有界自动机（Linear Bounded Automata, LBA）。</li>\n<li><strong>应用场景</strong>：主要用于理论研究，实际应用较少。</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li><strong>2型文法（上下文无关文法，Type-2 Grammar）CFG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → α</code>，其中<code>A</code>是非终结符，<code>α</code>是符号序列（可以包含终结符和非终结符）。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换不依赖于上下文。</li>\n<li>生成的语言称为上下文无关语言（Context-Free Languages）。</li>\n<li>语言的复杂性较低，适合描述程序设计语言的语法结构。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：下推自动机（Pushdown Automata, PDA）。</li>\n<li><strong>应用场景</strong>：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。</li>\n</ul>\n<hr>\n<ol start=\"4\">\n<li><strong>3型文法（正则文法，Type-3 Grammar）RG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → aB</code>或<code>A → a</code>，其中<code>A</code>和<code>B</code>是非终结符，<code>a</code>是终结符。<ul>\n<li>也可以写成<code>A → a</code>或<code>A → aB</code>的形式（右线性文法）。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li>生成的语言称为正则语言（Regular Languages）。</li>\n<li>语言的复杂性最低，适合描述简单的模式匹配。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。</li>\n<li><strong>应用场景</strong>：广泛用于词法分析器的设计，例如正则表达式匹配。</li>\n</ul>\n<h4 id=\"乔姆斯基文法层次的总结\"><a href=\"#乔姆斯基文法层次的总结\" class=\"headerlink\" title=\"乔姆斯基文法层次的总结\"></a>乔姆斯基文法层次的总结</h4><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">特点</th>\n<th align=\"left\">产生式规则</th>\n<th align=\"left\">语言类别</th>\n<th align=\"left\">对应的自动机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0型文法</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\"><code>α → β</code>（<code>α</code>中至少包含一个非终结符）</td>\n<td align=\"left\">递归可枚举语言</td>\n<td align=\"left\">图灵机</td>\n</tr>\n<tr>\n<td align=\"left\">1型文法</td>\n<td align=\"left\">上下文有关</td>\n<td align=\"left\"><code>αAβ → αγβ</code>（<code>γ</code>不能为空）</td>\n<td align=\"left\">上下文有关语言</td>\n<td align=\"left\">线性有界自动机</td>\n</tr>\n<tr>\n<td align=\"left\">2型文法</td>\n<td align=\"left\">上下文无关</td>\n<td align=\"left\"><code>A → α</code></td>\n<td align=\"left\">上下文无关语言</td>\n<td align=\"left\">下推自动机</td>\n</tr>\n<tr>\n<td align=\"left\">3型文法</td>\n<td align=\"left\">正则</td>\n<td align=\"left\"><code>A → aB</code> 或 <code>A → a</code></td>\n<td align=\"left\">正则语言</td>\n<td align=\"left\">有限状态自动机</td>\n</tr>\n</tbody></table>\n<h3 id=\"CFG的分析树\"><a href=\"#CFG的分析树\" class=\"headerlink\" title=\"CFG的分析树\"></a>CFG的分析树</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228192438996.png\" alt=\"image-20250228192438996\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228192800546.png\" alt=\"image-20250228192800546\"></p>\n<h2 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h2><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228193938121.png\" alt=\"image-20250228193938121\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194036448.png\" alt=\"image-20250228194036448\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194128221.png\" alt=\"image-20250228194128221\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194206882.png\" alt=\"image-20250228194206882\"></p>\n<h3 id=\"正则定义\"><a href=\"#正则定义\" class=\"headerlink\" title=\"正则定义\"></a>正则定义</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194501097.png\" alt=\"image-20250228194501097\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194515565.png\" alt=\"image-20250228194515565\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194652018.png\" alt=\"image-20250228194652018\"></p>\n<h3 id=\"有穷自动机\"><a href=\"#有穷自动机\" class=\"headerlink\" title=\"有穷自动机\"></a>有穷自动机</h3><p>有穷自动机（Finite Automaton）FA是一种数学模型，用于描述具有有限状态的系统，它可以用来识别输入符号串是否符合某种模式或语言。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228212619061.png\" alt=\"image-20250228212619061\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228212648230.png\" alt=\"image-20250228212648230\"></p>\n<p><strong>分类</strong></p>\n<p>有穷自动机主要分为以下两种类型：</p>\n<ul>\n<li><strong>确定型有穷自动机（DFA, Deterministic Finite Automaton）</strong>：对于每个状态和输入符号，转移函数 <em>δ</em> 定义了唯一一个确定的下一个状态。</li>\n<li><strong>非确定型有穷自动机（NFA, Nondeterministic Finite Automaton）</strong>：对于每个状态和输入符号，转移函数 <em>δ</em> 可以定义多个可能的下一个状态，甚至允许在没有输入的情况下进行状态转移（即空转移）。</li>\n</ul>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228212945534.png\" alt=\"image-20250228212945534\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213348367.png\" alt=\"image-20250228213348367\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213537699.png\" alt=\"image-20250228213537699\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213653344.png\" alt=\"image-20250228213653344\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213802223.png\" alt=\"image-20250228213802223\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213930767.png\" alt=\"image-20250228213930767\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214124879.png\" alt=\"image-20250228214124879\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214223449.png\" alt=\"image-20250228214223449\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214400701.png\" alt=\"image-20250228214400701\"></p>\n<h3 id=\"从正则表达式到有穷自动机\"><a href=\"#从正则表达式到有穷自动机\" class=\"headerlink\" title=\"从正则表达式到有穷自动机\"></a>从正则表达式到有穷自动机</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214703417.png\" alt=\"image-20250228214703417\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214909259.png\" alt=\"image-20250228214909259\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228215155976.png\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228215437342.png\" alt=\"image-20250228215437342\"> </p>\n<h3 id=\"识别单词的DFA\"><a href=\"#识别单词的DFA\" class=\"headerlink\" title=\"识别单词的DFA\"></a>识别单词的DFA</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232506318.png\" alt=\"image-20250228232506318\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232533260.png\" alt=\"image-20250228232533260\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232627479.png\" alt=\"image-20250228232627479\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232702871.png\" alt=\"image-20250228232702871\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232725709.png\" alt=\"image-20250228232725709\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232819417.png\" alt=\"image-20250228232819417\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232857300.png\" alt=\"image-20250228232857300\"></p>\n","excerpt":"","more":"<h2 id=\"引论\"><a href=\"#引论\" class=\"headerlink\" title=\"引论\"></a>引论</h2><h3 id=\"编译程序的工作过程：\"><a href=\"#编译程序的工作过程：\" class=\"headerlink\" title=\"编译程序的工作过程：\"></a><strong>编译程序的工作过程：</strong></h3><p><strong>1.词法分析</strong>：扫描源程序，<strong>分解和识别出每个单词</strong>，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227151200265.png\" alt=\"image-20250227151200265\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227151247399.png\" alt=\"image-20250227151247399\"></p>\n<p><strong>2.语法分析</strong>：把单词符号串<strong>分解成各类语法单位</strong>，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。生成语法分析树。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227151841607.png\" alt=\"image-20250227151841607\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227152023060.png\" alt=\"image-20250227152023060\"></p>\n<p><strong>3.语义分析</strong>：保证标识符和常数的正确使用。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227152807156.png\" alt=\"image-20250227152807156\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227152724965.png\" alt=\"image-20250227152724965\"></p>\n<p><strong>4.中间代码生成</strong>(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。</p>\n<p><strong>5.中间代码优化</strong>(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227153008093.png\" alt=\"image-20250227153008093\"></p>\n<p><strong>6.目标代码生成</strong>：将优化后的代码转换成等价的机器代码或汇编指令。</p>\n<h3 id=\"编译程序结构\"><a href=\"#编译程序结构\" class=\"headerlink\" title=\"编译程序结构\"></a><strong>编译程序结构</strong></h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1740148009384.jpg\" alt=\"1740148009384\"></p>\n<h3 id=\"编译器的结构\"><a href=\"#编译器的结构\" class=\"headerlink\" title=\"编译器的结构\"></a>编译器的结构</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250227150333372.png\" alt=\"image-20250227150333372\"></p>\n<h3 id=\"高级程序设计语言翻译的两种方式\"><a href=\"#高级程序设计语言翻译的两种方式\" class=\"headerlink\" title=\"高级程序设计语言翻译的两种方式\"></a>高级程序设计语言翻译的两种方式</h3><p>1.编译方式是指在程序运行之前，将高级语言程序完整地<strong>翻译</strong>成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。</p>\n<p>2.解释方式是指在程序运行时，逐条读取高级语言程序并<strong>翻译执行</strong>。解释器（Interpreter）是实现这一过程的软件工具。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250221230151097.png\" alt=\"image-20250221230151097\"></p>\n<h3 id=\"编译程序的自展\"><a href=\"#编译程序的自展\" class=\"headerlink\" title=\"编译程序的自展\"></a>编译程序的自展</h3><ol>\n<li><strong>定义</strong>：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。</li>\n<li><strong>过程</strong>：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。</li>\n<li><strong>优点</strong>：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。</li>\n</ol>\n<h3 id=\"编译程序的移植\"><a href=\"#编译程序的移植\" class=\"headerlink\" title=\"编译程序的移植\"></a>编译程序的移植</h3><ol>\n<li><strong>定义</strong>：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。</li>\n<li><strong>方法</strong>：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。</li>\n<li><strong>挑战</strong>：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。</li>\n</ol>\n<h3 id=\"编译程序的自动化\"><a href=\"#编译程序的自动化\" class=\"headerlink\" title=\"编译程序的自动化\"></a>编译程序的自动化</h3><p><strong>定义</strong>：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。</p>\n<h3 id=\"并行编译的概念\"><a href=\"#并行编译的概念\" class=\"headerlink\" title=\"并行编译的概念\"></a>并行编译的概念</h3><ol>\n<li><strong>定义</strong>：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。</li>\n<li><strong>原理</strong>：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。</li>\n</ol>\n<h2 id=\"形式语言理论\"><a href=\"#形式语言理论\" class=\"headerlink\" title=\"形式语言理论\"></a>形式语言理论</h2><p>形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。</p>\n<h3 id=\"词法语法分析基本概念：\"><a href=\"#词法语法分析基本概念：\" class=\"headerlink\" title=\"词法语法分析基本概念：\"></a>词法语法分析基本概念：</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145123531.png\" alt=\"image-20250228145123531\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145227529.png\" alt=\"image-20250228145227529\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145403598.png\" alt=\"image-20250228145403598\"></p>\n<h3 id=\"形式文法（Formal-Grammar）\"><a href=\"#形式文法（Formal-Grammar）\" class=\"headerlink\" title=\"形式文法（Formal Grammar）\"></a><strong>形式文法（Formal Grammar）</strong></h3><p>形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228145643174.png\" alt=\"image-20250228145643174\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150052444.png\"></p>\n<p>S:开始符号。表示该文法最大的语法成分。例如：S&#x3D;&lt;句子&gt;。</p>\n<p>简单示例：</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150333188.png\" alt=\"image-20250228150333188\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150433021.png\" alt=\"image-20250228150433021\"></p>\n<p>符号约定</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228150731110.png\" alt=\"image-20250228150731110\"></p>\n<h3 id=\"语言的定义：\"><a href=\"#语言的定义：\" class=\"headerlink\" title=\"语言的定义：\"></a>语言的定义：</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228151432029.png\" alt=\"image-20250228151432029\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228151703680.png\" alt=\"image-20250228151703680\"></p>\n<p><strong>文法解决了无穷语言的有穷表示问题</strong></p>\n<h3 id=\"文法的分类\"><a href=\"#文法的分类\" class=\"headerlink\" title=\"文法的分类\"></a>文法的分类</h3><p><strong>乔姆斯基文法层次的四个类型及其特点：</strong></p>\n<hr>\n<ol>\n<li><strong>0型文法（无限制文法或短语结构文法，Type-0 Grammar）PSG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>α → β</code>，其中<code>α</code>和<code>β</code>是字母表上的符号序列，且**<code>α</code>中至少包含一个非终结符**。</li>\n<li><strong>特点</strong>：<ul>\n<li>产生式规则没有任何限制。</li>\n<li>可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：图灵机（Turing Machine）。</li>\n<li><strong>应用场景</strong>：图灵机是计算模型的理论基础，用于研究可计算性问题。</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li><strong>1型文法（上下文有关文法，Type-1 Grammar）CSG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>αAβ → αγβ</code>，其中<code>A</code>是非终结符，<code>α</code>、<code>β</code>和<code>γ</code>是符号序列，<strong>且<code>γ</code>不能为空</strong>即不包含空产生式。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换依赖于上下文（即<code>α</code>和<code>β</code>）。</li>\n<li>生成的语言称为上下文有关语言（Context-Sensitive Languages）。</li>\n<li>语言的复杂性介于上下文无关语言和递归可枚举语言之间。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：线性有界自动机（Linear Bounded Automata, LBA）。</li>\n<li><strong>应用场景</strong>：主要用于理论研究，实际应用较少。</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li><strong>2型文法（上下文无关文法，Type-2 Grammar）CFG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → α</code>，其中<code>A</code>是非终结符，<code>α</code>是符号序列（可以包含终结符和非终结符）。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换不依赖于上下文。</li>\n<li>生成的语言称为上下文无关语言（Context-Free Languages）。</li>\n<li>语言的复杂性较低，适合描述程序设计语言的语法结构。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：下推自动机（Pushdown Automata, PDA）。</li>\n<li><strong>应用场景</strong>：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。</li>\n</ul>\n<hr>\n<ol start=\"4\">\n<li><strong>3型文法（正则文法，Type-3 Grammar）RG</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → aB</code>或<code>A → a</code>，其中<code>A</code>和<code>B</code>是非终结符，<code>a</code>是终结符。<ul>\n<li>也可以写成<code>A → a</code>或<code>A → aB</code>的形式（右线性文法）。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li>生成的语言称为正则语言（Regular Languages）。</li>\n<li>语言的复杂性最低，适合描述简单的模式匹配。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。</li>\n<li><strong>应用场景</strong>：广泛用于词法分析器的设计，例如正则表达式匹配。</li>\n</ul>\n<h4 id=\"乔姆斯基文法层次的总结\"><a href=\"#乔姆斯基文法层次的总结\" class=\"headerlink\" title=\"乔姆斯基文法层次的总结\"></a>乔姆斯基文法层次的总结</h4><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">特点</th>\n<th align=\"left\">产生式规则</th>\n<th align=\"left\">语言类别</th>\n<th align=\"left\">对应的自动机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0型文法</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\"><code>α → β</code>（<code>α</code>中至少包含一个非终结符）</td>\n<td align=\"left\">递归可枚举语言</td>\n<td align=\"left\">图灵机</td>\n</tr>\n<tr>\n<td align=\"left\">1型文法</td>\n<td align=\"left\">上下文有关</td>\n<td align=\"left\"><code>αAβ → αγβ</code>（<code>γ</code>不能为空）</td>\n<td align=\"left\">上下文有关语言</td>\n<td align=\"left\">线性有界自动机</td>\n</tr>\n<tr>\n<td align=\"left\">2型文法</td>\n<td align=\"left\">上下文无关</td>\n<td align=\"left\"><code>A → α</code></td>\n<td align=\"left\">上下文无关语言</td>\n<td align=\"left\">下推自动机</td>\n</tr>\n<tr>\n<td align=\"left\">3型文法</td>\n<td align=\"left\">正则</td>\n<td align=\"left\"><code>A → aB</code> 或 <code>A → a</code></td>\n<td align=\"left\">正则语言</td>\n<td align=\"left\">有限状态自动机</td>\n</tr>\n</tbody></table>\n<h3 id=\"CFG的分析树\"><a href=\"#CFG的分析树\" class=\"headerlink\" title=\"CFG的分析树\"></a>CFG的分析树</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228192438996.png\" alt=\"image-20250228192438996\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228192800546.png\" alt=\"image-20250228192800546\"></p>\n<h2 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h2><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228193938121.png\" alt=\"image-20250228193938121\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194036448.png\" alt=\"image-20250228194036448\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194128221.png\" alt=\"image-20250228194128221\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194206882.png\" alt=\"image-20250228194206882\"></p>\n<h3 id=\"正则定义\"><a href=\"#正则定义\" class=\"headerlink\" title=\"正则定义\"></a>正则定义</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194501097.png\" alt=\"image-20250228194501097\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194515565.png\" alt=\"image-20250228194515565\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228194652018.png\" alt=\"image-20250228194652018\"></p>\n<h3 id=\"有穷自动机\"><a href=\"#有穷自动机\" class=\"headerlink\" title=\"有穷自动机\"></a>有穷自动机</h3><p>有穷自动机（Finite Automaton）FA是一种数学模型，用于描述具有有限状态的系统，它可以用来识别输入符号串是否符合某种模式或语言。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228212619061.png\" alt=\"image-20250228212619061\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228212648230.png\" alt=\"image-20250228212648230\"></p>\n<p><strong>分类</strong></p>\n<p>有穷自动机主要分为以下两种类型：</p>\n<ul>\n<li><strong>确定型有穷自动机（DFA, Deterministic Finite Automaton）</strong>：对于每个状态和输入符号，转移函数 <em>δ</em> 定义了唯一一个确定的下一个状态。</li>\n<li><strong>非确定型有穷自动机（NFA, Nondeterministic Finite Automaton）</strong>：对于每个状态和输入符号，转移函数 <em>δ</em> 可以定义多个可能的下一个状态，甚至允许在没有输入的情况下进行状态转移（即空转移）。</li>\n</ul>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228212945534.png\" alt=\"image-20250228212945534\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213348367.png\" alt=\"image-20250228213348367\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213537699.png\" alt=\"image-20250228213537699\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213653344.png\" alt=\"image-20250228213653344\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213802223.png\" alt=\"image-20250228213802223\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228213930767.png\" alt=\"image-20250228213930767\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214124879.png\" alt=\"image-20250228214124879\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214223449.png\" alt=\"image-20250228214223449\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214400701.png\" alt=\"image-20250228214400701\"></p>\n<h3 id=\"从正则表达式到有穷自动机\"><a href=\"#从正则表达式到有穷自动机\" class=\"headerlink\" title=\"从正则表达式到有穷自动机\"></a>从正则表达式到有穷自动机</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214703417.png\" alt=\"image-20250228214703417\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228214909259.png\" alt=\"image-20250228214909259\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228215155976.png\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228215437342.png\" alt=\"image-20250228215437342\"> </p>\n<h3 id=\"识别单词的DFA\"><a href=\"#识别单词的DFA\" class=\"headerlink\" title=\"识别单词的DFA\"></a>识别单词的DFA</h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232506318.png\" alt=\"image-20250228232506318\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232533260.png\" alt=\"image-20250228232533260\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232627479.png\" alt=\"image-20250228232627479\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232702871.png\" alt=\"image-20250228232702871\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232725709.png\" alt=\"image-20250228232725709\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232819417.png\" alt=\"image-20250228232819417\"></p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250228232857300.png\" alt=\"image-20250228232857300\"></p>\n"},{"title":"刷题日记4.02","date":"2025-04-01T16:00:00.000Z","updated":"2025-04-01T16:00:00.000Z","_content":"\n今天刷洛谷题基础stl题。\n\n# 1.CF112A Petya and Strings\n\n## 题目描述\n\n输入两个字符串，大小写无关紧要，比较它们的大小。\n\n## 输入格式\n\n两个字符串（保证长度相等）\n\n## 输出格式\n\n如果第一个字符串小于第二个字符串，则输出“-1”。如果第二个字符串小于第一个字符串，则输出“1”。如果字符串相同，则打印“0”。请注意，比较字符串时不考虑字母的大小写。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\naaaa\naaaA\n```\n\n### 输出 #1\n\n```\n0\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\nabs\nAbz\n```\n\n### 输出 #2\n\n```\n-1\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\nabcdefg\nAbCdEfF\n```\n\n### 输出 #3\n\n```\n1\n```\n\n## 今日题解：\n\n题目大意是大小写无关的字符串字典序比较，需要我们先统一一下大小写。利用ASCII码进行大小写转换，A->65 a->97\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tstring s1, s2;\n\tcin>>s1>>s2;\n\tint len=s1.size();\n\n\tfor(int i=0; i<len; ++i) {\n\t\tif(s1[i]>='A' && s1[i]<'a') {\n\t\t\ts1[i]=s1[i]+32;\n\t\t}\n\t\tif(s2[i]>='A' && s2[i]<'a') {\n\t\t\ts2[i]=s2[i]+32;\n\t\t}\n\t}\n\tif(s1>s2) {\n\t\tcout<<\"1\\n\";\n\t}\n\tif(s1<s2) {\n\t\tcout<<\"-1\\n\";\n\t}\n\tif(s1==s2) {\n\t\tcout<<\"0\\n\";\n\t}\n\treturn 0;\n}\n\n```\n\n# 2.CF44A Indian Summer\n\n## 题目描述\n\nIndian summer is such a beautiful time of the year! A girl named Alyona is walking in the forest and picking a bouquet from fallen leaves. Alyona is very choosy — she doesn't take a leaf if it matches the color and the species of the tree of one of the leaves she already has. Find out how many leaves Alyona has picked.\n\n## 输入格式\n\nThe first line contains an integer $ n $ ( $ 1<=n<=100 $ ) — the number of leaves Alyona has found. The next $ n $ lines contain the leaves' descriptions. Each leaf is characterized by the species of the tree it has fallen from and by the color. The species of the trees and colors are given in names, consisting of no more than $ 10 $ lowercase Latin letters. A name can not be an empty string. The species of a tree and the color are given in each line separated by a space.\n\n## 输出格式\n\nOutput the single number — the number of Alyona's leaves.\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n5\nbirch yellow\nmaple red\nbirch yellow\nmaple yellow\nmaple green\n```\n\n### 输出 #1\n\n```\n4\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n3\noak yellow\noak yellow\noak yellow\n```\n\n### 输出 #2\n\n```\n1\n```\n\n## 今日题解：\n\n题目大意是要我们找出键值都不重复的元素个数。注意set元素为对的声明为set<pair<type,type>> s;\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n;cin>>n;\n\tset<pair<string, string>> s;\n\twhile(n--) {\n\t\tstring s1, s2;\t\n\t\tcin>>s1>>s2;\n\t\ts.insert({s1, s2});\n\t}\n\tcout<<s.size();\n\treturn 0;\n}\n\n```\n\n# 3.CF45C Dancing Lessons\n\n## 题目描述\n\nThere are $ n $ people taking dancing lessons. Every person is characterized by his/her dancing skill $ a_{i} $ . At the beginning of the lesson they line up from left to right. While there is at least one couple of a boy and a girl in the line, the following process is repeated: the boy and girl who stand next to each other, having the minimal difference in dancing skills start to dance. If there are several such couples, the one first from the left starts to dance. After a couple leaves to dance, the line closes again, i.e. as a result the line is always continuous. The difference in dancing skills is understood as the absolute value of difference of $ a_{i} $ variable. Your task is to find out what pairs and in what order will start dancing.\n\n## 输入格式\n\nThe first line contains an integer $ n $ ( $ 1<=n<=2·10^{5} $ ) — the number of people. The next line contains $ n $ symbols B or G without spaces. B stands for a boy, G stands for a girl. The third line contains $ n $ space-separated integers $ a_{i} $ ( $ 1<=a_{i}<=10^{7} $ ) — the dancing skill. People are specified from left to right in the order in which they lined up.\n\n## 输出格式\n\nPrint the resulting number of couples $ k $ . Then print $ k $ lines containing two numerals each — the numbers of people forming the couple. The people are numbered with integers from $ 1 $ to $ n $ from left to right. When a couple leaves to dance you shouldn't renumber the people. The numbers in one couple should be sorted in the increasing order. Print the couples in the order in which they leave to dance.\n\n题意翻译\n有n个人在上舞蹈课，每个人都有相应的舞蹈技能。记录男女在一起直到结尾，然后选出男女差值最小的一对，如果有多对，就从左往右输出，选出后剩下的成员紧密排在一起，直到不能找到男女搭配。问：输出组合对数，并且每队成员最初时的位置标号。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n4\nBGBG\n4 2 4 3\n```\n\n### 输出 #1\n\n```\n2\n3 4\n1 2\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n4\nBBGG\n4 6 1 5\n```\n\n### 输出 #2\n\n```\n2\n2 3\n1 4\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\n4\nBGBB\n1 1 2 3\n```\n\n### 输出 #3\n\n```\n1\n1 2\n```\n\n## 今日题解\n\n大致思路：利用优先队列最大堆实现自动排序，注意比较函数的重写，实现最小堆。每次弹出优先队列后要注意判断是否已经遍历过和判断一下如果在原队伍中(此队伍靠更新元素自己的邻居索引动态更新)删除这两个元素是否能够组成新的入优先队列的元素。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n, k, ans[2][100005];\nstring s;//存储性别字符串\n\n\nstruct people {\n\tint a;//能力值\n\tint l, r;//左右邻居索引\n\tbool x, vis;//性别0男1女 vis表示是否选出过\n} a[200005];\n\nstruct peoples {\n\tint a;//能力差值\n\tint l, r;//此差值的两个原始位置\n};\n\npriority_queue<peoples> pq;\n\nbool operator< (peoples a, peoples b) {\n\tif(a.a == b.a) return a.l > b.l;\n\treturn a.a>b.a;\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tcin>>n>>s;\n\t//初始化a数组\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i].a;\n\t\t\n\t\tif(i==1) a[i].l=0;\n\t\telse a[i].l = i-1;\n\t\tif(i==n) a[i].r = i;\n\t\telse a[i].r = i+1;\n\t\t\n\t\ta[i].x=(s[i-1] == 'G');\n\t\t//如果相邻性别不同，将其插入队列\n\t\tif(a[i].x != a[i-1].x){\n\t\t\tpq.push(peoples{abs(a[i].a-a[i-1].a), i-1, i});\n\t\t}\n\t}\n\t\n\twhile(!pq.empty()) {\n\t\t//记录本次最优对\n\t\tint l=pq.top().l, r=pq.top().r;\n\t\tpq.pop();//弹出\n\t\t\n\t\tif(a[l].vis&&a[r].vis)continue;//但凡已选过，则跳过，下一个\n\t\t\n\t\tk++;//每次对数+1\n\t\tans[0][k]=l;//记录左位置\n\t\tans[1][k]=r;//记录右位置\n\t\t//标记已选过\n\t\ta[l].vis=true;\n\t\ta[r].vis=true;\n\t\t\n\t\t//合并剩下的区间，看是否能加入pq\n        // 先获取新的左右邻居\n        l = a[l].l;\n        r = a[r].r;\n\n        // 更新邻居关系\n        a[l].r = r;\n        a[r].l = l;\n\t\t\n\t\tif(l>0 && r<=n && a[l].x!=a[r].x) {\n\t\t\tpq.push(peoples{abs(a[l].a-a[r].a), l, a[l].r});\n\t\t}\n\t\t\n\t}\n\t\n\tcout<<k<<'\\n';\n\tfor(int i=1;i<=k;++i) {\n\t\tcout<<ans[0][i]<<' '<<ans[1][i]<<'\\n';\n\t}\n\t\n\t\n\treturn 0;\n}\n\n```\n\n","source":"_posts/刷题日记4.02.md","raw":"---\ntitle: 刷题日记4.02\ndate: 2025-04-02\nupdated: 2025-04-02\ncategories: 算法\n---\n\n今天刷洛谷题基础stl题。\n\n# 1.CF112A Petya and Strings\n\n## 题目描述\n\n输入两个字符串，大小写无关紧要，比较它们的大小。\n\n## 输入格式\n\n两个字符串（保证长度相等）\n\n## 输出格式\n\n如果第一个字符串小于第二个字符串，则输出“-1”。如果第二个字符串小于第一个字符串，则输出“1”。如果字符串相同，则打印“0”。请注意，比较字符串时不考虑字母的大小写。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\naaaa\naaaA\n```\n\n### 输出 #1\n\n```\n0\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\nabs\nAbz\n```\n\n### 输出 #2\n\n```\n-1\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\nabcdefg\nAbCdEfF\n```\n\n### 输出 #3\n\n```\n1\n```\n\n## 今日题解：\n\n题目大意是大小写无关的字符串字典序比较，需要我们先统一一下大小写。利用ASCII码进行大小写转换，A->65 a->97\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\tstring s1, s2;\n\tcin>>s1>>s2;\n\tint len=s1.size();\n\n\tfor(int i=0; i<len; ++i) {\n\t\tif(s1[i]>='A' && s1[i]<'a') {\n\t\t\ts1[i]=s1[i]+32;\n\t\t}\n\t\tif(s2[i]>='A' && s2[i]<'a') {\n\t\t\ts2[i]=s2[i]+32;\n\t\t}\n\t}\n\tif(s1>s2) {\n\t\tcout<<\"1\\n\";\n\t}\n\tif(s1<s2) {\n\t\tcout<<\"-1\\n\";\n\t}\n\tif(s1==s2) {\n\t\tcout<<\"0\\n\";\n\t}\n\treturn 0;\n}\n\n```\n\n# 2.CF44A Indian Summer\n\n## 题目描述\n\nIndian summer is such a beautiful time of the year! A girl named Alyona is walking in the forest and picking a bouquet from fallen leaves. Alyona is very choosy — she doesn't take a leaf if it matches the color and the species of the tree of one of the leaves she already has. Find out how many leaves Alyona has picked.\n\n## 输入格式\n\nThe first line contains an integer $ n $ ( $ 1<=n<=100 $ ) — the number of leaves Alyona has found. The next $ n $ lines contain the leaves' descriptions. Each leaf is characterized by the species of the tree it has fallen from and by the color. The species of the trees and colors are given in names, consisting of no more than $ 10 $ lowercase Latin letters. A name can not be an empty string. The species of a tree and the color are given in each line separated by a space.\n\n## 输出格式\n\nOutput the single number — the number of Alyona's leaves.\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n5\nbirch yellow\nmaple red\nbirch yellow\nmaple yellow\nmaple green\n```\n\n### 输出 #1\n\n```\n4\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n3\noak yellow\noak yellow\noak yellow\n```\n\n### 输出 #2\n\n```\n1\n```\n\n## 今日题解：\n\n题目大意是要我们找出键值都不重复的元素个数。注意set元素为对的声明为set<pair<type,type>> s;\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n;cin>>n;\n\tset<pair<string, string>> s;\n\twhile(n--) {\n\t\tstring s1, s2;\t\n\t\tcin>>s1>>s2;\n\t\ts.insert({s1, s2});\n\t}\n\tcout<<s.size();\n\treturn 0;\n}\n\n```\n\n# 3.CF45C Dancing Lessons\n\n## 题目描述\n\nThere are $ n $ people taking dancing lessons. Every person is characterized by his/her dancing skill $ a_{i} $ . At the beginning of the lesson they line up from left to right. While there is at least one couple of a boy and a girl in the line, the following process is repeated: the boy and girl who stand next to each other, having the minimal difference in dancing skills start to dance. If there are several such couples, the one first from the left starts to dance. After a couple leaves to dance, the line closes again, i.e. as a result the line is always continuous. The difference in dancing skills is understood as the absolute value of difference of $ a_{i} $ variable. Your task is to find out what pairs and in what order will start dancing.\n\n## 输入格式\n\nThe first line contains an integer $ n $ ( $ 1<=n<=2·10^{5} $ ) — the number of people. The next line contains $ n $ symbols B or G without spaces. B stands for a boy, G stands for a girl. The third line contains $ n $ space-separated integers $ a_{i} $ ( $ 1<=a_{i}<=10^{7} $ ) — the dancing skill. People are specified from left to right in the order in which they lined up.\n\n## 输出格式\n\nPrint the resulting number of couples $ k $ . Then print $ k $ lines containing two numerals each — the numbers of people forming the couple. The people are numbered with integers from $ 1 $ to $ n $ from left to right. When a couple leaves to dance you shouldn't renumber the people. The numbers in one couple should be sorted in the increasing order. Print the couples in the order in which they leave to dance.\n\n题意翻译\n有n个人在上舞蹈课，每个人都有相应的舞蹈技能。记录男女在一起直到结尾，然后选出男女差值最小的一对，如果有多对，就从左往右输出，选出后剩下的成员紧密排在一起，直到不能找到男女搭配。问：输出组合对数，并且每队成员最初时的位置标号。\n\n## 输入输出样例 #1\n\n### 输入 #1\n\n```\n4\nBGBG\n4 2 4 3\n```\n\n### 输出 #1\n\n```\n2\n3 4\n1 2\n```\n\n## 输入输出样例 #2\n\n### 输入 #2\n\n```\n4\nBBGG\n4 6 1 5\n```\n\n### 输出 #2\n\n```\n2\n2 3\n1 4\n```\n\n## 输入输出样例 #3\n\n### 输入 #3\n\n```\n4\nBGBB\n1 1 2 3\n```\n\n### 输出 #3\n\n```\n1\n1 2\n```\n\n## 今日题解\n\n大致思路：利用优先队列最大堆实现自动排序，注意比较函数的重写，实现最小堆。每次弹出优先队列后要注意判断是否已经遍历过和判断一下如果在原队伍中(此队伍靠更新元素自己的邻居索引动态更新)删除这两个元素是否能够组成新的入优先队列的元素。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n, k, ans[2][100005];\nstring s;//存储性别字符串\n\n\nstruct people {\n\tint a;//能力值\n\tint l, r;//左右邻居索引\n\tbool x, vis;//性别0男1女 vis表示是否选出过\n} a[200005];\n\nstruct peoples {\n\tint a;//能力差值\n\tint l, r;//此差值的两个原始位置\n};\n\npriority_queue<peoples> pq;\n\nbool operator< (peoples a, peoples b) {\n\tif(a.a == b.a) return a.l > b.l;\n\treturn a.a>b.a;\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\t\n\tcin>>n>>s;\n\t//初始化a数组\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i].a;\n\t\t\n\t\tif(i==1) a[i].l=0;\n\t\telse a[i].l = i-1;\n\t\tif(i==n) a[i].r = i;\n\t\telse a[i].r = i+1;\n\t\t\n\t\ta[i].x=(s[i-1] == 'G');\n\t\t//如果相邻性别不同，将其插入队列\n\t\tif(a[i].x != a[i-1].x){\n\t\t\tpq.push(peoples{abs(a[i].a-a[i-1].a), i-1, i});\n\t\t}\n\t}\n\t\n\twhile(!pq.empty()) {\n\t\t//记录本次最优对\n\t\tint l=pq.top().l, r=pq.top().r;\n\t\tpq.pop();//弹出\n\t\t\n\t\tif(a[l].vis&&a[r].vis)continue;//但凡已选过，则跳过，下一个\n\t\t\n\t\tk++;//每次对数+1\n\t\tans[0][k]=l;//记录左位置\n\t\tans[1][k]=r;//记录右位置\n\t\t//标记已选过\n\t\ta[l].vis=true;\n\t\ta[r].vis=true;\n\t\t\n\t\t//合并剩下的区间，看是否能加入pq\n        // 先获取新的左右邻居\n        l = a[l].l;\n        r = a[r].r;\n\n        // 更新邻居关系\n        a[l].r = r;\n        a[r].l = l;\n\t\t\n\t\tif(l>0 && r<=n && a[l].x!=a[r].x) {\n\t\t\tpq.push(peoples{abs(a[l].a-a[r].a), l, a[l].r});\n\t\t}\n\t\t\n\t}\n\t\n\tcout<<k<<'\\n';\n\tfor(int i=1;i<=k;++i) {\n\t\tcout<<ans[0][i]<<' '<<ans[1][i]<<'\\n';\n\t}\n\t\n\t\n\treturn 0;\n}\n\n```\n\n","slug":"刷题日记4.02","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apl001lpoot8w82abqg","content":"<p>今天刷洛谷题基础stl题。</p>\n<h1 id=\"1-CF112A-Petya-and-Strings\"><a href=\"#1-CF112A-Petya-and-Strings\" class=\"headerlink\" title=\"1.CF112A Petya and Strings\"></a>1.CF112A Petya and Strings</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入两个字符串，大小写无关紧要，比较它们的大小。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>两个字符串（保证长度相等）</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>如果第一个字符串小于第二个字符串，则输出“-1”。如果第二个字符串小于第一个字符串，则输出“1”。如果字符串相同，则打印“0”。请注意，比较字符串时不考虑字母的大小写。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaaa</span><br><span class=\"line\">aaaA</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abs</span><br><span class=\"line\">Abz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3\"><a href=\"#输入输出样例-3\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3\"><a href=\"#输入-3\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abcdefg</span><br><span class=\"line\">AbCdEfF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>题目大意是大小写无关的字符串字典序比较，需要我们先统一一下大小写。利用ASCII码进行大小写转换，A-&gt;65 a-&gt;97</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring s1, s2;</span><br><span class=\"line\">\tcin&gt;&gt;s1&gt;&gt;s2;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len=s<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;len; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s1[i]&gt;=<span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; s1[i]&lt;<span class=\"string\">&#x27;a&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\ts1[i]=s1[i]<span class=\"number\">+32</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s2[i]&gt;=<span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; s2[i]&lt;<span class=\"string\">&#x27;a&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\ts2[i]=s2[i]<span class=\"number\">+32</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1&gt;s2) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;1\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1&lt;s2) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;-1\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1==s2) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;0\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-CF44A-Indian-Summer\"><a href=\"#2-CF44A-Indian-Summer\" class=\"headerlink\" title=\"2.CF44A Indian Summer\"></a>2.CF44A Indian Summer</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Indian summer is such a beautiful time of the year! A girl named Alyona is walking in the forest and picking a bouquet from fallen leaves. Alyona is very choosy — she doesn’t take a leaf if it matches the color and the species of the tree of one of the leaves she already has. Find out how many leaves Alyona has picked.</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains an integer $ n $ ( $ 1&lt;&#x3D;n&lt;&#x3D;100 $ ) — the number of leaves Alyona has found. The next $ n $ lines contain the leaves’ descriptions. Each leaf is characterized by the species of the tree it has fallen from and by the color. The species of the trees and colors are given in names, consisting of no more than $ 10 $ lowercase Latin letters. A name can not be an empty string. The species of a tree and the color are given in each line separated by a space.</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Output the single number — the number of Alyona’s leaves.</p>\n<h2 id=\"输入输出样例-1-1\"><a href=\"#输入输出样例-1-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-1\"><a href=\"#输入-1-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">birch yellow</span><br><span class=\"line\">maple red</span><br><span class=\"line\">birch yellow</span><br><span class=\"line\">maple yellow</span><br><span class=\"line\">maple green</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-1\"><a href=\"#输出-1-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-1\"><a href=\"#输入输出样例-2-1\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-1\"><a href=\"#输入-2-1\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">oak yellow</span><br><span class=\"line\">oak yellow</span><br><span class=\"line\">oak yellow</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-1\"><a href=\"#输出-2-1\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：-1\"><a href=\"#今日题解：-1\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>题目大意是要我们找出键值都不重复的元素个数。注意set元素为对的声明为set&lt;pair&lt;type,type&gt;&gt; s;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\tset&lt;pair&lt;string, string&gt;&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\tstring s1, s2;\t</span><br><span class=\"line\">\t\tcin&gt;&gt;s1&gt;&gt;s2;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">insert</span>(&#123;s1, s2&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CF45C-Dancing-Lessons\"><a href=\"#3-CF45C-Dancing-Lessons\" class=\"headerlink\" title=\"3.CF45C Dancing Lessons\"></a>3.CF45C Dancing Lessons</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>There are $ n $ people taking dancing lessons. Every person is characterized by his&#x2F;her dancing skill $ a_{i} $ . At the beginning of the lesson they line up from left to right. While there is at least one couple of a boy and a girl in the line, the following process is repeated: the boy and girl who stand next to each other, having the minimal difference in dancing skills start to dance. If there are several such couples, the one first from the left starts to dance. After a couple leaves to dance, the line closes again, i.e. as a result the line is always continuous. The difference in dancing skills is understood as the absolute value of difference of $ a_{i} $ variable. Your task is to find out what pairs and in what order will start dancing.</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains an integer $ n $ ( $ 1&lt;&#x3D;n&lt;&#x3D;2·10^{5} $ ) — the number of people. The next line contains $ n $ symbols B or G without spaces. B stands for a boy, G stands for a girl. The third line contains $ n $ space-separated integers $ a_{i} $ ( $ 1&lt;&#x3D;a_{i}&lt;&#x3D;10^{7} $ ) — the dancing skill. People are specified from left to right in the order in which they lined up.</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print the resulting number of couples $ k $ . Then print $ k $ lines containing two numerals each — the numbers of people forming the couple. The people are numbered with integers from $ 1 $ to $ n $ from left to right. When a couple leaves to dance you shouldn’t renumber the people. The numbers in one couple should be sorted in the increasing order. Print the couples in the order in which they leave to dance.</p>\n<p>题意翻译<br>有n个人在上舞蹈课，每个人都有相应的舞蹈技能。记录男女在一起直到结尾，然后选出男女差值最小的一对，如果有多对，就从左往右输出，选出后剩下的成员紧密排在一起，直到不能找到男女搭配。问：输出组合对数，并且每队成员最初时的位置标号。</p>\n<h2 id=\"输入输出样例-1-2\"><a href=\"#输入输出样例-1-2\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-2\"><a href=\"#输入-1-2\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">BGBG</span><br><span class=\"line\">4 2 4 3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-2\"><a href=\"#输出-1-2\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 4</span><br><span class=\"line\">1 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-2\"><a href=\"#输入输出样例-2-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-2\"><a href=\"#输入-2-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">BBGG</span><br><span class=\"line\">4 6 1 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-2\"><a href=\"#输出-2-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">2 3</span><br><span class=\"line\">1 4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3-1\"><a href=\"#输入输出样例-3-1\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3-1\"><a href=\"#输入-3-1\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">BGBB</span><br><span class=\"line\">1 1 2 3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3-1\"><a href=\"#输出-3-1\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解\"><a href=\"#今日题解\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>大致思路：利用优先队列最大堆实现自动排序，注意比较函数的重写，实现最小堆。每次弹出优先队列后要注意判断是否已经遍历过和判断一下如果在原队伍中(此队伍靠更新元素自己的邻居索引动态更新)删除这两个元素是否能够组成新的入优先队列的元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, k, ans[<span class=\"number\">2</span>][<span class=\"number\">100005</span>];</span><br><span class=\"line\">string s;<span class=\"comment\">//存储性别字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">people</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;<span class=\"comment\">//能力值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> l, r;<span class=\"comment\">//左右邻居索引</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> x, vis;<span class=\"comment\">//性别0男1女 vis表示是否选出过</span></span><br><span class=\"line\">&#125; a[<span class=\"number\">200005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">peoples</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;<span class=\"comment\">//能力差值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> l, r;<span class=\"comment\">//此差值的两个原始位置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;peoples&gt; pq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt; (peoples a, peoples b) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.a == b.a) <span class=\"keyword\">return</span> a.l &gt; b.l;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.a&gt;b.a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;s;</span><br><span class=\"line\">\t<span class=\"comment\">//初始化a数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i].a;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) a[i].l=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> a[i].l = i<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i==n) a[i].r = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> a[i].r = i<span class=\"number\">+1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ta[i].x=(s[i<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;G&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果相邻性别不同，将其插入队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i].x != a[i<span class=\"number\">-1</span>].x)&#123;</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>(peoples&#123;<span class=\"built_in\">abs</span>(a[i].a-a[i<span class=\"number\">-1</span>].a), i<span class=\"number\">-1</span>, i&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//记录本次最优对</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l=pq.<span class=\"built_in\">top</span>().l, r=pq.<span class=\"built_in\">top</span>().r;</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">pop</span>();<span class=\"comment\">//弹出</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[l].vis&amp;&amp;a[r].vis)<span class=\"keyword\">continue</span>;<span class=\"comment\">//但凡已选过，则跳过，下一个</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tk++;<span class=\"comment\">//每次对数+1</span></span><br><span class=\"line\">\t\tans[<span class=\"number\">0</span>][k]=l;<span class=\"comment\">//记录左位置</span></span><br><span class=\"line\">\t\tans[<span class=\"number\">1</span>][k]=r;<span class=\"comment\">//记录右位置</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//标记已选过</span></span><br><span class=\"line\">\t\ta[l].vis=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\ta[r].vis=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//合并剩下的区间，看是否能加入pq</span></span><br><span class=\"line\">        <span class=\"comment\">// 先获取新的左右邻居</span></span><br><span class=\"line\">        l = a[l].l;</span><br><span class=\"line\">        r = a[r].r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新邻居关系</span></span><br><span class=\"line\">        a[l].r = r;</span><br><span class=\"line\">        a[r].l = l;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l&gt;<span class=\"number\">0</span> &amp;&amp; r&lt;=n &amp;&amp; a[l].x!=a[r].x) &#123;</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>(peoples&#123;<span class=\"built_in\">abs</span>(a[l].a-a[r].a), l, a[l].r&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout&lt;&lt;k&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=k;++i) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;ans[<span class=\"number\">0</span>][i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;ans[<span class=\"number\">1</span>][i]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>今天刷洛谷题基础stl题。</p>\n<h1 id=\"1-CF112A-Petya-and-Strings\"><a href=\"#1-CF112A-Petya-and-Strings\" class=\"headerlink\" title=\"1.CF112A Petya and Strings\"></a>1.CF112A Petya and Strings</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入两个字符串，大小写无关紧要，比较它们的大小。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>两个字符串（保证长度相等）</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>如果第一个字符串小于第二个字符串，则输出“-1”。如果第二个字符串小于第一个字符串，则输出“1”。如果字符串相同，则打印“0”。请注意，比较字符串时不考虑字母的大小写。</p>\n<h2 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaaa</span><br><span class=\"line\">aaaA</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abs</span><br><span class=\"line\">Abz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3\"><a href=\"#输入输出样例-3\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3\"><a href=\"#输入-3\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abcdefg</span><br><span class=\"line\">AbCdEfF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：\"><a href=\"#今日题解：\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>题目大意是大小写无关的字符串字典序比较，需要我们先统一一下大小写。利用ASCII码进行大小写转换，A-&gt;65 a-&gt;97</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstring s1, s2;</span><br><span class=\"line\">\tcin&gt;&gt;s1&gt;&gt;s2;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len=s<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;len; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s1[i]&gt;=<span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; s1[i]&lt;<span class=\"string\">&#x27;a&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\ts1[i]=s1[i]<span class=\"number\">+32</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s2[i]&gt;=<span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; s2[i]&lt;<span class=\"string\">&#x27;a&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\ts2[i]=s2[i]<span class=\"number\">+32</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1&gt;s2) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;1\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1&lt;s2) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;-1\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s1==s2) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;0\\n&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-CF44A-Indian-Summer\"><a href=\"#2-CF44A-Indian-Summer\" class=\"headerlink\" title=\"2.CF44A Indian Summer\"></a>2.CF44A Indian Summer</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Indian summer is such a beautiful time of the year! A girl named Alyona is walking in the forest and picking a bouquet from fallen leaves. Alyona is very choosy — she doesn’t take a leaf if it matches the color and the species of the tree of one of the leaves she already has. Find out how many leaves Alyona has picked.</p>\n<h2 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains an integer $ n $ ( $ 1&lt;&#x3D;n&lt;&#x3D;100 $ ) — the number of leaves Alyona has found. The next $ n $ lines contain the leaves’ descriptions. Each leaf is characterized by the species of the tree it has fallen from and by the color. The species of the trees and colors are given in names, consisting of no more than $ 10 $ lowercase Latin letters. A name can not be an empty string. The species of a tree and the color are given in each line separated by a space.</p>\n<h2 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Output the single number — the number of Alyona’s leaves.</p>\n<h2 id=\"输入输出样例-1-1\"><a href=\"#输入输出样例-1-1\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-1\"><a href=\"#输入-1-1\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">birch yellow</span><br><span class=\"line\">maple red</span><br><span class=\"line\">birch yellow</span><br><span class=\"line\">maple yellow</span><br><span class=\"line\">maple green</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-1\"><a href=\"#输出-1-1\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-1\"><a href=\"#输入输出样例-2-1\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-1\"><a href=\"#输入-2-1\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">oak yellow</span><br><span class=\"line\">oak yellow</span><br><span class=\"line\">oak yellow</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-1\"><a href=\"#输出-2-1\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解：-1\"><a href=\"#今日题解：-1\" class=\"headerlink\" title=\"今日题解：\"></a>今日题解：</h2><p>题目大意是要我们找出键值都不重复的元素个数。注意set元素为对的声明为set&lt;pair&lt;type,type&gt;&gt; s;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">\tset&lt;pair&lt;string, string&gt;&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\tstring s1, s2;\t</span><br><span class=\"line\">\t\tcin&gt;&gt;s1&gt;&gt;s2;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">insert</span>(&#123;s1, s2&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CF45C-Dancing-Lessons\"><a href=\"#3-CF45C-Dancing-Lessons\" class=\"headerlink\" title=\"3.CF45C Dancing Lessons\"></a>3.CF45C Dancing Lessons</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>There are $ n $ people taking dancing lessons. Every person is characterized by his&#x2F;her dancing skill $ a_{i} $ . At the beginning of the lesson they line up from left to right. While there is at least one couple of a boy and a girl in the line, the following process is repeated: the boy and girl who stand next to each other, having the minimal difference in dancing skills start to dance. If there are several such couples, the one first from the left starts to dance. After a couple leaves to dance, the line closes again, i.e. as a result the line is always continuous. The difference in dancing skills is understood as the absolute value of difference of $ a_{i} $ variable. Your task is to find out what pairs and in what order will start dancing.</p>\n<h2 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>The first line contains an integer $ n $ ( $ 1&lt;&#x3D;n&lt;&#x3D;2·10^{5} $ ) — the number of people. The next line contains $ n $ symbols B or G without spaces. B stands for a boy, G stands for a girl. The third line contains $ n $ space-separated integers $ a_{i} $ ( $ 1&lt;&#x3D;a_{i}&lt;&#x3D;10^{7} $ ) — the dancing skill. People are specified from left to right in the order in which they lined up.</p>\n<h2 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>Print the resulting number of couples $ k $ . Then print $ k $ lines containing two numerals each — the numbers of people forming the couple. The people are numbered with integers from $ 1 $ to $ n $ from left to right. When a couple leaves to dance you shouldn’t renumber the people. The numbers in one couple should be sorted in the increasing order. Print the couples in the order in which they leave to dance.</p>\n<p>题意翻译<br>有n个人在上舞蹈课，每个人都有相应的舞蹈技能。记录男女在一起直到结尾，然后选出男女差值最小的一对，如果有多对，就从左往右输出，选出后剩下的成员紧密排在一起，直到不能找到男女搭配。问：输出组合对数，并且每队成员最初时的位置标号。</p>\n<h2 id=\"输入输出样例-1-2\"><a href=\"#输入输出样例-1-2\" class=\"headerlink\" title=\"输入输出样例 #1\"></a>输入输出样例 #1</h2><h3 id=\"输入-1-2\"><a href=\"#输入-1-2\" class=\"headerlink\" title=\"输入 #1\"></a>输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">BGBG</span><br><span class=\"line\">4 2 4 3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1-2\"><a href=\"#输出-1-2\" class=\"headerlink\" title=\"输出 #1\"></a>输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 4</span><br><span class=\"line\">1 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-2-2\"><a href=\"#输入输出样例-2-2\" class=\"headerlink\" title=\"输入输出样例 #2\"></a>输入输出样例 #2</h2><h3 id=\"输入-2-2\"><a href=\"#输入-2-2\" class=\"headerlink\" title=\"输入 #2\"></a>输入 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">BBGG</span><br><span class=\"line\">4 6 1 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2-2\"><a href=\"#输出-2-2\" class=\"headerlink\" title=\"输出 #2\"></a>输出 #2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">2 3</span><br><span class=\"line\">1 4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入输出样例-3-1\"><a href=\"#输入输出样例-3-1\" class=\"headerlink\" title=\"输入输出样例 #3\"></a>输入输出样例 #3</h2><h3 id=\"输入-3-1\"><a href=\"#输入-3-1\" class=\"headerlink\" title=\"输入 #3\"></a>输入 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">BGBB</span><br><span class=\"line\">1 1 2 3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-3-1\"><a href=\"#输出-3-1\" class=\"headerlink\" title=\"输出 #3\"></a>输出 #3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"今日题解\"><a href=\"#今日题解\" class=\"headerlink\" title=\"今日题解\"></a>今日题解</h2><p>大致思路：利用优先队列最大堆实现自动排序，注意比较函数的重写，实现最小堆。每次弹出优先队列后要注意判断是否已经遍历过和判断一下如果在原队伍中(此队伍靠更新元素自己的邻居索引动态更新)删除这两个元素是否能够组成新的入优先队列的元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, k, ans[<span class=\"number\">2</span>][<span class=\"number\">100005</span>];</span><br><span class=\"line\">string s;<span class=\"comment\">//存储性别字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">people</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;<span class=\"comment\">//能力值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> l, r;<span class=\"comment\">//左右邻居索引</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> x, vis;<span class=\"comment\">//性别0男1女 vis表示是否选出过</span></span><br><span class=\"line\">&#125; a[<span class=\"number\">200005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">peoples</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a;<span class=\"comment\">//能力差值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> l, r;<span class=\"comment\">//此差值的两个原始位置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;peoples&gt; pq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt; (peoples a, peoples b) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.a == b.a) <span class=\"keyword\">return</span> a.l &gt; b.l;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.a&gt;b.a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;s;</span><br><span class=\"line\">\t<span class=\"comment\">//初始化a数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i].a;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) a[i].l=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> a[i].l = i<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i==n) a[i].r = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> a[i].r = i<span class=\"number\">+1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ta[i].x=(s[i<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;G&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果相邻性别不同，将其插入队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i].x != a[i<span class=\"number\">-1</span>].x)&#123;</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>(peoples&#123;<span class=\"built_in\">abs</span>(a[i].a-a[i<span class=\"number\">-1</span>].a), i<span class=\"number\">-1</span>, i&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//记录本次最优对</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l=pq.<span class=\"built_in\">top</span>().l, r=pq.<span class=\"built_in\">top</span>().r;</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">pop</span>();<span class=\"comment\">//弹出</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[l].vis&amp;&amp;a[r].vis)<span class=\"keyword\">continue</span>;<span class=\"comment\">//但凡已选过，则跳过，下一个</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tk++;<span class=\"comment\">//每次对数+1</span></span><br><span class=\"line\">\t\tans[<span class=\"number\">0</span>][k]=l;<span class=\"comment\">//记录左位置</span></span><br><span class=\"line\">\t\tans[<span class=\"number\">1</span>][k]=r;<span class=\"comment\">//记录右位置</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//标记已选过</span></span><br><span class=\"line\">\t\ta[l].vis=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\ta[r].vis=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//合并剩下的区间，看是否能加入pq</span></span><br><span class=\"line\">        <span class=\"comment\">// 先获取新的左右邻居</span></span><br><span class=\"line\">        l = a[l].l;</span><br><span class=\"line\">        r = a[r].r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新邻居关系</span></span><br><span class=\"line\">        a[l].r = r;</span><br><span class=\"line\">        a[r].l = l;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l&gt;<span class=\"number\">0</span> &amp;&amp; r&lt;=n &amp;&amp; a[l].x!=a[r].x) &#123;</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>(peoples&#123;<span class=\"built_in\">abs</span>(a[l].a-a[r].a), l, a[l].r&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout&lt;&lt;k&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=k;++i) &#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;ans[<span class=\"number\">0</span>][i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;ans[<span class=\"number\">1</span>][i]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"计算机科学学习记录","date":"2025-02-19T16:00:00.000Z","updated":"2025-02-19T16:00:00.000Z","_content":"\n**逻辑门的实现**\n\nNOT:![image-20250219192653645](计算机科学记录/image-20250219192653645.png)\n\nAND:\n\n![image-20250219192740802](计算机科学记录/image-20250219192740802.png)\n\nOR:\n\n![image-20250219192840808](计算机科学记录/image-20250219192840808.png)\n\nXOR:\n\n![image-20250219192931677](计算机科学记录/image-20250219192931677.png)\n\n**算术逻辑单元(ALU)**\n\n半加器(处理1+1以内的运算)\n\n![image-20250219195726811](计算机科学记录/image-20250219195726811.png)\n\n全加器(处理1+1+1以内的运算)\n\n![image-20250219200002098](计算机科学记录/image-20250219200002098.png)\n\n锁存器:\n\n![](计算机科学记录/image-20250219203435390.png)\n\n门锁：\n\n![image-20250219203513305](计算机科学记录/image-20250219203513305.png)\n\n矩阵排列门锁构成寄存器。","source":"_posts/计算机科学记录.md","raw":"---\ntitle: 计算机科学学习记录\ndate: 2025-02-20\nupdated: 2025-02-20\ncategories: 计算机基础\n---\n\n**逻辑门的实现**\n\nNOT:![image-20250219192653645](计算机科学记录/image-20250219192653645.png)\n\nAND:\n\n![image-20250219192740802](计算机科学记录/image-20250219192740802.png)\n\nOR:\n\n![image-20250219192840808](计算机科学记录/image-20250219192840808.png)\n\nXOR:\n\n![image-20250219192931677](计算机科学记录/image-20250219192931677.png)\n\n**算术逻辑单元(ALU)**\n\n半加器(处理1+1以内的运算)\n\n![image-20250219195726811](计算机科学记录/image-20250219195726811.png)\n\n全加器(处理1+1+1以内的运算)\n\n![image-20250219200002098](计算机科学记录/image-20250219200002098.png)\n\n锁存器:\n\n![](计算机科学记录/image-20250219203435390.png)\n\n门锁：\n\n![image-20250219203513305](计算机科学记录/image-20250219203513305.png)\n\n矩阵排列门锁构成寄存器。","slug":"计算机科学记录","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apl001mpoot8mp901r7","content":"<p><strong>逻辑门的实现</strong></p>\n<p>NOT:<img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192653645.png\" alt=\"image-20250219192653645\"></p>\n<p>AND:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192740802.png\" alt=\"image-20250219192740802\"></p>\n<p>OR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192840808.png\" alt=\"image-20250219192840808\"></p>\n<p>XOR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192931677.png\" alt=\"image-20250219192931677\"></p>\n<p><strong>算术逻辑单元(ALU)</strong></p>\n<p>半加器(处理1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219195726811.png\" alt=\"image-20250219195726811\"></p>\n<p>全加器(处理1+1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219200002098.png\" alt=\"image-20250219200002098\"></p>\n<p>锁存器:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203435390.png\"></p>\n<p>门锁：</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203513305.png\" alt=\"image-20250219203513305\"></p>\n<p>矩阵排列门锁构成寄存器。</p>\n","excerpt":"","more":"<p><strong>逻辑门的实现</strong></p>\n<p>NOT:<img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192653645.png\" alt=\"image-20250219192653645\"></p>\n<p>AND:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192740802.png\" alt=\"image-20250219192740802\"></p>\n<p>OR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192840808.png\" alt=\"image-20250219192840808\"></p>\n<p>XOR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192931677.png\" alt=\"image-20250219192931677\"></p>\n<p><strong>算术逻辑单元(ALU)</strong></p>\n<p>半加器(处理1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219195726811.png\" alt=\"image-20250219195726811\"></p>\n<p>全加器(处理1+1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219200002098.png\" alt=\"image-20250219200002098\"></p>\n<p>锁存器:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203435390.png\"></p>\n<p>门锁：</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203513305.png\" alt=\"image-20250219203513305\"></p>\n<p>矩阵排列门锁构成寄存器。</p>\n"},{"title":"苍穹外卖","date":"2025-03-02T16:00:00.000Z","updated":"2025-03-19T16:00:00.000Z","_content":"\n本文章记录学习苍穹外卖的过程和遇到的问题。\n\n​\t首次接手苍穹外卖这个项目，可以发现并不是让我们从零开始建立的，我们是在一定基础上进行后续的功能开发的。并且提供了前端所有的源码以便于我们进行前后端联调测试，先把学习重心放到后端实现上来。\n\n​\t我首先关注到的是这个项目的结构，跟目录下分了3个包，分别是common(普通类)、pojo(实体类等)和server(业务逻辑类等)，把前端用nginx启动后，直接在server包下的SkyApplication类启动这个项目。发现这个项目运行在本地的8080上，登录和登出功能已经是做好了的。\n\n​\t然后老师带我们进行了需求分析，导入需要实现的功能接口，老师演示的是Yapi导入的接口，由于它已经停止服务我便使用apifox进行了接口导入。\n\n## 第一个功能->新增员工\n\n​\t查看接口\n\n![image-20250303174432365](苍穹外卖/image-20250303174432365.png)\n\n​\t在控制层EmployeeController类新增一个方法作为对外的接口\n\n```java\n/**\n* 新增员工\n* @param employeeDTO\n* @return\n* */\n@PostMapping\n@ApiOperation(\"新增员工\")\npublic Result save(@RequestBody EmployeeDTO employeeDTO) {\n    log.info(\"新增员工: {}\", employeeDTO);\n    employeeService.save(employeeDTO);\n    return Result.success();\n}\n```\n\n具体的实现交给业务逻辑层的employeeService接口和它的实现类，\n\n```java\n    /**\n     * 新增员工\n     * @param employeeDTO\n     */\n    @Override\n    public void save(EmployeeDTO employeeDTO) {\n        Employee employee = new Employee();\n        //对象属性拷贝\n        BeanUtils.copyProperties(employeeDTO, employee);\n        //设置账号状态，在常量类中0表示禁用disable，1相反，这里新增的员工默认可用\n        employee.setStatus(StatusConstant.ENABLE);\n        //设置密码，默认123456\n        employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));\n        //设置时间\n        employee.setCreateTime(LocalDateTime.now());\n        employee.setUpdateTime(LocalDateTime.now());\n        //设置当前记录创建人id和修改人id\n        //  后期需要改为当前登录用户的id 已利用上下文的thread完成\n        employee.setCreateUser(BaseContext.getCurrentId());\n        employee.setUpdateUser(BaseContext.getCurrentId());\n\n        //\n        employeeMapper.insert(employee);\n    }\n```\n\n至于数据库的相关操作交给Mapper层处理\n\n```java\n/**\n * 插入员工数据\n * @param employee\n */\n@Insert(\"insert into employee(name,username,password,phone,sex,id_number,create_time,update_time,create_user,update_user,status)\" +\n        \"values \" +\n        \"(#{name},#{username},#{password},#{phone},#{sex},#{idNumber},#{createTime},#{updateTime},#{createUser},#{updateUser},#{status})\")\nvoid insert(Employee employee);\n```\n\n做了两个优化\n\n问题有：\n\n1.录入的用户名重复抛出的异常没有处理\n\n2.新增员工的创建人id和修改人id设置为了固定值\n\n第一个 查看控制台的报错，\"Duplicate entry...\",在全局的异常处理器handler的GlobalExceptionHandler.java统一捕获处理异常\n\n```java\n    /**\n     * 处理SQL异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler\n    public Result exceptionHandler(SQLIntegrityConstraintViolationException ex){\n        String message = ex.getMessage();\n        if (message.contains(\"Duplicate entry\")){\n            String[] split = message.split(\" \");//先以空格分割获取用户名\n            String username = split[2];//用户名在报错信息的第3个字符串\n            String msg = username + MessageConstant.AlREDY_EXISTS;\n            return Result.error(msg);\n        }else {//其他情况返回常量类定义的字符串\n            return Result.error(MessageConstant.UNKNOWN_ERROR);\n        }\n    }\n\n```\n\n第二个\n\n生成jwt令牌的时候用到了用户的id，把它反解析出来\n\n```java\nLong empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());\n```\n\n利用每一次请求都是同一线程的特点，使用ThreadLocal保存并在需要的时候调用即可。以下是这个类的信息：\n\n```java\npackage com.sky.context;\n\npublic class BaseContext {\n\n    public static ThreadLocal<Long> threadLocal = new ThreadLocal<>();\n\n    public static void setCurrentId(Long id) {\n        threadLocal.set(id);\n    }\n\n    public static Long getCurrentId() {\n        return threadLocal.get();\n    }\n\n    public static void removeCurrentId() {\n        threadLocal.remove();\n    }\n\n}\n```\n\n于是可以在生成jwt令牌时保存\n\n```java\nLong empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());\nlog.info(\"当前员工id：\", empId);\n\nBaseContext.setCurrentId(empId);\n```\n\n在实现类里面调用\n\n```java\n//设置当前记录创建人id和修改人id\n//  后期需要改为当前登录用户的id 已利用上下文的thread完成\nemployee.setCreateUser(BaseContext.getCurrentId());\nemployee.setUpdateUser(BaseContext.getCurrentId());\n```\n\n## 第二个功能员工分页查询\n\n​\t控制层EmployeeController类\n\n```java\n/**\n * 员工分页查询\n * @param employeePageQueryDTO\n * @return\n */\n@GetMapping(\"/page\")\n@ApiOperation(\"员工分页查询\")\npublic Result<PageResult> page(EmployeePageQueryDTO employeePageQueryDTO) {\n    log.info(\"员工分页查询，参数为：{}\",employeePageQueryDTO);\n    PageResult pageResult = employeeService.pageQuery(employeePageQueryDTO);\n    return Result.success(pageResult);\n}\n```\n\n​\t业务逻辑层的实现类EmployeeServiceImpl\n\n```java\n/**\n * 分页查询\n * @param employeePageQueryDTO\n * @return\n */\n@Override\npublic PageResult pageQuery(EmployeePageQueryDTO employeePageQueryDTO) {\n    //select * from employee limit 0,10\n    //利用mybatis的pagehelper\n    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize());\n\n    Page<Employee> page = employeeMapper.pageQuery(employeePageQueryDTO);\n\n    long total = page.getTotal();\n    List<Employee> records = page.getResult();\n\n    return new PageResult(total,records);\n}\n```\n\n​\t数据库交互层EmployeeMapper类\n\n```java\n/**\n * 分页查询\n * @param employeePageQueryDTO\n * @return\n */\nPage<Employee> pageQuery(EmployeePageQueryDTO employeePageQueryDTO);\n```\n\nEmployeeMapper.xml\n\n```xml\n<select id=\"pageQuery\" resultType=\"com.sky.entity.Employee\">\n    select * from employee\n    <where>\n        <if test=\"name != null and name != ''\">\n            and name like concat('%',#{name},'%')\n        </if>\n    </where>\n    order by create_time desc\n</select>\n```\n\n做了一个优化\n\n问题是：前端显示的时间格式不美观\n\n通过在WebMvcConfiguration中扩展Spring MVC的消息转换器，统一对日期进行格式化处理\n\n```java\n/**\n * 扩展spring MVC消息转换器\n * @param converters\n */\nprotected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n    log.info(\"扩展消息转换器...\");\n    //创建一个消息转换器对象\n    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n    //需要为消息转换器设置一个对象转换器，对象转换器可以将java对象序列化为json数据\n    converter.setObjectMapper(new JacksonObjectMapper());\n    //将自己的消息转换器加入容器中\n    converters.add(0,converter);//索引为0，优先使用我们自己的消息转换器\n}\n```\n\n具体格式在JacksonObjectMapper类中自定义。\n\n**第二天:**\n\n\n关于苍穹外卖的学习，今天继续添加功能\n\n## 第一个功能启用/禁用员工账号\n\n首先查看接口文档\n\n![image-20250304131843059](苍穹外卖/image-20250304131843059.png)\n\n在控制层写，路径参数注解后面的status可省略(在两者名字相同时)，这个项目我们约定修改的返回值Result无需使用泛型，而查询的需要使用泛型。\n\n```java\n/**\n *启用禁用员工\n * @return\n */\n@PostMapping(\"/status/{status}\")\n@ApiOperation(\"启用禁用员工账号\")\npublic Result startOrStop(@PathVariable(\"status\") Integer status, Long id) {\n    log.info(\"启用禁用员工账号：{},{}\",status,id);\n    employeeService.startOrStop(status,id);\n    return Result.success();\n}\n```\n\nservice层加接口，写实现类\n\n```java\n    /**\n     * 启用禁用员工账号\n     * @param status\n     * @param id\n     */\n    public void startOrStop(Integer status, Long id) {\n        //update employee set status = ? where id = ?\n\n        //构造实体类对象 常规方法\n//        Employee employee = new Employee();\n//        employee.setId(id);\n//        employee.setStatus(status);\n\n        //利用构造器注解@Bulid\n        Employee employee = Employee.builder()\n                .status(status)\n                .id(id)\n                .build();\n        \n        employeeMapper.update(employee);\n    }\n```\n\n这里想着可能传递的参数不只是状态和id，也有可能是其他的，于是在持久层mapper里面写的update方法的形参是一个对象，包含了所有可能传递的参数。所以持久层mapper写：\n\n```java\n/**\n * 根据主键动态修改属性\n * @param employee\n */\nvoid update(Employee employee);\n```\n\n它的具体实现由于是动态sql所以不用注解实现而是写在配置文件 EmployeeMapper.xml 里：\n\n```xml\n<update id=\"update\" parameterType=\"Employee\">\n    update employee\n    <set>\n        <if test=\"name != null\">name = #{name},</if>\n        <if test=\"username != null\">username = #{username},</if>\n        <if test=\"password != null\">password = #{password},</if>\n        <if test=\"phone != null\">phone = #{phone},</if>\n        <if test=\"sex != null\">sex = #{sex},</if>\n        <if test=\"idNumber != null\">id_Number = #{idNumber},</if>\n        <if test=\"updateTime != null\">update_Time = #{updateTime},</if>\n        <if test=\"updateUser != null\">update_User = #{updateUser},</if>\n        <if test=\"status != null\">status = #{status},</if>\n    </set>\n    where id = #{id}\n</update>\n```\n\n### 特别注意：\n\n**这里的字段名字，数据库采用的是蛇形命名(如id_number),这里也需要加下划线变成id_Number。**\n\n最后提交推送分支。\n\n## 第二个功能编辑员工信息\n\n涉及两个接口，一个是根据员工id查询员工信息，\n\n![image-20250304144540830](苍穹外卖/image-20250304144540830.png)一个是修改员工信息\n\n![image-20250304144607548](苍穹外卖/image-20250304144607548.png)\n\n第一个接口，控制层：\n\n```java\n/**\n * 根据id查询员工信息\n * @param id\n * @return\n */\n@GetMapping(\"/{id}\")\n@ApiOperation(\"根据id查询员工信息\")\npublic Result<Employee> getById(@PathVariable Long id) {\n    Employee employee = employeeService.getById(id);\n    return Result.success(employee);\n}\n```\n\n业务逻辑层：这里把密码字段为了安全性重新设置为星号，不给前端传密码\n\n```java\n/**\n * 根据id查询员工\n * @param id\n * @return\n */\npublic Employee getById(Long id) {\n    Employee employee = employeeMapper.getById(id);\n    employee.setPassword(\"****\");\n    return employee;\n}\n```\n\n持久层mapper：\n\n```java\n/**\n * 根据id查询员工信息\n * @param id\n * @return\n */\n@Select(\"select * from employee where id = #{id}\")\nEmployee getById(Long id);\n```\n\n测试![image-20250304150949048](苍穹外卖/image-20250304150949048.png)\n\n正常返回，开发第二个接口：\n\n![image-20250304151310618](苍穹外卖/image-20250304151310618.png)\n\n根据接口定义写控制层：\n\n```java\n/**\n * 编辑员工信息\n * @param employeeDTO\n * @return\n */\n@PutMapping\n@ApiOperation(\"编辑员工信息\")\npublic Result update(@RequestBody EmployeeDTO employeeDTO) {\n    log.info(\"编辑员工信息：{}\", employeeDTO);\n    employeeService.update(employeeDTO);\n    return Result.success();\n}\n```\n\n业务逻辑层：\n\n```java\n/**\n * 编辑员工信息\n * @param employeeDTO\n */\npublic void update(EmployeeDTO employeeDTO) {\n    Employee employee = new Employee();\n    //属性拷贝\n    BeanUtils.copyProperties(employeeDTO, employee);\n    //设置DTO对象里面没有的属性，这里是更新时间和更新者\n    employee.setUpdateTime(LocalDateTime.now());\n    employee.setUpdateUser(BaseContext.getCurrentId());\n    //直接调用之前写好的持久层更新的方法\n    employeeMapper.update(employee);\n}\n```\n\n\n\n\n截止目前我们已经实现了员工管理模块的许多功能，后续再想想密码修改的实现。接下来我们尝试实现分类模块的功能，由于该模块的所有功能与员工管理模块大差不差，故全记录在此篇文章。\n\n以下是我们需要实现的所有功能\n\n![image-20250304173525566](苍穹外卖/image-20250304173525566.png)\n\n先从分类的分页查询开始，查看接口说明\n\n![image-20250304173636208](苍穹外卖/image-20250304173636208.png)\n\n得知它的参数为一个数据传输对象DTO。\n\n由于是新的模块，我们新建控制层CategoryController类，业务层CategoryService接口和它的实现类CategoryServiceImpl类，持久层CategoryMapper类和它的配置文件CategoryMapper.xml。 \n\nCategoryController：\n\n```java\n/**\n * 分类管理\n */\n@RestController\n@RequestMapping(\"/admin/category\")\n@Slf4j\n@Api(tags = \"分类相关接口\")\npublic class CategoryController {\n\n    @Autowired\n    private CategoryService categoryService;\n\n    /**\n     * 分类分页查询\n     * @param categoryPageQueryDTO\n     * @return\n     */\n    @GetMapping(\"/page\")\n    @ApiOperation(\"分类分页查询\")\n    public Result<PageResult> page(CategoryPageQueryDTO categoryPageQueryDTO) {\n        log.info(\"分类分页查询，参数为：{}\",categoryPageQueryDTO);\n        PageResult pageResult = categoryService.pageQuery(categoryPageQueryDTO);\n        return Result.success(pageResult);\n    }\n\n}\n```\n\nCategoryService：\n\n```java\n@Service\npublic class CategoryServiceImpl implements CategoryService {\n\n    @Autowired\n    private CategoryMapper categoryMapper;\n\n    /**\n     * 分类分页查询\n     * @param categoryPageQueryDTO\n     * @return\n     */\n    @Override\n    public PageResult pageQuery(CategoryPageQueryDTO categoryPageQueryDTO) {\n        //select *from category limit 0,10\n        //利用mybatis的pagehelper\n        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());\n        Page<Category> page = categoryMapper.pageQuery(categoryPageQueryDTO);\n\n        long total = page.getTotal();\n        List<Category> list = page.getResult();\n        return new PageResult(total,list);\n    }\n}\n```\n\nCategoryMapper：\n\n```java\n@Mapper\npublic interface CategoryMapper {\n    /**\n     * 分页查询\n     *\n     * @param categoryPageQueryDTO\n     * @return\n     */\n    Page<Category> pageQuery(CategoryPageQueryDTO categoryPageQueryDTO);\n}\n```\n\nCategoryMapper.xml：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.sky.mapper.CategoryMapper\">\n    <select id=\"pageQuery\" resultType=\"com.sky.entity.Category\">\n        select * from category\n        <where>\n            <if test=\"name != null and name != ''\">\n                and name like concat('%',#{name},'%')\n            </if>\n            <if test=\"type != null\">and type = #{type}</if>\n        </where>\n        order by create_time desc\n    </select>\n</mapper>\n```\n\n### 特别注意：\n\nSQL 中的 `WHERE` 子句不支持用逗号分隔多个条件。条件之间应该用逻辑运算符（如 `AND` 或 `OR`）连接。\n\n**第三天：**\n\n\n## 公共字段填充\n\n注意到在修改表数据时总是会使用到createUser、updateUser和createTime、updateTime等字段，故考虑把它们抽出来单独处理。这样的思想可以归纳为aop即面向切面编程，它是一种编程范式，**用于将横切关注点从业务逻辑中分离出来**，从而提高代码的模块化、可维护性和可扩展性。\n\n实现流程：\n\n1.确定需要分离的点，这里的公共字段\n\n![](苍穹外卖/image-20250309160847232.png)\n\n2.自定义注解@AutoFill：用于标识需要进行统一处理的方法。\n\n3.新建切面包，自定义切面类AutoFillAspect：统一拦截加入了AutoFill的方法，通过反射来为统一赋值\n\n4.在Mapper层具体的方法加上AutoFill注解。\n\n代码实现：\n\n**1.自定义AutoFill注解【只用来标识，标识那些类需要自动填充】**\n\n1.创建annotaion包用来存放自定义注解，然后创建AutoFill注解\n\n2.添加注解@Target(ElementType.METHOD)用来说明注解是加到方法上的\n\n3.添加@Retention(RetentionPolicy.RUNTIME)注解，保留策略为运行时\n\n4.在注解里面指定当前数据库操作类型【可以使用枚举】【定义了之后参数列表的value就可以使用枚举类的值】\n\n5.OperationType value();//自定义的枚举类型【里面是update和insert】\n\n```java\n/**\n * 用于标识方法需要进行功能字段自动填充处理\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface AutoFill {\n    //数据库操作类型 insert或者update\n    OperationType value();\n}\n```\n\n**2.自定义切面类AutoFillAspect**\n\n1.找切入点，即加上注解的方法\n\n2.在执行这些方法执行前先执行我的这个操作（公共字段填充）\n\n```java\n/**\n * 自定义切面，实现公共字段自动填充处理\n */\n@Aspect\n@Component\n@Slf4j\npublic class AutoFillAspact {\n    /**\n     * 切入点\n     */\n    @Pointcut(\"execution(* com.sky.mapper.*.*(..)) && @annotation(com.sky.annotation.AutoFill)\")\n    public void autoFillPointCut() {}\n\n    @Before(\"autoFillPointCut()\")\n    public void autoFill(JoinPoint joinPoint) throws Throwable {\n        log.info(\"开始进行公共字段填充\");\n\n        //获取当前被拦截的方法上的数据库操作类型(insert update等)\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();//方法签名对象\n        AutoFill autoFill = methodSignature.getMethod().getAnnotation(AutoFill.class);//获取方法上的注解对象\n        OperationType operationType = autoFill.value();//获得操作类型\n\n        //获取当前被拦截方法的参数(比如这里的实体对象)\n        Object[] args = joinPoint.getArgs();\n        if (args == null || args.length == 0) {\n            return;\n        }\n\n        Object entity =  args[0];\n\n        //准备赋值的数据\n        LocalDateTime now = LocalDateTime.now();\n        Long currentId = BaseContext.getCurrentId();\n        //根据当前不同的操作类型，为对应的属性通过反射来赋值\n        if(operationType == OperationType.INSERT) {\n            Method setCreateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME,LocalDateTime.class);\n            Method setCreateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER,Long.class);\n            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);\n            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);\n\n            //通过反射来为对象赋值\n            setCreateTime.invoke(entity,now);\n            setCreateUser.invoke(entity,currentId);\n            setUpdateTime.invoke(entity,now);\n            setUpdateUser.invoke(entity,currentId);\n        } else if (operationType == OperationType.UPDATE) {\n            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);\n            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);\n            setUpdateTime.invoke(entity,now);\n            setUpdateUser.invoke(entity,currentId);\n        }\n\n    }\n}\n```\n\n## 新增菜品\n\n实现两件事，其一完成文件上传，其二完成菜品新增\n\n**文件上传：**\n\n新增通用接口控制层：\n\n```java\n/**\n * 通用接口\n */\n@RestController\n@RequestMapping(\"/admin/common\")\n@Api(\"通用接口\")\n@Slf4j\npublic class CommonController {\n\n    private static String FILE_UPLOAD_PATH = \"C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/\";\n\n    @PostMapping(\"/upload\")\n    @ResponseBody\n    public Result uploadFile(@RequestParam(\"file\") MultipartFile file) throws IOException {\n        if (file.isEmpty()) {\n            return Result.error(\"文件不能为空\");\n        }\n\n        File dir = new File(FILE_UPLOAD_PATH);\n        if (!dir.exists() || !dir.isDirectory()) {\n            boolean created = dir.mkdirs();\n            if(created) {\n                log.info(\"创建文件夹成功: {}\", FILE_UPLOAD_PATH);\n            } else {\n                log.warn(\"创建文件夹失败或已经存在: {}\", FILE_UPLOAD_PATH);\n            }\n        }\n\n        String originalFilename = file.getOriginalFilename();\n        if (originalFilename == null || originalFilename.isEmpty()) {\n            return Result.error(\"文件名无效\");\n        }\n\n        // 确保文件路径安全，避免路径遍历攻击\n        Path targetLocation = Paths.get(FILE_UPLOAD_PATH).resolve(originalFilename).normalize();\n        try {\n            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);\n            log.info(\"文件上传成功: {}\", originalFilename);\n        } catch (IOException e) {\n            log.error(\"文件上传失败: {}\", originalFilename, e);\n            return Result.error(\"文件上传失败\");\n        }\n\n        // 你可以根据实际情况调整返回的文件访问链接\n        String fileUrl = \"http://localhost:8080/uploads/\" + originalFilename;\n        return Result.success(fileUrl);\n    }\n}\n```\n\n配置类的WebMvcConfiguration类里新增静态资源映射：\n\n```java\nprivate static String FILELOCATION = \"C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/\";\n/**\n * 设置静态资源映射\n * @param registry\n */\nprotected void addResourceHandlers(ResourceHandlerRegistry registry) {\n    registry.addResourceHandler(\"/doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n    registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n\n    // 将本地文件系统的 uploads 目录映射为 /uploads/** 的 URL\n    registry.addResourceHandler(\"/uploads/**\")\n            .addResourceLocations(\"file:\" + FILELOCATION);\n}\n```\n\n**新增菜品：**\n\n需要实现菜品和口味的新增：\n\n控制层DishController：\n\n```java\n/**\n * 菜品管理\n */\n@RestController\n@RequestMapping(\"/admin/dish\")\n@Api(tags = \"菜品相关接口\")\n@Slf4j\npublic class DishController {\n\n    @Autowired\n    private DishService dishService;\n\n    /**\n     * 新增菜品和口味\n     * @param dishDTO\n     * @return\n     */\n    @PostMapping\n    public Result save(@RequestBody DishDTO dishDTO) {\n      log.info(\"新增菜品{}\", dishDTO);\n      dishService.saveWithFlavor(dishDTO);\n\n      return Result.success();\n    }\n}\n```\n\n业务逻辑层DishServiceImpl：\n\n```java\n@Service\n@Slf4j\npublic class DishServiceImpl implements DishService {\n\n    @Autowired\n    private DishMapper dishMapper;\n    @Autowired\n    private DishFlavorMapper dishFlavorMapper;\n    /**\n     * 新增菜品和对应的口味\n     * @param dishDTO\n     */\n    @Transactional//保证事务原子性要么成功要么失败\n    public void saveWithFlavor(DishDTO dishDTO) {\n\n        Dish dish = new Dish();\n        BeanUtils.copyProperties(dishDTO, dish);\n\n        //向菜品表插入1条数据\n        dishMapper.insert(dish);\n\n        Long dishId = dish.getId();//获取insert语句生成的主键值\n\n        //向口味表插入n条数据\n        List<DishFlavor> flavors =  dishDTO.getFlavors();\n        if (flavors != null && flavors.size() > 0) {\n            flavors.forEach(dishFlavor -> {\n                dishFlavor.setDishId(dishId);\n            });\n\n            dishFlavorMapper.insertBatch(flavors);\n        }\n\n    }\n}\n```\n\n菜品的新增直接在Mapper层的配置文件写插入语句即可。\n\n口味的新增Mapper层的配置文件写动态sql\n\n```xml\n<insert id=\"insertBatch\">\n    insert into dish_flavor (dish_id, name, value) VALUES\n    <foreach collection=\"flavors\" item=\"df\" separator=\",\">\n        (#{df.dishId},#{df.name},#{df.value})\n    </foreach>\n</insert>\n```\n\n遇到的问题：\n\n1.老师提供的oss已无法使用，本地存储解决\n\n但是在使用value注解的时候没办法替换yml文件里的属性，直接写的变量解决，但是导致直接写的路径很长而且修改麻烦。\n\n2.复制DishMapper的时候复制了autofill注解到DishFlavorMapper导致报错，去掉即可。\n\n3.数据库的字段名和实体的字段名别搞混淆。\n\n## 批量删除菜品\n\n考虑菜品是否可以删除：\n\n1.是否存在起售中的菜品\n\n2.是否存在关联到套餐的菜品\n\n## 修改菜品基本信息和口味数据\n\n1.查询菜品分类（已实现）\n\n2.图片上传和回显菜品图片（已实现）\n\n3.根据id查询菜品---简单\n\n4.修改菜品\n\n注意口味数据可以先删除再新增以达到修改的效果。","source":"_posts/苍穹外卖.md","raw":"---\ntitle: 苍穹外卖\ntags: java\ndate: 2025-03-03\nupdated: 2025-03-20\ncategories: java\n---\n\n本文章记录学习苍穹外卖的过程和遇到的问题。\n\n​\t首次接手苍穹外卖这个项目，可以发现并不是让我们从零开始建立的，我们是在一定基础上进行后续的功能开发的。并且提供了前端所有的源码以便于我们进行前后端联调测试，先把学习重心放到后端实现上来。\n\n​\t我首先关注到的是这个项目的结构，跟目录下分了3个包，分别是common(普通类)、pojo(实体类等)和server(业务逻辑类等)，把前端用nginx启动后，直接在server包下的SkyApplication类启动这个项目。发现这个项目运行在本地的8080上，登录和登出功能已经是做好了的。\n\n​\t然后老师带我们进行了需求分析，导入需要实现的功能接口，老师演示的是Yapi导入的接口，由于它已经停止服务我便使用apifox进行了接口导入。\n\n## 第一个功能->新增员工\n\n​\t查看接口\n\n![image-20250303174432365](苍穹外卖/image-20250303174432365.png)\n\n​\t在控制层EmployeeController类新增一个方法作为对外的接口\n\n```java\n/**\n* 新增员工\n* @param employeeDTO\n* @return\n* */\n@PostMapping\n@ApiOperation(\"新增员工\")\npublic Result save(@RequestBody EmployeeDTO employeeDTO) {\n    log.info(\"新增员工: {}\", employeeDTO);\n    employeeService.save(employeeDTO);\n    return Result.success();\n}\n```\n\n具体的实现交给业务逻辑层的employeeService接口和它的实现类，\n\n```java\n    /**\n     * 新增员工\n     * @param employeeDTO\n     */\n    @Override\n    public void save(EmployeeDTO employeeDTO) {\n        Employee employee = new Employee();\n        //对象属性拷贝\n        BeanUtils.copyProperties(employeeDTO, employee);\n        //设置账号状态，在常量类中0表示禁用disable，1相反，这里新增的员工默认可用\n        employee.setStatus(StatusConstant.ENABLE);\n        //设置密码，默认123456\n        employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));\n        //设置时间\n        employee.setCreateTime(LocalDateTime.now());\n        employee.setUpdateTime(LocalDateTime.now());\n        //设置当前记录创建人id和修改人id\n        //  后期需要改为当前登录用户的id 已利用上下文的thread完成\n        employee.setCreateUser(BaseContext.getCurrentId());\n        employee.setUpdateUser(BaseContext.getCurrentId());\n\n        //\n        employeeMapper.insert(employee);\n    }\n```\n\n至于数据库的相关操作交给Mapper层处理\n\n```java\n/**\n * 插入员工数据\n * @param employee\n */\n@Insert(\"insert into employee(name,username,password,phone,sex,id_number,create_time,update_time,create_user,update_user,status)\" +\n        \"values \" +\n        \"(#{name},#{username},#{password},#{phone},#{sex},#{idNumber},#{createTime},#{updateTime},#{createUser},#{updateUser},#{status})\")\nvoid insert(Employee employee);\n```\n\n做了两个优化\n\n问题有：\n\n1.录入的用户名重复抛出的异常没有处理\n\n2.新增员工的创建人id和修改人id设置为了固定值\n\n第一个 查看控制台的报错，\"Duplicate entry...\",在全局的异常处理器handler的GlobalExceptionHandler.java统一捕获处理异常\n\n```java\n    /**\n     * 处理SQL异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler\n    public Result exceptionHandler(SQLIntegrityConstraintViolationException ex){\n        String message = ex.getMessage();\n        if (message.contains(\"Duplicate entry\")){\n            String[] split = message.split(\" \");//先以空格分割获取用户名\n            String username = split[2];//用户名在报错信息的第3个字符串\n            String msg = username + MessageConstant.AlREDY_EXISTS;\n            return Result.error(msg);\n        }else {//其他情况返回常量类定义的字符串\n            return Result.error(MessageConstant.UNKNOWN_ERROR);\n        }\n    }\n\n```\n\n第二个\n\n生成jwt令牌的时候用到了用户的id，把它反解析出来\n\n```java\nLong empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());\n```\n\n利用每一次请求都是同一线程的特点，使用ThreadLocal保存并在需要的时候调用即可。以下是这个类的信息：\n\n```java\npackage com.sky.context;\n\npublic class BaseContext {\n\n    public static ThreadLocal<Long> threadLocal = new ThreadLocal<>();\n\n    public static void setCurrentId(Long id) {\n        threadLocal.set(id);\n    }\n\n    public static Long getCurrentId() {\n        return threadLocal.get();\n    }\n\n    public static void removeCurrentId() {\n        threadLocal.remove();\n    }\n\n}\n```\n\n于是可以在生成jwt令牌时保存\n\n```java\nLong empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());\nlog.info(\"当前员工id：\", empId);\n\nBaseContext.setCurrentId(empId);\n```\n\n在实现类里面调用\n\n```java\n//设置当前记录创建人id和修改人id\n//  后期需要改为当前登录用户的id 已利用上下文的thread完成\nemployee.setCreateUser(BaseContext.getCurrentId());\nemployee.setUpdateUser(BaseContext.getCurrentId());\n```\n\n## 第二个功能员工分页查询\n\n​\t控制层EmployeeController类\n\n```java\n/**\n * 员工分页查询\n * @param employeePageQueryDTO\n * @return\n */\n@GetMapping(\"/page\")\n@ApiOperation(\"员工分页查询\")\npublic Result<PageResult> page(EmployeePageQueryDTO employeePageQueryDTO) {\n    log.info(\"员工分页查询，参数为：{}\",employeePageQueryDTO);\n    PageResult pageResult = employeeService.pageQuery(employeePageQueryDTO);\n    return Result.success(pageResult);\n}\n```\n\n​\t业务逻辑层的实现类EmployeeServiceImpl\n\n```java\n/**\n * 分页查询\n * @param employeePageQueryDTO\n * @return\n */\n@Override\npublic PageResult pageQuery(EmployeePageQueryDTO employeePageQueryDTO) {\n    //select * from employee limit 0,10\n    //利用mybatis的pagehelper\n    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize());\n\n    Page<Employee> page = employeeMapper.pageQuery(employeePageQueryDTO);\n\n    long total = page.getTotal();\n    List<Employee> records = page.getResult();\n\n    return new PageResult(total,records);\n}\n```\n\n​\t数据库交互层EmployeeMapper类\n\n```java\n/**\n * 分页查询\n * @param employeePageQueryDTO\n * @return\n */\nPage<Employee> pageQuery(EmployeePageQueryDTO employeePageQueryDTO);\n```\n\nEmployeeMapper.xml\n\n```xml\n<select id=\"pageQuery\" resultType=\"com.sky.entity.Employee\">\n    select * from employee\n    <where>\n        <if test=\"name != null and name != ''\">\n            and name like concat('%',#{name},'%')\n        </if>\n    </where>\n    order by create_time desc\n</select>\n```\n\n做了一个优化\n\n问题是：前端显示的时间格式不美观\n\n通过在WebMvcConfiguration中扩展Spring MVC的消息转换器，统一对日期进行格式化处理\n\n```java\n/**\n * 扩展spring MVC消息转换器\n * @param converters\n */\nprotected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n    log.info(\"扩展消息转换器...\");\n    //创建一个消息转换器对象\n    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n    //需要为消息转换器设置一个对象转换器，对象转换器可以将java对象序列化为json数据\n    converter.setObjectMapper(new JacksonObjectMapper());\n    //将自己的消息转换器加入容器中\n    converters.add(0,converter);//索引为0，优先使用我们自己的消息转换器\n}\n```\n\n具体格式在JacksonObjectMapper类中自定义。\n\n**第二天:**\n\n\n关于苍穹外卖的学习，今天继续添加功能\n\n## 第一个功能启用/禁用员工账号\n\n首先查看接口文档\n\n![image-20250304131843059](苍穹外卖/image-20250304131843059.png)\n\n在控制层写，路径参数注解后面的status可省略(在两者名字相同时)，这个项目我们约定修改的返回值Result无需使用泛型，而查询的需要使用泛型。\n\n```java\n/**\n *启用禁用员工\n * @return\n */\n@PostMapping(\"/status/{status}\")\n@ApiOperation(\"启用禁用员工账号\")\npublic Result startOrStop(@PathVariable(\"status\") Integer status, Long id) {\n    log.info(\"启用禁用员工账号：{},{}\",status,id);\n    employeeService.startOrStop(status,id);\n    return Result.success();\n}\n```\n\nservice层加接口，写实现类\n\n```java\n    /**\n     * 启用禁用员工账号\n     * @param status\n     * @param id\n     */\n    public void startOrStop(Integer status, Long id) {\n        //update employee set status = ? where id = ?\n\n        //构造实体类对象 常规方法\n//        Employee employee = new Employee();\n//        employee.setId(id);\n//        employee.setStatus(status);\n\n        //利用构造器注解@Bulid\n        Employee employee = Employee.builder()\n                .status(status)\n                .id(id)\n                .build();\n        \n        employeeMapper.update(employee);\n    }\n```\n\n这里想着可能传递的参数不只是状态和id，也有可能是其他的，于是在持久层mapper里面写的update方法的形参是一个对象，包含了所有可能传递的参数。所以持久层mapper写：\n\n```java\n/**\n * 根据主键动态修改属性\n * @param employee\n */\nvoid update(Employee employee);\n```\n\n它的具体实现由于是动态sql所以不用注解实现而是写在配置文件 EmployeeMapper.xml 里：\n\n```xml\n<update id=\"update\" parameterType=\"Employee\">\n    update employee\n    <set>\n        <if test=\"name != null\">name = #{name},</if>\n        <if test=\"username != null\">username = #{username},</if>\n        <if test=\"password != null\">password = #{password},</if>\n        <if test=\"phone != null\">phone = #{phone},</if>\n        <if test=\"sex != null\">sex = #{sex},</if>\n        <if test=\"idNumber != null\">id_Number = #{idNumber},</if>\n        <if test=\"updateTime != null\">update_Time = #{updateTime},</if>\n        <if test=\"updateUser != null\">update_User = #{updateUser},</if>\n        <if test=\"status != null\">status = #{status},</if>\n    </set>\n    where id = #{id}\n</update>\n```\n\n### 特别注意：\n\n**这里的字段名字，数据库采用的是蛇形命名(如id_number),这里也需要加下划线变成id_Number。**\n\n最后提交推送分支。\n\n## 第二个功能编辑员工信息\n\n涉及两个接口，一个是根据员工id查询员工信息，\n\n![image-20250304144540830](苍穹外卖/image-20250304144540830.png)一个是修改员工信息\n\n![image-20250304144607548](苍穹外卖/image-20250304144607548.png)\n\n第一个接口，控制层：\n\n```java\n/**\n * 根据id查询员工信息\n * @param id\n * @return\n */\n@GetMapping(\"/{id}\")\n@ApiOperation(\"根据id查询员工信息\")\npublic Result<Employee> getById(@PathVariable Long id) {\n    Employee employee = employeeService.getById(id);\n    return Result.success(employee);\n}\n```\n\n业务逻辑层：这里把密码字段为了安全性重新设置为星号，不给前端传密码\n\n```java\n/**\n * 根据id查询员工\n * @param id\n * @return\n */\npublic Employee getById(Long id) {\n    Employee employee = employeeMapper.getById(id);\n    employee.setPassword(\"****\");\n    return employee;\n}\n```\n\n持久层mapper：\n\n```java\n/**\n * 根据id查询员工信息\n * @param id\n * @return\n */\n@Select(\"select * from employee where id = #{id}\")\nEmployee getById(Long id);\n```\n\n测试![image-20250304150949048](苍穹外卖/image-20250304150949048.png)\n\n正常返回，开发第二个接口：\n\n![image-20250304151310618](苍穹外卖/image-20250304151310618.png)\n\n根据接口定义写控制层：\n\n```java\n/**\n * 编辑员工信息\n * @param employeeDTO\n * @return\n */\n@PutMapping\n@ApiOperation(\"编辑员工信息\")\npublic Result update(@RequestBody EmployeeDTO employeeDTO) {\n    log.info(\"编辑员工信息：{}\", employeeDTO);\n    employeeService.update(employeeDTO);\n    return Result.success();\n}\n```\n\n业务逻辑层：\n\n```java\n/**\n * 编辑员工信息\n * @param employeeDTO\n */\npublic void update(EmployeeDTO employeeDTO) {\n    Employee employee = new Employee();\n    //属性拷贝\n    BeanUtils.copyProperties(employeeDTO, employee);\n    //设置DTO对象里面没有的属性，这里是更新时间和更新者\n    employee.setUpdateTime(LocalDateTime.now());\n    employee.setUpdateUser(BaseContext.getCurrentId());\n    //直接调用之前写好的持久层更新的方法\n    employeeMapper.update(employee);\n}\n```\n\n\n\n\n截止目前我们已经实现了员工管理模块的许多功能，后续再想想密码修改的实现。接下来我们尝试实现分类模块的功能，由于该模块的所有功能与员工管理模块大差不差，故全记录在此篇文章。\n\n以下是我们需要实现的所有功能\n\n![image-20250304173525566](苍穹外卖/image-20250304173525566.png)\n\n先从分类的分页查询开始，查看接口说明\n\n![image-20250304173636208](苍穹外卖/image-20250304173636208.png)\n\n得知它的参数为一个数据传输对象DTO。\n\n由于是新的模块，我们新建控制层CategoryController类，业务层CategoryService接口和它的实现类CategoryServiceImpl类，持久层CategoryMapper类和它的配置文件CategoryMapper.xml。 \n\nCategoryController：\n\n```java\n/**\n * 分类管理\n */\n@RestController\n@RequestMapping(\"/admin/category\")\n@Slf4j\n@Api(tags = \"分类相关接口\")\npublic class CategoryController {\n\n    @Autowired\n    private CategoryService categoryService;\n\n    /**\n     * 分类分页查询\n     * @param categoryPageQueryDTO\n     * @return\n     */\n    @GetMapping(\"/page\")\n    @ApiOperation(\"分类分页查询\")\n    public Result<PageResult> page(CategoryPageQueryDTO categoryPageQueryDTO) {\n        log.info(\"分类分页查询，参数为：{}\",categoryPageQueryDTO);\n        PageResult pageResult = categoryService.pageQuery(categoryPageQueryDTO);\n        return Result.success(pageResult);\n    }\n\n}\n```\n\nCategoryService：\n\n```java\n@Service\npublic class CategoryServiceImpl implements CategoryService {\n\n    @Autowired\n    private CategoryMapper categoryMapper;\n\n    /**\n     * 分类分页查询\n     * @param categoryPageQueryDTO\n     * @return\n     */\n    @Override\n    public PageResult pageQuery(CategoryPageQueryDTO categoryPageQueryDTO) {\n        //select *from category limit 0,10\n        //利用mybatis的pagehelper\n        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());\n        Page<Category> page = categoryMapper.pageQuery(categoryPageQueryDTO);\n\n        long total = page.getTotal();\n        List<Category> list = page.getResult();\n        return new PageResult(total,list);\n    }\n}\n```\n\nCategoryMapper：\n\n```java\n@Mapper\npublic interface CategoryMapper {\n    /**\n     * 分页查询\n     *\n     * @param categoryPageQueryDTO\n     * @return\n     */\n    Page<Category> pageQuery(CategoryPageQueryDTO categoryPageQueryDTO);\n}\n```\n\nCategoryMapper.xml：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.sky.mapper.CategoryMapper\">\n    <select id=\"pageQuery\" resultType=\"com.sky.entity.Category\">\n        select * from category\n        <where>\n            <if test=\"name != null and name != ''\">\n                and name like concat('%',#{name},'%')\n            </if>\n            <if test=\"type != null\">and type = #{type}</if>\n        </where>\n        order by create_time desc\n    </select>\n</mapper>\n```\n\n### 特别注意：\n\nSQL 中的 `WHERE` 子句不支持用逗号分隔多个条件。条件之间应该用逻辑运算符（如 `AND` 或 `OR`）连接。\n\n**第三天：**\n\n\n## 公共字段填充\n\n注意到在修改表数据时总是会使用到createUser、updateUser和createTime、updateTime等字段，故考虑把它们抽出来单独处理。这样的思想可以归纳为aop即面向切面编程，它是一种编程范式，**用于将横切关注点从业务逻辑中分离出来**，从而提高代码的模块化、可维护性和可扩展性。\n\n实现流程：\n\n1.确定需要分离的点，这里的公共字段\n\n![](苍穹外卖/image-20250309160847232.png)\n\n2.自定义注解@AutoFill：用于标识需要进行统一处理的方法。\n\n3.新建切面包，自定义切面类AutoFillAspect：统一拦截加入了AutoFill的方法，通过反射来为统一赋值\n\n4.在Mapper层具体的方法加上AutoFill注解。\n\n代码实现：\n\n**1.自定义AutoFill注解【只用来标识，标识那些类需要自动填充】**\n\n1.创建annotaion包用来存放自定义注解，然后创建AutoFill注解\n\n2.添加注解@Target(ElementType.METHOD)用来说明注解是加到方法上的\n\n3.添加@Retention(RetentionPolicy.RUNTIME)注解，保留策略为运行时\n\n4.在注解里面指定当前数据库操作类型【可以使用枚举】【定义了之后参数列表的value就可以使用枚举类的值】\n\n5.OperationType value();//自定义的枚举类型【里面是update和insert】\n\n```java\n/**\n * 用于标识方法需要进行功能字段自动填充处理\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface AutoFill {\n    //数据库操作类型 insert或者update\n    OperationType value();\n}\n```\n\n**2.自定义切面类AutoFillAspect**\n\n1.找切入点，即加上注解的方法\n\n2.在执行这些方法执行前先执行我的这个操作（公共字段填充）\n\n```java\n/**\n * 自定义切面，实现公共字段自动填充处理\n */\n@Aspect\n@Component\n@Slf4j\npublic class AutoFillAspact {\n    /**\n     * 切入点\n     */\n    @Pointcut(\"execution(* com.sky.mapper.*.*(..)) && @annotation(com.sky.annotation.AutoFill)\")\n    public void autoFillPointCut() {}\n\n    @Before(\"autoFillPointCut()\")\n    public void autoFill(JoinPoint joinPoint) throws Throwable {\n        log.info(\"开始进行公共字段填充\");\n\n        //获取当前被拦截的方法上的数据库操作类型(insert update等)\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();//方法签名对象\n        AutoFill autoFill = methodSignature.getMethod().getAnnotation(AutoFill.class);//获取方法上的注解对象\n        OperationType operationType = autoFill.value();//获得操作类型\n\n        //获取当前被拦截方法的参数(比如这里的实体对象)\n        Object[] args = joinPoint.getArgs();\n        if (args == null || args.length == 0) {\n            return;\n        }\n\n        Object entity =  args[0];\n\n        //准备赋值的数据\n        LocalDateTime now = LocalDateTime.now();\n        Long currentId = BaseContext.getCurrentId();\n        //根据当前不同的操作类型，为对应的属性通过反射来赋值\n        if(operationType == OperationType.INSERT) {\n            Method setCreateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME,LocalDateTime.class);\n            Method setCreateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER,Long.class);\n            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);\n            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);\n\n            //通过反射来为对象赋值\n            setCreateTime.invoke(entity,now);\n            setCreateUser.invoke(entity,currentId);\n            setUpdateTime.invoke(entity,now);\n            setUpdateUser.invoke(entity,currentId);\n        } else if (operationType == OperationType.UPDATE) {\n            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);\n            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);\n            setUpdateTime.invoke(entity,now);\n            setUpdateUser.invoke(entity,currentId);\n        }\n\n    }\n}\n```\n\n## 新增菜品\n\n实现两件事，其一完成文件上传，其二完成菜品新增\n\n**文件上传：**\n\n新增通用接口控制层：\n\n```java\n/**\n * 通用接口\n */\n@RestController\n@RequestMapping(\"/admin/common\")\n@Api(\"通用接口\")\n@Slf4j\npublic class CommonController {\n\n    private static String FILE_UPLOAD_PATH = \"C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/\";\n\n    @PostMapping(\"/upload\")\n    @ResponseBody\n    public Result uploadFile(@RequestParam(\"file\") MultipartFile file) throws IOException {\n        if (file.isEmpty()) {\n            return Result.error(\"文件不能为空\");\n        }\n\n        File dir = new File(FILE_UPLOAD_PATH);\n        if (!dir.exists() || !dir.isDirectory()) {\n            boolean created = dir.mkdirs();\n            if(created) {\n                log.info(\"创建文件夹成功: {}\", FILE_UPLOAD_PATH);\n            } else {\n                log.warn(\"创建文件夹失败或已经存在: {}\", FILE_UPLOAD_PATH);\n            }\n        }\n\n        String originalFilename = file.getOriginalFilename();\n        if (originalFilename == null || originalFilename.isEmpty()) {\n            return Result.error(\"文件名无效\");\n        }\n\n        // 确保文件路径安全，避免路径遍历攻击\n        Path targetLocation = Paths.get(FILE_UPLOAD_PATH).resolve(originalFilename).normalize();\n        try {\n            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);\n            log.info(\"文件上传成功: {}\", originalFilename);\n        } catch (IOException e) {\n            log.error(\"文件上传失败: {}\", originalFilename, e);\n            return Result.error(\"文件上传失败\");\n        }\n\n        // 你可以根据实际情况调整返回的文件访问链接\n        String fileUrl = \"http://localhost:8080/uploads/\" + originalFilename;\n        return Result.success(fileUrl);\n    }\n}\n```\n\n配置类的WebMvcConfiguration类里新增静态资源映射：\n\n```java\nprivate static String FILELOCATION = \"C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/\";\n/**\n * 设置静态资源映射\n * @param registry\n */\nprotected void addResourceHandlers(ResourceHandlerRegistry registry) {\n    registry.addResourceHandler(\"/doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n    registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n\n    // 将本地文件系统的 uploads 目录映射为 /uploads/** 的 URL\n    registry.addResourceHandler(\"/uploads/**\")\n            .addResourceLocations(\"file:\" + FILELOCATION);\n}\n```\n\n**新增菜品：**\n\n需要实现菜品和口味的新增：\n\n控制层DishController：\n\n```java\n/**\n * 菜品管理\n */\n@RestController\n@RequestMapping(\"/admin/dish\")\n@Api(tags = \"菜品相关接口\")\n@Slf4j\npublic class DishController {\n\n    @Autowired\n    private DishService dishService;\n\n    /**\n     * 新增菜品和口味\n     * @param dishDTO\n     * @return\n     */\n    @PostMapping\n    public Result save(@RequestBody DishDTO dishDTO) {\n      log.info(\"新增菜品{}\", dishDTO);\n      dishService.saveWithFlavor(dishDTO);\n\n      return Result.success();\n    }\n}\n```\n\n业务逻辑层DishServiceImpl：\n\n```java\n@Service\n@Slf4j\npublic class DishServiceImpl implements DishService {\n\n    @Autowired\n    private DishMapper dishMapper;\n    @Autowired\n    private DishFlavorMapper dishFlavorMapper;\n    /**\n     * 新增菜品和对应的口味\n     * @param dishDTO\n     */\n    @Transactional//保证事务原子性要么成功要么失败\n    public void saveWithFlavor(DishDTO dishDTO) {\n\n        Dish dish = new Dish();\n        BeanUtils.copyProperties(dishDTO, dish);\n\n        //向菜品表插入1条数据\n        dishMapper.insert(dish);\n\n        Long dishId = dish.getId();//获取insert语句生成的主键值\n\n        //向口味表插入n条数据\n        List<DishFlavor> flavors =  dishDTO.getFlavors();\n        if (flavors != null && flavors.size() > 0) {\n            flavors.forEach(dishFlavor -> {\n                dishFlavor.setDishId(dishId);\n            });\n\n            dishFlavorMapper.insertBatch(flavors);\n        }\n\n    }\n}\n```\n\n菜品的新增直接在Mapper层的配置文件写插入语句即可。\n\n口味的新增Mapper层的配置文件写动态sql\n\n```xml\n<insert id=\"insertBatch\">\n    insert into dish_flavor (dish_id, name, value) VALUES\n    <foreach collection=\"flavors\" item=\"df\" separator=\",\">\n        (#{df.dishId},#{df.name},#{df.value})\n    </foreach>\n</insert>\n```\n\n遇到的问题：\n\n1.老师提供的oss已无法使用，本地存储解决\n\n但是在使用value注解的时候没办法替换yml文件里的属性，直接写的变量解决，但是导致直接写的路径很长而且修改麻烦。\n\n2.复制DishMapper的时候复制了autofill注解到DishFlavorMapper导致报错，去掉即可。\n\n3.数据库的字段名和实体的字段名别搞混淆。\n\n## 批量删除菜品\n\n考虑菜品是否可以删除：\n\n1.是否存在起售中的菜品\n\n2.是否存在关联到套餐的菜品\n\n## 修改菜品基本信息和口味数据\n\n1.查询菜品分类（已实现）\n\n2.图片上传和回显菜品图片（已实现）\n\n3.根据id查询菜品---简单\n\n4.修改菜品\n\n注意口味数据可以先删除再新增以达到修改的效果。","slug":"苍穹外卖","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm9k19apm001npoot75jhabee","content":"<p>本文章记录学习苍穹外卖的过程和遇到的问题。</p>\n<p>​\t首次接手苍穹外卖这个项目，可以发现并不是让我们从零开始建立的，我们是在一定基础上进行后续的功能开发的。并且提供了前端所有的源码以便于我们进行前后端联调测试，先把学习重心放到后端实现上来。</p>\n<p>​\t我首先关注到的是这个项目的结构，跟目录下分了3个包，分别是common(普通类)、pojo(实体类等)和server(业务逻辑类等)，把前端用nginx启动后，直接在server包下的SkyApplication类启动这个项目。发现这个项目运行在本地的8080上，登录和登出功能已经是做好了的。</p>\n<p>​\t然后老师带我们进行了需求分析，导入需要实现的功能接口，老师演示的是Yapi导入的接口，由于它已经停止服务我便使用apifox进行了接口导入。</p>\n<h2 id=\"第一个功能-新增员工\"><a href=\"#第一个功能-新增员工\" class=\"headerlink\" title=\"第一个功能-&gt;新增员工\"></a>第一个功能-&gt;新增员工</h2><p>​\t查看接口</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250303174432365.png\" alt=\"image-20250303174432365\"></p>\n<p>​\t在控制层EmployeeController类新增一个方法作为对外的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 新增员工</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;新增员工&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;新增员工: &#123;&#125;&quot;</span>, employeeDTO);</span><br><span class=\"line\">    employeeService.save(employeeDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的实现交给业务逻辑层的employeeService接口和它的实现类，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 新增员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">    <span class=\"comment\">//对象属性拷贝</span></span><br><span class=\"line\">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class=\"line\">    <span class=\"comment\">//设置账号状态，在常量类中0表示禁用disable，1相反，这里新增的员工默认可用</span></span><br><span class=\"line\">    employee.setStatus(StatusConstant.ENABLE);</span><br><span class=\"line\">    <span class=\"comment\">//设置密码，默认123456</span></span><br><span class=\"line\">    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));</span><br><span class=\"line\">    <span class=\"comment\">//设置时间</span></span><br><span class=\"line\">    employee.setCreateTime(LocalDateTime.now());</span><br><span class=\"line\">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class=\"line\">    <span class=\"comment\">//设置当前记录创建人id和修改人id</span></span><br><span class=\"line\">    <span class=\"comment\">//  后期需要改为当前登录用户的id 已利用上下文的thread完成</span></span><br><span class=\"line\">    employee.setCreateUser(BaseContext.getCurrentId());</span><br><span class=\"line\">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    employeeMapper.insert(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至于数据库的相关操作交给Mapper层处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入员工数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employee</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Insert(&quot;insert into employee(name,username,password,phone,sex,id_number,create_time,update_time,create_user,update_user,status)&quot; +</span></span><br><span class=\"line\"><span class=\"meta\">        &quot;values &quot; +</span></span><br><span class=\"line\"><span class=\"meta\">        &quot;(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>做了两个优化</p>\n<p>问题有：</p>\n<p>1.录入的用户名重复抛出的异常没有处理</p>\n<p>2.新增员工的创建人id和修改人id设置为了固定值</p>\n<p>第一个 查看控制台的报错，”Duplicate entry…”,在全局的异常处理器handler的GlobalExceptionHandler.java统一捕获处理异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 处理SQL异常</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ex</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">exceptionHandler</span><span class=\"params\">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> ex.getMessage();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message.contains(<span class=\"string\">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class=\"line\">        String[] split = message.split(<span class=\"string\">&quot; &quot;</span>);<span class=\"comment\">//先以空格分割获取用户名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> split[<span class=\"number\">2</span>];<span class=\"comment\">//用户名在报错信息的第3个字符串</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> username + MessageConstant.AlREDY_EXISTS;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(msg);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//其他情况返回常量类定义的字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第二个</p>\n<p>生成jwt令牌的时候用到了用户的id，把它反解析出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Long</span> <span class=\"variable\">empId</span> <span class=\"operator\">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br></pre></td></tr></table></figure>\n\n<p>利用每一次请求都是同一线程的特点，使用ThreadLocal保存并在需要的时候调用即可。以下是这个类的信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sky.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseContext</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCurrentId</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        threadLocal.set(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">getCurrentId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeCurrentId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        threadLocal.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>于是可以在生成jwt令牌时保存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Long</span> <span class=\"variable\">empId</span> <span class=\"operator\">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;当前员工id：&quot;</span>, empId);</span><br><span class=\"line\"></span><br><span class=\"line\">BaseContext.setCurrentId(empId);</span><br></pre></td></tr></table></figure>\n\n<p>在实现类里面调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置当前记录创建人id和修改人id</span></span><br><span class=\"line\"><span class=\"comment\">//  后期需要改为当前登录用户的id 已利用上下文的thread完成</span></span><br><span class=\"line\">employee.setCreateUser(BaseContext.getCurrentId());</span><br><span class=\"line\">employee.setUpdateUser(BaseContext.getCurrentId());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二个功能员工分页查询\"><a href=\"#第二个功能员工分页查询\" class=\"headerlink\" title=\"第二个功能员工分页查询\"></a>第二个功能员工分页查询</h2><p>​\t控制层EmployeeController类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;员工分页查询&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;PageResult&gt; <span class=\"title function_\">page</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;员工分页查询，参数为：&#123;&#125;&quot;</span>,employeePageQueryDTO);</span><br><span class=\"line\">    <span class=\"type\">PageResult</span> <span class=\"variable\">pageResult</span> <span class=\"operator\">=</span> employeeService.pageQuery(employeePageQueryDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success(pageResult);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t业务逻辑层的实现类EmployeeServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//select * from employee limit 0,10</span></span><br><span class=\"line\">    <span class=\"comment\">//利用mybatis的pagehelper</span></span><br><span class=\"line\">    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize());</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> page.getTotal();</span><br><span class=\"line\">    List&lt;Employee&gt; records = page.getResult();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageResult</span>(total,records);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t数据库交互层EmployeeMapper类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Page&lt;Employee&gt; <span class=\"title function_\">pageQuery</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>EmployeeMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pageQuery&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sky.entity.Employee&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from employee</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    order by create_time desc</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>做了一个优化</p>\n<p>问题是：前端显示的时间格式不美观</p>\n<p>通过在WebMvcConfiguration中扩展Spring MVC的消息转换器，统一对日期进行格式化处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展spring MVC消息转换器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> converters</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;扩展消息转换器...&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个消息转换器对象</span></span><br><span class=\"line\">    <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">    <span class=\"comment\">//需要为消息转换器设置一个对象转换器，对象转换器可以将java对象序列化为json数据</span></span><br><span class=\"line\">    converter.setObjectMapper(<span class=\"keyword\">new</span> <span class=\"title class_\">JacksonObjectMapper</span>());</span><br><span class=\"line\">    <span class=\"comment\">//将自己的消息转换器加入容器中</span></span><br><span class=\"line\">    converters.add(<span class=\"number\">0</span>,converter);<span class=\"comment\">//索引为0，优先使用我们自己的消息转换器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体格式在JacksonObjectMapper类中自定义。</p>\n<p><strong>第二天:</strong></p>\n<p>关于苍穹外卖的学习，今天继续添加功能</p>\n<h2 id=\"第一个功能启用-禁用员工账号\"><a href=\"#第一个功能启用-禁用员工账号\" class=\"headerlink\" title=\"第一个功能启用&#x2F;禁用员工账号\"></a>第一个功能启用&#x2F;禁用员工账号</h2><p>首先查看接口文档</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304131843059.png\" alt=\"image-20250304131843059\"></p>\n<p>在控制层写，路径参数注解后面的status可省略(在两者名字相同时)，这个项目我们约定修改的返回值Result无需使用泛型，而查询的需要使用泛型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *启用禁用员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">startOrStop</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;status&quot;)</span> Integer status, Long id)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;启用禁用员工账号：&#123;&#125;,&#123;&#125;&quot;</span>,status,id);</span><br><span class=\"line\">    employeeService.startOrStop(status,id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>service层加接口，写实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启用禁用员工账号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startOrStop</span><span class=\"params\">(Integer status, Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//update employee set status = ? where id = ?</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//构造实体类对象 常规方法</span></span><br><span class=\"line\"><span class=\"comment\">//        Employee employee = new Employee();</span></span><br><span class=\"line\"><span class=\"comment\">//        employee.setId(id);</span></span><br><span class=\"line\"><span class=\"comment\">//        employee.setStatus(status);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//利用构造器注解@Bulid</span></span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> Employee.builder()</span><br><span class=\"line\">                .status(status)</span><br><span class=\"line\">                .id(id)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        </span><br><span class=\"line\">        employeeMapper.update(employee);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里想着可能传递的参数不只是状态和id，也有可能是其他的，于是在持久层mapper里面写的update方法的形参是一个对象，包含了所有可能传递的参数。所以持久层mapper写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据主键动态修改属性</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employee</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它的具体实现由于是动态sql所以不用注解实现而是写在配置文件 EmployeeMapper.xml 里：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Employee&quot;</span>&gt;</span></span><br><span class=\"line\">    update employee</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;username != null&quot;</span>&gt;</span>username = #&#123;username&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;password != null&quot;</span>&gt;</span>password = #&#123;password&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;phone != null&quot;</span>&gt;</span>phone = #&#123;phone&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;sex != null&quot;</span>&gt;</span>sex = #&#123;sex&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;idNumber != null&quot;</span>&gt;</span>id_Number = #&#123;idNumber&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;updateTime != null&quot;</span>&gt;</span>update_Time = #&#123;updateTime&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;updateUser != null&quot;</span>&gt;</span>update_User = #&#123;updateUser&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意：\"><a href=\"#特别注意：\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><p><strong>这里的字段名字，数据库采用的是蛇形命名(如id_number),这里也需要加下划线变成id_Number。</strong></p>\n<p>最后提交推送分支。</p>\n<h2 id=\"第二个功能编辑员工信息\"><a href=\"#第二个功能编辑员工信息\" class=\"headerlink\" title=\"第二个功能编辑员工信息\"></a>第二个功能编辑员工信息</h2><p>涉及两个接口，一个是根据员工id查询员工信息，</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304144540830.png\" alt=\"image-20250304144540830\">一个是修改员工信息</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304144607548.png\" alt=\"image-20250304144607548\"></p>\n<p>第一个接口，控制层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;Employee&gt; <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务逻辑层：这里把密码字段为了安全性重新设置为星号，不给前端传密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Employee <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> employeeMapper.getById(id);</span><br><span class=\"line\">    employee.setPassword(<span class=\"string\">&quot;****&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> employee;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>持久层mapper：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">Employee <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>测试<img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304150949048.png\" alt=\"image-20250304150949048\"></p>\n<p>正常返回，开发第二个接口：</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304151310618.png\" alt=\"image-20250304151310618\"></p>\n<p>根据接口定义写控制层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编辑员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PutMapping</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;编辑员工信息&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;编辑员工信息：&#123;&#125;&quot;</span>, employeeDTO);</span><br><span class=\"line\">    employeeService.update(employeeDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务逻辑层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编辑员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">    <span class=\"comment\">//属性拷贝</span></span><br><span class=\"line\">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class=\"line\">    <span class=\"comment\">//设置DTO对象里面没有的属性，这里是更新时间和更新者</span></span><br><span class=\"line\">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class=\"line\">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class=\"line\">    <span class=\"comment\">//直接调用之前写好的持久层更新的方法</span></span><br><span class=\"line\">    employeeMapper.update(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>截止目前我们已经实现了员工管理模块的许多功能，后续再想想密码修改的实现。接下来我们尝试实现分类模块的功能，由于该模块的所有功能与员工管理模块大差不差，故全记录在此篇文章。</p>\n<p>以下是我们需要实现的所有功能</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304173525566.png\" alt=\"image-20250304173525566\"></p>\n<p>先从分类的分页查询开始，查看接口说明</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304173636208.png\" alt=\"image-20250304173636208\"></p>\n<p>得知它的参数为一个数据传输对象DTO。</p>\n<p>由于是新的模块，我们新建控制层CategoryController类，业务层CategoryService接口和它的实现类CategoryServiceImpl类，持久层CategoryMapper类和它的配置文件CategoryMapper.xml。 </p>\n<p>CategoryController：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分类管理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/admin/category&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Api(tags = &quot;分类相关接口&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CategoryController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CategoryService categoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分类分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;分类分页查询&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result&lt;PageResult&gt; <span class=\"title function_\">page</span><span class=\"params\">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;分类分页查询，参数为：&#123;&#125;&quot;</span>,categoryPageQueryDTO);</span><br><span class=\"line\">        <span class=\"type\">PageResult</span> <span class=\"variable\">pageResult</span> <span class=\"operator\">=</span> categoryService.pageQuery(categoryPageQueryDTO);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(pageResult);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryService：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CategoryServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CategoryService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CategoryMapper categoryMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分类分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//select *from category limit 0,10</span></span><br><span class=\"line\">        <span class=\"comment\">//利用mybatis的pagehelper</span></span><br><span class=\"line\">        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());</span><br><span class=\"line\">        Page&lt;Category&gt; page = categoryMapper.pageQuery(categoryPageQueryDTO);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> page.getTotal();</span><br><span class=\"line\">        List&lt;Category&gt; list = page.getResult();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageResult</span>(total,list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryMapper：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CategoryMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Page&lt;Category&gt; <span class=\"title function_\">pageQuery</span><span class=\"params\">(CategoryPageQueryDTO categoryPageQueryDTO)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryMapper.xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.sky.mapper.CategoryMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pageQuery&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sky.entity.Category&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from category</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">                and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;type != null&quot;</span>&gt;</span>and type = #&#123;type&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        order by create_time desc</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意：-1\"><a href=\"#特别注意：-1\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><p>SQL 中的 <code>WHERE</code> 子句不支持用逗号分隔多个条件。条件之间应该用逻辑运算符（如 <code>AND</code> 或 <code>OR</code>）连接。</p>\n<p><strong>第三天：</strong></p>\n<h2 id=\"公共字段填充\"><a href=\"#公共字段填充\" class=\"headerlink\" title=\"公共字段填充\"></a>公共字段填充</h2><p>注意到在修改表数据时总是会使用到createUser、updateUser和createTime、updateTime等字段，故考虑把它们抽出来单独处理。这样的思想可以归纳为aop即面向切面编程，它是一种编程范式，<strong>用于将横切关注点从业务逻辑中分离出来</strong>，从而提高代码的模块化、可维护性和可扩展性。</p>\n<p>实现流程：</p>\n<p>1.确定需要分离的点，这里的公共字段</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250309160847232.png\"></p>\n<p>2.自定义注解@AutoFill：用于标识需要进行统一处理的方法。</p>\n<p>3.新建切面包，自定义切面类AutoFillAspect：统一拦截加入了AutoFill的方法，通过反射来为统一赋值</p>\n<p>4.在Mapper层具体的方法加上AutoFill注解。</p>\n<p>代码实现：</p>\n<p><strong>1.自定义AutoFill注解【只用来标识，标识那些类需要自动填充】</strong></p>\n<p>1.创建annotaion包用来存放自定义注解，然后创建AutoFill注解</p>\n<p>2.添加注解@Target(ElementType.METHOD)用来说明注解是加到方法上的</p>\n<p>3.添加@Retention(RetentionPolicy.RUNTIME)注解，保留策略为运行时</p>\n<p>4.在注解里面指定当前数据库操作类型【可以使用枚举】【定义了之后参数列表的value就可以使用枚举类的值】</p>\n<p>5.OperationType value();&#x2F;&#x2F;自定义的枚举类型【里面是update和insert】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于标识方法需要进行功能字段自动填充处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoFill &#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据库操作类型 insert或者update</span></span><br><span class=\"line\">    OperationType <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.自定义切面类AutoFillAspect</strong></p>\n<p>1.找切入点，即加上注解的方法</p>\n<p>2.在执行这些方法执行前先执行我的这个操作（公共字段填充）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义切面，实现公共字段自动填充处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoFillAspact</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 切入点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">autoFillPointCut</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">autoFill</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;开始进行公共字段填充&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取当前被拦截的方法上的数据库操作类型(insert update等)</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">methodSignature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();<span class=\"comment\">//方法签名对象</span></span><br><span class=\"line\">        <span class=\"type\">AutoFill</span> <span class=\"variable\">autoFill</span> <span class=\"operator\">=</span> methodSignature.getMethod().getAnnotation(AutoFill.class);<span class=\"comment\">//获取方法上的注解对象</span></span><br><span class=\"line\">        <span class=\"type\">OperationType</span> <span class=\"variable\">operationType</span> <span class=\"operator\">=</span> autoFill.value();<span class=\"comment\">//获得操作类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取当前被拦截方法的参数(比如这里的实体对象)</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args == <span class=\"literal\">null</span> || args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span>  args[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//准备赋值的数据</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">currentId</span> <span class=\"operator\">=</span> BaseContext.getCurrentId();</span><br><span class=\"line\">        <span class=\"comment\">//根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(operationType == OperationType.INSERT) &#123;</span><br><span class=\"line\">            Method setCreateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME,LocalDateTime.class);</span><br><span class=\"line\">            Method setCreateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER,Long.class);</span><br><span class=\"line\">            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);</span><br><span class=\"line\">            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//通过反射来为对象赋值</span></span><br><span class=\"line\">            setCreateTime.invoke(entity,now);</span><br><span class=\"line\">            setCreateUser.invoke(entity,currentId);</span><br><span class=\"line\">            setUpdateTime.invoke(entity,now);</span><br><span class=\"line\">            setUpdateUser.invoke(entity,currentId);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (operationType == OperationType.UPDATE) &#123;</span><br><span class=\"line\">            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);</span><br><span class=\"line\">            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);</span><br><span class=\"line\">            setUpdateTime.invoke(entity,now);</span><br><span class=\"line\">            setUpdateUser.invoke(entity,currentId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新增菜品\"><a href=\"#新增菜品\" class=\"headerlink\" title=\"新增菜品\"></a>新增菜品</h2><p>实现两件事，其一完成文件上传，其二完成菜品新增</p>\n<p><strong>文件上传：</strong></p>\n<p>新增通用接口控制层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通用接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/admin/common&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(&quot;通用接口&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">FILE_UPLOAD_PATH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">uploadFile</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;文件不能为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">dir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(FILE_UPLOAD_PATH);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">created</span> <span class=\"operator\">=</span> dir.mkdirs();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(created) &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;创建文件夹成功: &#123;&#125;&quot;</span>, FILE_UPLOAD_PATH);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;创建文件夹失败或已经存在: &#123;&#125;&quot;</span>, FILE_UPLOAD_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFilename</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originalFilename == <span class=\"literal\">null</span> || originalFilename.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;文件名无效&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确保文件路径安全，避免路径遍历攻击</span></span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">targetLocation</span> <span class=\"operator\">=</span> Paths.get(FILE_UPLOAD_PATH).resolve(originalFilename).normalize();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;文件上传成功: &#123;&#125;&quot;</span>, originalFilename);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;文件上传失败: &#123;&#125;&quot;</span>, originalFilename, e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;文件上传失败&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 你可以根据实际情况调整返回的文件访问链接</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileUrl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://localhost:8080/uploads/&quot;</span> + originalFilename;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(fileUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置类的WebMvcConfiguration类里新增静态资源映射：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">FILELOCATION</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置静态资源映射</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> registry</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\">    registry.addResourceHandler(<span class=\"string\">&quot;/doc.html&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class=\"line\">    registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将本地文件系统的 uploads 目录映射为 /uploads/** 的 URL</span></span><br><span class=\"line\">    registry.addResourceHandler(<span class=\"string\">&quot;/uploads/**&quot;</span>)</span><br><span class=\"line\">            .addResourceLocations(<span class=\"string\">&quot;file:&quot;</span> + FILELOCATION);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>新增菜品：</strong></p>\n<p>需要实现菜品和口味的新增：</p>\n<p>控制层DishController：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 菜品管理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/admin/dish&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(tags = &quot;菜品相关接口&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DishController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DishService dishService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增菜品和口味</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dishDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> DishDTO dishDTO)</span> &#123;</span><br><span class=\"line\">      log.info(<span class=\"string\">&quot;新增菜品&#123;&#125;&quot;</span>, dishDTO);</span><br><span class=\"line\">      dishService.saveWithFlavor(dishDTO);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务逻辑层DishServiceImpl：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DishServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DishService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DishMapper dishMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DishFlavorMapper dishFlavorMapper;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增菜品和对应的口味</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dishDTO</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span><span class=\"comment\">//保证事务原子性要么成功要么失败</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveWithFlavor</span><span class=\"params\">(DishDTO dishDTO)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Dish</span> <span class=\"variable\">dish</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dish</span>();</span><br><span class=\"line\">        BeanUtils.copyProperties(dishDTO, dish);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向菜品表插入1条数据</span></span><br><span class=\"line\">        dishMapper.insert(dish);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">dishId</span> <span class=\"operator\">=</span> dish.getId();<span class=\"comment\">//获取insert语句生成的主键值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向口味表插入n条数据</span></span><br><span class=\"line\">        List&lt;DishFlavor&gt; flavors =  dishDTO.getFlavors();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flavors != <span class=\"literal\">null</span> &amp;&amp; flavors.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class=\"line\">                dishFlavor.setDishId(dishId);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            dishFlavorMapper.insertBatch(flavors);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>菜品的新增直接在Mapper层的配置文件写插入语句即可。</p>\n<p>口味的新增Mapper层的配置文件写动态sql</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into dish_flavor (dish_id, name, value) VALUES</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;flavors&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;df&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>遇到的问题：</p>\n<p>1.老师提供的oss已无法使用，本地存储解决</p>\n<p>但是在使用value注解的时候没办法替换yml文件里的属性，直接写的变量解决，但是导致直接写的路径很长而且修改麻烦。</p>\n<p>2.复制DishMapper的时候复制了autofill注解到DishFlavorMapper导致报错，去掉即可。</p>\n<p>3.数据库的字段名和实体的字段名别搞混淆。</p>\n<h2 id=\"批量删除菜品\"><a href=\"#批量删除菜品\" class=\"headerlink\" title=\"批量删除菜品\"></a>批量删除菜品</h2><p>考虑菜品是否可以删除：</p>\n<p>1.是否存在起售中的菜品</p>\n<p>2.是否存在关联到套餐的菜品</p>\n<h2 id=\"修改菜品基本信息和口味数据\"><a href=\"#修改菜品基本信息和口味数据\" class=\"headerlink\" title=\"修改菜品基本信息和口味数据\"></a>修改菜品基本信息和口味数据</h2><p>1.查询菜品分类（已实现）</p>\n<p>2.图片上传和回显菜品图片（已实现）</p>\n<p>3.根据id查询菜品—简单</p>\n<p>4.修改菜品</p>\n<p>注意口味数据可以先删除再新增以达到修改的效果。</p>\n","excerpt":"","more":"<p>本文章记录学习苍穹外卖的过程和遇到的问题。</p>\n<p>​\t首次接手苍穹外卖这个项目，可以发现并不是让我们从零开始建立的，我们是在一定基础上进行后续的功能开发的。并且提供了前端所有的源码以便于我们进行前后端联调测试，先把学习重心放到后端实现上来。</p>\n<p>​\t我首先关注到的是这个项目的结构，跟目录下分了3个包，分别是common(普通类)、pojo(实体类等)和server(业务逻辑类等)，把前端用nginx启动后，直接在server包下的SkyApplication类启动这个项目。发现这个项目运行在本地的8080上，登录和登出功能已经是做好了的。</p>\n<p>​\t然后老师带我们进行了需求分析，导入需要实现的功能接口，老师演示的是Yapi导入的接口，由于它已经停止服务我便使用apifox进行了接口导入。</p>\n<h2 id=\"第一个功能-新增员工\"><a href=\"#第一个功能-新增员工\" class=\"headerlink\" title=\"第一个功能-&gt;新增员工\"></a>第一个功能-&gt;新增员工</h2><p>​\t查看接口</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250303174432365.png\" alt=\"image-20250303174432365\"></p>\n<p>​\t在控制层EmployeeController类新增一个方法作为对外的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 新增员工</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;新增员工&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;新增员工: &#123;&#125;&quot;</span>, employeeDTO);</span><br><span class=\"line\">    employeeService.save(employeeDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的实现交给业务逻辑层的employeeService接口和它的实现类，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 新增员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">    <span class=\"comment\">//对象属性拷贝</span></span><br><span class=\"line\">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class=\"line\">    <span class=\"comment\">//设置账号状态，在常量类中0表示禁用disable，1相反，这里新增的员工默认可用</span></span><br><span class=\"line\">    employee.setStatus(StatusConstant.ENABLE);</span><br><span class=\"line\">    <span class=\"comment\">//设置密码，默认123456</span></span><br><span class=\"line\">    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));</span><br><span class=\"line\">    <span class=\"comment\">//设置时间</span></span><br><span class=\"line\">    employee.setCreateTime(LocalDateTime.now());</span><br><span class=\"line\">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class=\"line\">    <span class=\"comment\">//设置当前记录创建人id和修改人id</span></span><br><span class=\"line\">    <span class=\"comment\">//  后期需要改为当前登录用户的id 已利用上下文的thread完成</span></span><br><span class=\"line\">    employee.setCreateUser(BaseContext.getCurrentId());</span><br><span class=\"line\">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    employeeMapper.insert(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至于数据库的相关操作交给Mapper层处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入员工数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employee</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Insert(&quot;insert into employee(name,username,password,phone,sex,id_number,create_time,update_time,create_user,update_user,status)&quot; +</span></span><br><span class=\"line\"><span class=\"meta\">        &quot;values &quot; +</span></span><br><span class=\"line\"><span class=\"meta\">        &quot;(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>做了两个优化</p>\n<p>问题有：</p>\n<p>1.录入的用户名重复抛出的异常没有处理</p>\n<p>2.新增员工的创建人id和修改人id设置为了固定值</p>\n<p>第一个 查看控制台的报错，”Duplicate entry…”,在全局的异常处理器handler的GlobalExceptionHandler.java统一捕获处理异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 处理SQL异常</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ex</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">exceptionHandler</span><span class=\"params\">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> ex.getMessage();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (message.contains(<span class=\"string\">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class=\"line\">        String[] split = message.split(<span class=\"string\">&quot; &quot;</span>);<span class=\"comment\">//先以空格分割获取用户名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> split[<span class=\"number\">2</span>];<span class=\"comment\">//用户名在报错信息的第3个字符串</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> username + MessageConstant.AlREDY_EXISTS;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(msg);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//其他情况返回常量类定义的字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第二个</p>\n<p>生成jwt令牌的时候用到了用户的id，把它反解析出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Long</span> <span class=\"variable\">empId</span> <span class=\"operator\">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br></pre></td></tr></table></figure>\n\n<p>利用每一次请求都是同一线程的特点，使用ThreadLocal保存并在需要的时候调用即可。以下是这个类的信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sky.context;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseContext</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCurrentId</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        threadLocal.set(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">getCurrentId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeCurrentId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        threadLocal.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>于是可以在生成jwt令牌时保存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Long</span> <span class=\"variable\">empId</span> <span class=\"operator\">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;当前员工id：&quot;</span>, empId);</span><br><span class=\"line\"></span><br><span class=\"line\">BaseContext.setCurrentId(empId);</span><br></pre></td></tr></table></figure>\n\n<p>在实现类里面调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置当前记录创建人id和修改人id</span></span><br><span class=\"line\"><span class=\"comment\">//  后期需要改为当前登录用户的id 已利用上下文的thread完成</span></span><br><span class=\"line\">employee.setCreateUser(BaseContext.getCurrentId());</span><br><span class=\"line\">employee.setUpdateUser(BaseContext.getCurrentId());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二个功能员工分页查询\"><a href=\"#第二个功能员工分页查询\" class=\"headerlink\" title=\"第二个功能员工分页查询\"></a>第二个功能员工分页查询</h2><p>​\t控制层EmployeeController类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 员工分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;员工分页查询&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;PageResult&gt; <span class=\"title function_\">page</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;员工分页查询，参数为：&#123;&#125;&quot;</span>,employeePageQueryDTO);</span><br><span class=\"line\">    <span class=\"type\">PageResult</span> <span class=\"variable\">pageResult</span> <span class=\"operator\">=</span> employeeService.pageQuery(employeePageQueryDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success(pageResult);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t业务逻辑层的实现类EmployeeServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//select * from employee limit 0,10</span></span><br><span class=\"line\">    <span class=\"comment\">//利用mybatis的pagehelper</span></span><br><span class=\"line\">    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize());</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> page.getTotal();</span><br><span class=\"line\">    List&lt;Employee&gt; records = page.getResult();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageResult</span>(total,records);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t数据库交互层EmployeeMapper类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Page&lt;Employee&gt; <span class=\"title function_\">pageQuery</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>EmployeeMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pageQuery&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sky.entity.Employee&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from employee</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    order by create_time desc</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>做了一个优化</p>\n<p>问题是：前端显示的时间格式不美观</p>\n<p>通过在WebMvcConfiguration中扩展Spring MVC的消息转换器，统一对日期进行格式化处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩展spring MVC消息转换器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> converters</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;扩展消息转换器...&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建一个消息转换器对象</span></span><br><span class=\"line\">    <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">    <span class=\"comment\">//需要为消息转换器设置一个对象转换器，对象转换器可以将java对象序列化为json数据</span></span><br><span class=\"line\">    converter.setObjectMapper(<span class=\"keyword\">new</span> <span class=\"title class_\">JacksonObjectMapper</span>());</span><br><span class=\"line\">    <span class=\"comment\">//将自己的消息转换器加入容器中</span></span><br><span class=\"line\">    converters.add(<span class=\"number\">0</span>,converter);<span class=\"comment\">//索引为0，优先使用我们自己的消息转换器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体格式在JacksonObjectMapper类中自定义。</p>\n<p><strong>第二天:</strong></p>\n<p>关于苍穹外卖的学习，今天继续添加功能</p>\n<h2 id=\"第一个功能启用-禁用员工账号\"><a href=\"#第一个功能启用-禁用员工账号\" class=\"headerlink\" title=\"第一个功能启用&#x2F;禁用员工账号\"></a>第一个功能启用&#x2F;禁用员工账号</h2><p>首先查看接口文档</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304131843059.png\" alt=\"image-20250304131843059\"></p>\n<p>在控制层写，路径参数注解后面的status可省略(在两者名字相同时)，这个项目我们约定修改的返回值Result无需使用泛型，而查询的需要使用泛型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *启用禁用员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">startOrStop</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;status&quot;)</span> Integer status, Long id)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;启用禁用员工账号：&#123;&#125;,&#123;&#125;&quot;</span>,status,id);</span><br><span class=\"line\">    employeeService.startOrStop(status,id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>service层加接口，写实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启用禁用员工账号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startOrStop</span><span class=\"params\">(Integer status, Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//update employee set status = ? where id = ?</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//构造实体类对象 常规方法</span></span><br><span class=\"line\"><span class=\"comment\">//        Employee employee = new Employee();</span></span><br><span class=\"line\"><span class=\"comment\">//        employee.setId(id);</span></span><br><span class=\"line\"><span class=\"comment\">//        employee.setStatus(status);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//利用构造器注解@Bulid</span></span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> Employee.builder()</span><br><span class=\"line\">                .status(status)</span><br><span class=\"line\">                .id(id)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        </span><br><span class=\"line\">        employeeMapper.update(employee);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里想着可能传递的参数不只是状态和id，也有可能是其他的，于是在持久层mapper里面写的update方法的形参是一个对象，包含了所有可能传递的参数。所以持久层mapper写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据主键动态修改属性</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employee</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它的具体实现由于是动态sql所以不用注解实现而是写在配置文件 EmployeeMapper.xml 里：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Employee&quot;</span>&gt;</span></span><br><span class=\"line\">    update employee</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;username != null&quot;</span>&gt;</span>username = #&#123;username&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;password != null&quot;</span>&gt;</span>password = #&#123;password&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;phone != null&quot;</span>&gt;</span>phone = #&#123;phone&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;sex != null&quot;</span>&gt;</span>sex = #&#123;sex&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;idNumber != null&quot;</span>&gt;</span>id_Number = #&#123;idNumber&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;updateTime != null&quot;</span>&gt;</span>update_Time = #&#123;updateTime&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;updateUser != null&quot;</span>&gt;</span>update_User = #&#123;updateUser&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意：\"><a href=\"#特别注意：\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><p><strong>这里的字段名字，数据库采用的是蛇形命名(如id_number),这里也需要加下划线变成id_Number。</strong></p>\n<p>最后提交推送分支。</p>\n<h2 id=\"第二个功能编辑员工信息\"><a href=\"#第二个功能编辑员工信息\" class=\"headerlink\" title=\"第二个功能编辑员工信息\"></a>第二个功能编辑员工信息</h2><p>涉及两个接口，一个是根据员工id查询员工信息，</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304144540830.png\" alt=\"image-20250304144540830\">一个是修改员工信息</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304144607548.png\" alt=\"image-20250304144607548\"></p>\n<p>第一个接口，控制层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result&lt;Employee&gt; <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务逻辑层：这里把密码字段为了安全性重新设置为星号，不给前端传密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Employee <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> employeeMapper.getById(id);</span><br><span class=\"line\">    employee.setPassword(<span class=\"string\">&quot;****&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> employee;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>持久层mapper：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">Employee <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>测试<img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304150949048.png\" alt=\"image-20250304150949048\"></p>\n<p>正常返回，开发第二个接口：</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304151310618.png\" alt=\"image-20250304151310618\"></p>\n<p>根据接口定义写控制层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编辑员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PutMapping</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;编辑员工信息&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;编辑员工信息：&#123;&#125;&quot;</span>, employeeDTO);</span><br><span class=\"line\">    employeeService.update(employeeDTO);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务逻辑层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编辑员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">    <span class=\"comment\">//属性拷贝</span></span><br><span class=\"line\">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class=\"line\">    <span class=\"comment\">//设置DTO对象里面没有的属性，这里是更新时间和更新者</span></span><br><span class=\"line\">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class=\"line\">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class=\"line\">    <span class=\"comment\">//直接调用之前写好的持久层更新的方法</span></span><br><span class=\"line\">    employeeMapper.update(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>截止目前我们已经实现了员工管理模块的许多功能，后续再想想密码修改的实现。接下来我们尝试实现分类模块的功能，由于该模块的所有功能与员工管理模块大差不差，故全记录在此篇文章。</p>\n<p>以下是我们需要实现的所有功能</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304173525566.png\" alt=\"image-20250304173525566\"></p>\n<p>先从分类的分页查询开始，查看接口说明</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250304173636208.png\" alt=\"image-20250304173636208\"></p>\n<p>得知它的参数为一个数据传输对象DTO。</p>\n<p>由于是新的模块，我们新建控制层CategoryController类，业务层CategoryService接口和它的实现类CategoryServiceImpl类，持久层CategoryMapper类和它的配置文件CategoryMapper.xml。 </p>\n<p>CategoryController：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分类管理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/admin/category&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Api(tags = &quot;分类相关接口&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CategoryController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CategoryService categoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分类分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;分类分页查询&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result&lt;PageResult&gt; <span class=\"title function_\">page</span><span class=\"params\">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;分类分页查询，参数为：&#123;&#125;&quot;</span>,categoryPageQueryDTO);</span><br><span class=\"line\">        <span class=\"type\">PageResult</span> <span class=\"variable\">pageResult</span> <span class=\"operator\">=</span> categoryService.pageQuery(categoryPageQueryDTO);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(pageResult);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryService：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CategoryServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CategoryService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CategoryMapper categoryMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分类分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//select *from category limit 0,10</span></span><br><span class=\"line\">        <span class=\"comment\">//利用mybatis的pagehelper</span></span><br><span class=\"line\">        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());</span><br><span class=\"line\">        Page&lt;Category&gt; page = categoryMapper.pageQuery(categoryPageQueryDTO);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> page.getTotal();</span><br><span class=\"line\">        List&lt;Category&gt; list = page.getResult();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageResult</span>(total,list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryMapper：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CategoryMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> categoryPageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Page&lt;Category&gt; <span class=\"title function_\">pageQuery</span><span class=\"params\">(CategoryPageQueryDTO categoryPageQueryDTO)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryMapper.xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.sky.mapper.CategoryMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pageQuery&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sky.entity.Category&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from category</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">                and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;type != null&quot;</span>&gt;</span>and type = #&#123;type&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        order by create_time desc</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意：-1\"><a href=\"#特别注意：-1\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><p>SQL 中的 <code>WHERE</code> 子句不支持用逗号分隔多个条件。条件之间应该用逻辑运算符（如 <code>AND</code> 或 <code>OR</code>）连接。</p>\n<p><strong>第三天：</strong></p>\n<h2 id=\"公共字段填充\"><a href=\"#公共字段填充\" class=\"headerlink\" title=\"公共字段填充\"></a>公共字段填充</h2><p>注意到在修改表数据时总是会使用到createUser、updateUser和createTime、updateTime等字段，故考虑把它们抽出来单独处理。这样的思想可以归纳为aop即面向切面编程，它是一种编程范式，<strong>用于将横切关注点从业务逻辑中分离出来</strong>，从而提高代码的模块化、可维护性和可扩展性。</p>\n<p>实现流程：</p>\n<p>1.确定需要分离的点，这里的公共字段</p>\n<p><img src=\"/2025/03/03/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/image-20250309160847232.png\"></p>\n<p>2.自定义注解@AutoFill：用于标识需要进行统一处理的方法。</p>\n<p>3.新建切面包，自定义切面类AutoFillAspect：统一拦截加入了AutoFill的方法，通过反射来为统一赋值</p>\n<p>4.在Mapper层具体的方法加上AutoFill注解。</p>\n<p>代码实现：</p>\n<p><strong>1.自定义AutoFill注解【只用来标识，标识那些类需要自动填充】</strong></p>\n<p>1.创建annotaion包用来存放自定义注解，然后创建AutoFill注解</p>\n<p>2.添加注解@Target(ElementType.METHOD)用来说明注解是加到方法上的</p>\n<p>3.添加@Retention(RetentionPolicy.RUNTIME)注解，保留策略为运行时</p>\n<p>4.在注解里面指定当前数据库操作类型【可以使用枚举】【定义了之后参数列表的value就可以使用枚举类的值】</p>\n<p>5.OperationType value();&#x2F;&#x2F;自定义的枚举类型【里面是update和insert】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于标识方法需要进行功能字段自动填充处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoFill &#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据库操作类型 insert或者update</span></span><br><span class=\"line\">    OperationType <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.自定义切面类AutoFillAspect</strong></p>\n<p>1.找切入点，即加上注解的方法</p>\n<p>2.在执行这些方法执行前先执行我的这个操作（公共字段填充）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义切面，实现公共字段自动填充处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoFillAspact</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 切入点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">autoFillPointCut</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">autoFill</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;开始进行公共字段填充&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取当前被拦截的方法上的数据库操作类型(insert update等)</span></span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">methodSignature</span> <span class=\"operator\">=</span> (MethodSignature) joinPoint.getSignature();<span class=\"comment\">//方法签名对象</span></span><br><span class=\"line\">        <span class=\"type\">AutoFill</span> <span class=\"variable\">autoFill</span> <span class=\"operator\">=</span> methodSignature.getMethod().getAnnotation(AutoFill.class);<span class=\"comment\">//获取方法上的注解对象</span></span><br><span class=\"line\">        <span class=\"type\">OperationType</span> <span class=\"variable\">operationType</span> <span class=\"operator\">=</span> autoFill.value();<span class=\"comment\">//获得操作类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取当前被拦截方法的参数(比如这里的实体对象)</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args == <span class=\"literal\">null</span> || args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span>  args[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//准备赋值的数据</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">currentId</span> <span class=\"operator\">=</span> BaseContext.getCurrentId();</span><br><span class=\"line\">        <span class=\"comment\">//根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(operationType == OperationType.INSERT) &#123;</span><br><span class=\"line\">            Method setCreateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME,LocalDateTime.class);</span><br><span class=\"line\">            Method setCreateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER,Long.class);</span><br><span class=\"line\">            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);</span><br><span class=\"line\">            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//通过反射来为对象赋值</span></span><br><span class=\"line\">            setCreateTime.invoke(entity,now);</span><br><span class=\"line\">            setCreateUser.invoke(entity,currentId);</span><br><span class=\"line\">            setUpdateTime.invoke(entity,now);</span><br><span class=\"line\">            setUpdateUser.invoke(entity,currentId);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (operationType == OperationType.UPDATE) &#123;</span><br><span class=\"line\">            Method setUpdateTime= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME,LocalDateTime.class);</span><br><span class=\"line\">            Method setUpdateUser= entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER,Long.class);</span><br><span class=\"line\">            setUpdateTime.invoke(entity,now);</span><br><span class=\"line\">            setUpdateUser.invoke(entity,currentId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新增菜品\"><a href=\"#新增菜品\" class=\"headerlink\" title=\"新增菜品\"></a>新增菜品</h2><p>实现两件事，其一完成文件上传，其二完成菜品新增</p>\n<p><strong>文件上传：</strong></p>\n<p>新增通用接口控制层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通用接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/admin/common&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(&quot;通用接口&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">FILE_UPLOAD_PATH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">uploadFile</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;文件不能为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">dir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(FILE_UPLOAD_PATH);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">created</span> <span class=\"operator\">=</span> dir.mkdirs();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(created) &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;创建文件夹成功: &#123;&#125;&quot;</span>, FILE_UPLOAD_PATH);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;创建文件夹失败或已经存在: &#123;&#125;&quot;</span>, FILE_UPLOAD_PATH);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFilename</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originalFilename == <span class=\"literal\">null</span> || originalFilename.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;文件名无效&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确保文件路径安全，避免路径遍历攻击</span></span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">targetLocation</span> <span class=\"operator\">=</span> Paths.get(FILE_UPLOAD_PATH).resolve(originalFilename).normalize();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;文件上传成功: &#123;&#125;&quot;</span>, originalFilename);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;文件上传失败: &#123;&#125;&quot;</span>, originalFilename, e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;文件上传失败&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 你可以根据实际情况调整返回的文件访问链接</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileUrl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://localhost:8080/uploads/&quot;</span> + originalFilename;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(fileUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置类的WebMvcConfiguration类里新增静态资源映射：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">FILELOCATION</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;C:\\\\Users\\\\zhangbin\\\\Desktop\\\\sky-take-out\\\\sky-server\\\\src\\\\main\\\\resources\\\\uploads/&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置静态资源映射</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> registry</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\">    registry.addResourceHandler(<span class=\"string\">&quot;/doc.html&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class=\"line\">    registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将本地文件系统的 uploads 目录映射为 /uploads/** 的 URL</span></span><br><span class=\"line\">    registry.addResourceHandler(<span class=\"string\">&quot;/uploads/**&quot;</span>)</span><br><span class=\"line\">            .addResourceLocations(<span class=\"string\">&quot;file:&quot;</span> + FILELOCATION);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>新增菜品：</strong></p>\n<p>需要实现菜品和口味的新增：</p>\n<p>控制层DishController：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 菜品管理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/admin/dish&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(tags = &quot;菜品相关接口&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DishController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DishService dishService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增菜品和口味</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dishDTO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> DishDTO dishDTO)</span> &#123;</span><br><span class=\"line\">      log.info(<span class=\"string\">&quot;新增菜品&#123;&#125;&quot;</span>, dishDTO);</span><br><span class=\"line\">      dishService.saveWithFlavor(dishDTO);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务逻辑层DishServiceImpl：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DishServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DishService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DishMapper dishMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DishFlavorMapper dishFlavorMapper;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增菜品和对应的口味</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dishDTO</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span><span class=\"comment\">//保证事务原子性要么成功要么失败</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveWithFlavor</span><span class=\"params\">(DishDTO dishDTO)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Dish</span> <span class=\"variable\">dish</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dish</span>();</span><br><span class=\"line\">        BeanUtils.copyProperties(dishDTO, dish);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向菜品表插入1条数据</span></span><br><span class=\"line\">        dishMapper.insert(dish);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">dishId</span> <span class=\"operator\">=</span> dish.getId();<span class=\"comment\">//获取insert语句生成的主键值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向口味表插入n条数据</span></span><br><span class=\"line\">        List&lt;DishFlavor&gt; flavors =  dishDTO.getFlavors();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flavors != <span class=\"literal\">null</span> &amp;&amp; flavors.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class=\"line\">                dishFlavor.setDishId(dishId);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            dishFlavorMapper.insertBatch(flavors);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>菜品的新增直接在Mapper层的配置文件写插入语句即可。</p>\n<p>口味的新增Mapper层的配置文件写动态sql</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into dish_flavor (dish_id, name, value) VALUES</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;flavors&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;df&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>遇到的问题：</p>\n<p>1.老师提供的oss已无法使用，本地存储解决</p>\n<p>但是在使用value注解的时候没办法替换yml文件里的属性，直接写的变量解决，但是导致直接写的路径很长而且修改麻烦。</p>\n<p>2.复制DishMapper的时候复制了autofill注解到DishFlavorMapper导致报错，去掉即可。</p>\n<p>3.数据库的字段名和实体的字段名别搞混淆。</p>\n<h2 id=\"批量删除菜品\"><a href=\"#批量删除菜品\" class=\"headerlink\" title=\"批量删除菜品\"></a>批量删除菜品</h2><p>考虑菜品是否可以删除：</p>\n<p>1.是否存在起售中的菜品</p>\n<p>2.是否存在关联到套餐的菜品</p>\n<h2 id=\"修改菜品基本信息和口味数据\"><a href=\"#修改菜品基本信息和口味数据\" class=\"headerlink\" title=\"修改菜品基本信息和口味数据\"></a>修改菜品基本信息和口味数据</h2><p>1.查询菜品分类（已实现）</p>\n<p>2.图片上传和回显菜品图片（已实现）</p>\n<p>3.根据id查询菜品—简单</p>\n<p>4.修改菜品</p>\n<p>注意口味数据可以先删除再新增以达到修改的效果。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Redis/image-20250313121938596.png","post":"cm9k19ap40001poot25wj041e","slug":"image-20250313121938596.png","modified":1,"renderable":0},{"_id":"source/_posts/Redis/image-20250313125814412.png","post":"cm9k19ap40001poot25wj041e","slug":"image-20250313125814412.png","modified":1,"renderable":0},{"_id":"source/_posts/Redis/image-20250316132341779.png","post":"cm9k19ap40001poot25wj041e","slug":"image-20250316132341779.png","modified":1,"renderable":0},{"_id":"source/_posts/Redis/image-20250316133144948.png","post":"cm9k19ap40001poot25wj041e","slug":"image-20250316133144948.png","modified":1,"renderable":0},{"_id":"source/_posts/Redis/image-20250316134410583.png","post":"cm9k19ap40001poot25wj041e","slug":"image-20250316134410583.png","modified":1,"renderable":0},{"_id":"source/_posts/Redis/image-20250316135458506.png","post":"cm9k19ap40001poot25wj041e","slug":"image-20250316135458506.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250201135214019.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250201135214019.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207202641150.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250207202641150.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207203028138.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250207203028138.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207203153099.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250207203153099.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207211115238.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250207211115238.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207212537344.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250207212537344.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207222214122.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250207222214122.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207230001660.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250207230001660.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250216221349436.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250216221349436.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250216222117731.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250216222117731.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250220105056954.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250220105056954.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250220122408100.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250220122408100.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250220123104283.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250220123104283.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250222224319340.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250222224319340.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250222224835797.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250222224835797.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250222225338830.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250222225338830.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223163956807.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250223163956807.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223191142600.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250223191142600.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223200310462.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250223200310462.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223201933145.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250223201933145.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223201954533.png","post":"cm9k19ap60003poot2mt12m78","slug":"image-20250223201954533.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/logo.jpg","post":"cm9k19ap60003poot2mt12m78","slug":"logo.jpg","modified":1,"renderable":0},{"_id":"source/_posts/刷题日记2.26/image-20250226225152860.png","post":"cm9k19apc000epootf7b57ho2","slug":"image-20250226225152860.png","modified":1,"renderable":0},{"_id":"source/_posts/刷题日记2.26/image-20250226225220869.png","post":"cm9k19apc000epootf7b57ho2","slug":"image-20250226225220869.png","modified":1,"renderable":0},{"_id":"source/_posts/spring/0a4cf6d3f9cb9a73593e73fbf29b4758.png","post":"cm9k19apd000hpootf5bo2aim","slug":"0a4cf6d3f9cb9a73593e73fbf29b4758.png","modified":1,"renderable":0},{"_id":"source/_posts/spring/1010726-20190908042152777-1895820426.png","post":"cm9k19apd000hpootf5bo2aim","slug":"1010726-20190908042152777-1895820426.png","modified":1,"renderable":0},{"_id":"source/_posts/spring/5HN8GKQywWaYvrF.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"5HN8GKQywWaYvrF.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/5Id43xPneJiWfZs.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"5Id43xPneJiWfZs.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/6c0706d0b1875bec9cfac6620612da5d.png","post":"cm9k19apd000hpootf5bo2aim","slug":"6c0706d0b1875bec9cfac6620612da5d.png","modified":1,"renderable":0},{"_id":"source/_posts/spring/evKArqDYcIQPCXT.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"evKArqDYcIQPCXT.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/GWIyPDOaK4TAM1N.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"GWIyPDOaK4TAM1N.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/ih1Af7xBdX3ebaG.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"ih1Af7xBdX3ebaG.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/image-20250415113934007.png","post":"cm9k19apd000hpootf5bo2aim","slug":"image-20250415113934007.png","modified":1,"renderable":0},{"_id":"source/_posts/spring/image-20250415134033090.png","post":"cm9k19apd000hpootf5bo2aim","slug":"image-20250415134033090.png","modified":1,"renderable":0},{"_id":"source/_posts/spring/image-20250415134331010.png","post":"cm9k19apd000hpootf5bo2aim","slug":"image-20250415134331010.png","modified":1,"renderable":0},{"_id":"source/_posts/spring/KzSUJXa4jBfO9rd.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"KzSUJXa4jBfO9rd.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/l8HzN7Rwthqrim5.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"l8HzN7Rwthqrim5.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/QIBRwScq6fu4XDm.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"QIBRwScq6fu4XDm.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/rgl7fXJ2ZKAU8Rd.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"rgl7fXJ2ZKAU8Rd.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/SQTchJBq4G8NWyC.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"SQTchJBq4G8NWyC.webp","modified":1,"renderable":0},{"_id":"source/_posts/spring/SyDkvOldB7ETW4z.webp","post":"cm9k19apd000hpootf5bo2aim","slug":"SyDkvOldB7ETW4z.webp","modified":1,"renderable":0},{"_id":"source/_posts/刷题日记3.19/image-20250319185048652.png","post":"cm9k19ape000lpoot1y8rhbev","slug":"image-20250319185048652.png","modified":1,"renderable":0},{"_id":"source/_posts/刷题日记3.19/image-20250319222721615.png","post":"cm9k19ape000lpoot1y8rhbev","slug":"image-20250319222721615.png","modified":1,"renderable":0},{"_id":"source/_posts/图片显示测试/image-20250201135214019.png","post":"cm9k19aph0012poot24gi231b","slug":"image-20250201135214019.png","modified":1,"renderable":0},{"_id":"source/_posts/图片显示测试/image.png","post":"cm9k19aph0012poot24gi231b","slug":"image.png","modified":1,"renderable":0},{"_id":"source/_posts/图片显示测试/logo.jpg","post":"cm9k19aph0012poot24gi231b","slug":"logo.jpg","modified":1,"renderable":0},{"_id":"source/_posts/我的第一篇文章/logo.jpg","post":"cm9k19api0015poot12wr3165","slug":"logo.jpg","modified":1,"renderable":0},{"_id":"source/_posts/操作系统/image-20250218154211332.png","post":"cm9k19api0019poot3sgk3sor","slug":"image-20250218154211332.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/1740148009384.jpg","post":"cm9k19apj001bpootcgs09aen","slug":"1740148009384.jpg","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250221230151097.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250221230151097.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227150333372.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227150333372.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227151200265.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227151200265.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227151247399.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227151247399.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227151841607.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227151841607.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227152023060.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227152023060.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227152321173.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227152321173.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227152724965.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227152724965.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227152807156.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227152807156.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250227153008093.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250227153008093.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228145123531.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228145123531.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228145227529.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228145227529.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228145403598.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228145403598.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228145643174.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228145643174.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228145901690.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228145901690.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228150052444.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228150052444.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228150333188.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228150333188.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228150433021.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228150433021.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228150731110.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228150731110.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228151432029.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228151432029.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228151703680.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228151703680.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228192438996.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228192438996.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228192800546.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228192800546.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228193938121.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228193938121.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228194036448.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228194036448.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228194128221.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228194128221.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228194206882.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228194206882.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228194501097.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228194501097.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228194515565.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228194515565.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228194652018.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228194652018.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228212619061.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228212619061.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228212648230.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228212648230.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228212945534.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228212945534.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228213348367.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228213348367.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228213537699.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228213537699.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228213653344.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228213653344.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228213802223.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228213802223.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228213930767.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228213930767.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228214124879.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228214124879.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228214223449.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228214223449.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228214400701.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228214400701.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228214703417.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228214703417.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228214909259.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228214909259.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228215120973.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228215120973.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228215155976.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228215155976.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228215437342.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228215437342.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228232506318.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228232506318.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228232533260.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228232533260.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228232627479.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228232627479.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228232702871.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228232702871.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228232725709.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228232725709.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228232819417.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228232819417.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250228232857300.png","post":"cm9k19apj001bpootcgs09aen","slug":"image-20250228232857300.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192411375.png","post":"cm9k19apl001mpoot8mp901r7","slug":"image-20250219192411375.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192653645.png","post":"cm9k19apl001mpoot8mp901r7","slug":"image-20250219192653645.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192740802.png","post":"cm9k19apl001mpoot8mp901r7","slug":"image-20250219192740802.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192840808.png","post":"cm9k19apl001mpoot8mp901r7","slug":"image-20250219192840808.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192931677.png","post":"cm9k19apl001mpoot8mp901r7","slug":"image-20250219192931677.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219195726811.png","post":"cm9k19apl001mpoot8mp901r7","slug":"image-20250219195726811.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250303174432365.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250303174432365.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250304131843059.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250304131843059.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250304144540830.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250304144540830.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250304144607548.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250304144607548.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250304150949048.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250304150949048.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250304151310618.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250304151310618.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250304173525566.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250304173525566.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250304173636208.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250304173636208.png","modified":1,"renderable":0},{"_id":"source/_posts/苍穹外卖/image-20250309160847232.png","post":"cm9k19apm001npoot75jhabee","slug":"image-20250309160847232.png","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cm9k19apa0009poot6cot0v6s","category_id":"cm9k19ap70004poot22w2a7hf","_id":"cm9k19apd000ipootc9mn41mb"},{"post_id":"cm9k19ap40001poot25wj041e","category_id":"cm9k19ap70004poot22w2a7hf","_id":"cm9k19ape000mpootgzq53gue"},{"post_id":"cm9k19ap60003poot2mt12m78","category_id":"cm9k19ap70004poot22w2a7hf","_id":"cm9k19apf000ppoot5izthsba"},{"post_id":"cm9k19apd000hpootf5bo2aim","category_id":"cm9k19ap70004poot22w2a7hf","_id":"cm9k19apg000tpoothstxdn5u"},{"post_id":"cm9k19ape000lpoot1y8rhbev","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19apg000wpoot58go4eb1"},{"post_id":"cm9k19ap90006poot7g5e3i6e","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19aph0010poot9c5g7h6b"},{"post_id":"cm9k19ape000opoot955vdn9n","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19aph0013poot3bs61085"},{"post_id":"cm9k19apf000spootb2i25dec","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19api0016poot8r9pdm36"},{"post_id":"cm9k19apa000bpootgt7hbr8y","category_id":"cm9k19apf000qpoot88cc2w10","_id":"cm9k19api0018poot7zl8fhxu"},{"post_id":"cm9k19apg000vpoot7o2dej9i","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19apj001apoot6s3p9qxf"},{"post_id":"cm9k19aph000zpoot0uci8uso","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19apj001cpoot4znkcfnv"},{"post_id":"cm9k19apc000epootf7b57ho2","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19apj001epoot0b2w5gz3"},{"post_id":"cm9k19aph0012poot24gi231b","category_id":"cm9k19apf000qpoot88cc2w10","_id":"cm9k19apj001fpoot5ely7ia9"},{"post_id":"cm9k19api0015poot12wr3165","category_id":"cm9k19apf000qpoot88cc2w10","_id":"cm9k19apj001hpootbrbya5vz"},{"post_id":"cm9k19api0017pootfv3a9sh2","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19apk001ipoot6kof3pha"},{"post_id":"cm9k19api0019poot3sgk3sor","category_id":"cm9k19apj001dpootbw8pgv9q","_id":"cm9k19apk001jpoot6ia3f6h4"},{"post_id":"cm9k19apj001bpootcgs09aen","category_id":"cm9k19apj001dpootbw8pgv9q","_id":"cm9k19apk001kpoot9qzyh7i9"},{"post_id":"cm9k19apl001lpoot8w82abqg","category_id":"cm9k19apd000jpoot1d0qgwec","_id":"cm9k19apm001opootbl8bcvig"},{"post_id":"cm9k19apl001mpoot8mp901r7","category_id":"cm9k19apj001dpootbw8pgv9q","_id":"cm9k19apm001qpoot39og2egp"},{"post_id":"cm9k19apm001npoot75jhabee","category_id":"cm9k19ap70004poot22w2a7hf","_id":"cm9k19apm001rpoothe99610f"}],"PostTag":[{"post_id":"cm9k19ap60003poot2mt12m78","tag_id":"cm9k19ap90007pootaun5b6rt","_id":"cm9k19apc000fpoot82fd0eye"},{"post_id":"cm9k19apm001npoot75jhabee","tag_id":"cm9k19apm001ppoot014w8zv1","_id":"cm9k19apm001spoot3ldngtaa"}],"Tag":[{"name":"java基础","_id":"cm9k19ap90007pootaun5b6rt"},{"name":"java","_id":"cm9k19apm001ppoot014w8zv1"}]}}