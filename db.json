{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/img/bg/bg-1.jpg","path":"img/bg/bg-1.jpg","modified":1,"renderable":0},{"_id":"source/img/bg/bg-2.jpg","path":"img/bg/bg-2.jpg","modified":1,"renderable":0},{"_id":"source/img/bg/bg-剑客-水墨.png","path":"img/bg/bg-剑客-水墨.png","modified":1,"renderable":0},{"_id":"source/img/bg/bg-动漫-蜡笔小新.png","path":"img/bg/bg-动漫-蜡笔小新.png","modified":1,"renderable":0},{"_id":"source/img/bg/bg-笑嘻嘻-美女.png","path":"img/bg/bg-笑嘻嘻-美女.png","modified":1,"renderable":0},{"_id":"source/img/my/logo.jpg","path":"img/my/logo.jpg","modified":1,"renderable":0},{"_id":"source/img/my/小埋1.jpg","path":"img/my/小埋1.jpg","modified":1,"renderable":0},{"_id":"source/img/my/小埋2.jpg","path":"img/my/小埋2.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"118d86b7d194be3808336cbc80a66f4031a4022b","modified":1739717286820},{"_id":"source/comments/index.md","hash":"1306434d2f0fe20469f2027b69749fe2fb6c985a","modified":1739595856035},{"_id":"source/_posts/刷题日记2.26.md","hash":"5f24b74d563c9a0202ddd6164ef8c3229f93a1a0","modified":1740586007328},{"_id":"source/_posts/Java基础复盘.md","hash":"26d49e4b4b4b3da2000a7fd2ef5897bb2cb3d15f","modified":1740625708563},{"_id":"source/_posts/关于本站.md","hash":"c322f35a72d077a016d44888ee01f4b70020bc7a","modified":1740625687242},{"_id":"source/_posts/刷题注意事项.md","hash":"33afc4fb6dde370ee3aca23aad94b58962d8b990","modified":1740625844512},{"_id":"source/_posts/图片显示测试.md","hash":"738a14cf881fcab71a22c90943c31c550cb24ae8","modified":1739716919653},{"_id":"source/_posts/我的第一篇文章.md","hash":"791d5bfc76ad594a9012955c7f53715fc1d35029","modified":1739716907688},{"_id":"source/_posts/操作系统.md","hash":"c5b4cae8bcc364b355a42c9c44356aae41cf3cd5","modified":1740209294438},{"_id":"source/css/custom.css","hash":"2bf80cd782c34f7df7a847469ea0aea0c282b4db","modified":1740625244522},{"_id":"source/_posts/编译原理.md","hash":"e54f7861e9c51b9b3a0349e9b64e580466d63832","modified":1740151130518},{"_id":"source/_posts/计算机科学记录.md","hash":"8093314a3a4c892de427ffad261208a1321cbc6d","modified":1740151213877},{"_id":"source/css/footer.css","hash":"4a9d09b36d0f8a2fea1d558a46c84038edc989bd","modified":1739453371484},{"_id":"source/categories/index.md","hash":"23027a320ab3280c337d105e7d6a647724757968","modified":1739717047358},{"_id":"source/css/progress_bar.css","hash":"4f7b75f8dc9bd55b4c0bde6b806e85de2fa1fa16","modified":1740623994528},{"_id":"source/css/universe.css","hash":"e0fc94d45e3147970c9f30663f7bec21cdd9ec92","modified":1739597919605},{"_id":"source/link/index.md","hash":"c1cdb0319dc1b3d30c48711c4f1c4b2576aa83bf","modified":1739717098871},{"_id":"source/js/footer.js","hash":"a660b462f1261712e5974329cc7c622666e0b8ba","modified":1739452851156},{"_id":"source/js/universe.js","hash":"ea22ec4b15698ad46493cf57cb3809cfae4bbf3d","modified":1739597541203},{"_id":"source/movies/index.md","hash":"eba2323c84120b6f557f510a0a95ab27eab6ceb6","modified":1739439065195},{"_id":"source/works/index.md","hash":"c43f38f00b60351123ef1b2e744d57ed33e56e80","modified":1739431111900},{"_id":"source/music/index.md","hash":"d22fb592e447f974bbbfcddae37703a4280f1b60","modified":1739430853107},{"_id":"source/tags/index.md","hash":"346dff66ea100bfff9bcc54f2f1bfceaf425c10e","modified":1739717061799},{"_id":"source/_posts/Java基础复盘/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207211115238.png","hash":"c86f78a236a7980a4a8a51d1432fba6d2dafb8bd","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207212537344.png","hash":"5182e1f9bac79d177a285abef70fb75b1896aaaa","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207222214122.png","hash":"a48b0b1d3d759fc8c512a4325ce0ba38186c90e4","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250220105056954.png","hash":"dee06e3aaf2c51ccfe0aa27bddd02570bae9f521","modified":1740019856971},{"_id":"source/_posts/图片显示测试/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250223200310462.png","hash":"fbd6db786652de0182a96cc5b24e2275d3c12470","modified":1740312190477},{"_id":"source/_posts/Java基础复盘/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/_posts/我的第一篇文章/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/_posts/图片显示测试/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/_posts/编译原理/image-20250221230151097.png","hash":"cbf12c4c6c2e4ae951180d5db8d4a2049e254a0b","modified":1740150111118},{"_id":"source/img/my/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1739280804000},{"_id":"source/img/my/小埋2.jpg","hash":"a56b44d26bbde53d57757e2c441624516125f02f","modified":1739280804000},{"_id":"source/img/my/小埋1.jpg","hash":"255f5431c3d1ee89340776dab1dbb8922efbf10c","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207203028138.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207202641150.png","hash":"9e20ced6fb1a1a693fb232b04a31fb43d28f5ae9","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207203153099.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250207230001660.png","hash":"04cd0052bec9e3068acf7239e48c6e93ae105dd4","modified":1739280804000},{"_id":"source/_posts/Java基础复盘/image-20250216222117731.png","hash":"34fc2f47dd828ce6c762d0276c2017070f18e568","modified":1739715677778},{"_id":"source/_posts/刷题日记2.26/image-20250226225152860.png","hash":"0dde3c0bc50764b1aa61dfdffe513fb81bc6d226","modified":1740581512906},{"_id":"source/_posts/刷题日记2.26/image-20250226225220869.png","hash":"48b66483e539131bcbf38d8bb2fabc7a9a3a2e04","modified":1740581540902},{"_id":"source/_posts/操作系统/image-20250218154211332.png","hash":"c4c283ccade64a751d5114a2d58f4b4fb7a5dea5","modified":1739864531362},{"_id":"source/_posts/Java基础复盘/image-20250220122408100.png","hash":"28b4a9f3ca198aec1b0a7c25f9e199b3fafbb576","modified":1740025448166},{"_id":"source/_posts/计算机科学记录/image-20250219192411375.png","hash":"3b4d8ba29237f7786f58efd6d3fe7e8de21989c2","modified":1739964251453},{"_id":"source/_posts/Java基础复盘/image-20250216221349436.png","hash":"d9306810aa7c6e01d5b49ab53d590b3347787e20","modified":1739715229505},{"_id":"source/_posts/Java基础复盘/image-20250222224319340.png","hash":"17108c5fd7d2e90f41917f0fb4f78a7c682fe43a","modified":1740235399462},{"_id":"source/_posts/Java基础复盘/image-20250223163956807.png","hash":"41c8b39cc33d86f8317cfac10fc01f72f3b801d6","modified":1740299996934},{"_id":"source/_posts/Java基础复盘/image-20250223201933145.png","hash":"b9c28be8c214fbde56ee6e88080210de8c4b5d1e","modified":1740313173177},{"_id":"source/_posts/Java基础复盘/image-20250223191142600.png","hash":"b63e4d6f2ab18477eca7f0cc969cf8850a9bd0ed","modified":1740309102689},{"_id":"source/_posts/Java基础复盘/image-20250223201954533.png","hash":"9d99ff43a0df5ec0f212900f10c058f8d1186918","modified":1740313194591},{"_id":"source/_posts/图片显示测试/image.png","hash":"60d56aea7bbb09d8e7b8804ac81508387ca06d04","modified":1739280804000},{"_id":"source/_posts/编译原理/1740148009384.jpg","hash":"b825a513916ab1982d7fe6f2dc225ba7bd2da5fa","modified":1740148897154},{"_id":"source/_posts/计算机科学记录/image-20250219192653645.png","hash":"095f88ea7023c867a9cb7bccfe7424518c2a27a9","modified":1739964413734},{"_id":"source/_posts/计算机科学记录/image-20250219192931677.png","hash":"5703b38e3f85a4a7a167280476bcfa5dc07f139e","modified":1739964571751},{"_id":"source/_posts/Java基础复盘/image-20250222224835797.png","hash":"237dd8153bb9b7b9b1c4bc089e192e88ff11c7e5","modified":1740235715828},{"_id":"source/_posts/Java基础复盘/image-20250222225338830.png","hash":"aa72d91efe4a12ee4c111075e01de01e1791493a","modified":1740236018917},{"_id":"source/_posts/计算机科学记录/image-20250219192740802.png","hash":"942abf8139420f890e36fd6700ac7ed3006e48e9","modified":1739964460917},{"_id":"source/_posts/Java基础复盘/image-20250220123104283.png","hash":"9ada20bc80bec04b67b27038b6451b64b9d0ddf0","modified":1740025864400},{"_id":"source/img/bg/bg-剑客-水墨.png","hash":"e5e24ac005ef3e467b3aa7a72787942bb4a84a5e","modified":1739435574381},{"_id":"source/_posts/计算机科学记录/image-20250219192840808.png","hash":"270ee6ad417af19dd0acdcb74ffc32b0f0f1a3f3","modified":1739964520953},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"f099cbbd6bf34ee3e55b609a7b3960cd634263d0","modified":1739429246773},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"86230c5186a5a3f3584ee3df490f89d569123f49","modified":1739429246769},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1739429246564},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"324c8d65fff0107561cdb325743538ea0e7150f3","modified":1739429246771},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"bf33e84dd7b48524eb728f1f2e419cb10a2c32c2","modified":1739429247101},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"952ae1fb19d366ef93e291692d36d2381f6cc398","modified":1739429247118},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1739429247113},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1739429246812},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baddb5ff69a18e3fc0a144136b16a719eeb6e076","modified":1739429246934},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1739429246848},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1739429247108},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1739429246909},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1739429247110},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"72f47de2492349c64ef148a519bc4cb90c55ece8","modified":1739429246944},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1739429246968},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1739429247116},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1739429247115},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1739429247120},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1739429247124},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1739429247125},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"de6546392275195ecb52a1af62c54991ff9719ca","modified":1739429246797},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1739429247128},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1739429247122},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1739429247104},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1739429246880},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1739429247111},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1739429247106},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"c9ab9bbfc688b87cfc2610ec888e062e06a71415","modified":1739429246892},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"393d2720e0887a1a0e68206a6d37205549535dd4","modified":1739429246916},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1739429246651},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"7dbf86c92a81ed79dc9958005fe07094d5d34918","modified":1739429246956},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"5a641907c0390f1b068b7cb3e2e141f4db43892f","modified":1739429246936},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"c588ea813c09bd12321e3e70bdbe1a21eb40f398","modified":1739429246961},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1739429247062},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1739429246639},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1739429246730},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1739429246786},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"1d927577fb5eac0fff7b0ea386b20e70e411d4f1","modified":1739429247098},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1739429246627},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1739429246764},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1739429246701},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1739429246661},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1739429246766},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1739429246706},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1739429246718},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"7a1329d40caf93b80c5e7e90c01d3db6feb13728","modified":1739429246733},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1739429246746},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1739429246757},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1739429246767},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"4393a0e5ee97653496c0a1c273359005583a7eb7","modified":1739429246742},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"90f65e32a76f43fdd1ffae55775e300f6a3b1c02","modified":1739429246748},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1739429246698},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1739429246703},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"be7c992cb1da26466d5ba676064c81a43338ca6a","modified":1739429246711},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1739429246709},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"32c6b81c5f668fc72a94de27f71f65edefd773be","modified":1739429246717},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"1ce5fcce4d045a20f26821f0c773ce458fdf9769","modified":1739429246722},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1739429246723},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"05da5331b442e9b4645b7d9584918b6e8128f086","modified":1739429246683},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"448bd8982547616bf5d5e1ddc71816913bbb7d05","modified":1739429246735},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1739429246737},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1739429246751},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1739429246755},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1739429246688},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1739429246759},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1739429246713},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1739429246720},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c207f1c02e2976fc0d125946fc1d98cf3d06b6f8","modified":1739429246739},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"b3807dd492bafe9a148c76adf408da1c6fb47b6b","modified":1739429246761},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1739429246753},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1739429246750},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"dcfc63e62d3d58e581ad3ad77daa3fb03472d1ab","modified":1739429246807},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9f04f61fdd0a91874ad84b3963ae4e88bfb2b546","modified":1739429246859},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"c97ec4a5225f2236377b2ca3b296031f64c72e44","modified":1739429246929},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"111b1300efddf0743d8744822b3858a8dc311ed2","modified":1739429246857},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1739429246890},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"ad56f4bc914b6d6b5ca481dd95988043abb29914","modified":1739429246946},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1739429246949},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1739429246966},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1739429246962},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"cbe55f1c3c33828f0b3a8812829c19ee50399ce6","modified":1739429246894},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1739429246923},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"ebdbd3e321ae04653add9308d3149ae28338e4e6","modified":1739764778571},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1739429246942},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1739429246964},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1739429246824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"013d856118a40dacf657776896f731445df9f1c5","modified":1740623951222},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1739429246933},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"c67609f1c04c8b7b966f838f265feaf7ba9a2883","modified":1739429246911},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"f86b0c45874ae1335ab575c29d4f9c8ea09ab92a","modified":1740623958988},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1739429246790},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1739429246846},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"15f321aee7876f2366677914a7cd2ab8b071b162","modified":1739429247037},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"98f004c78c99d92d526b1f61c29c6e84ec3d7a34","modified":1739429246879},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"4912beecdef7af33f0704ef4d6605e1ac69fbb11","modified":1739429246862},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"7e7cd9dfd832c8f3e829ad445eccf5cb5dc8ff18","modified":1739429246959},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1739429246969},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"506bbff9c954d5f92a6d97145be2d732571fae39","modified":1739429247055},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1739429246810},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"1661f8a53334789099efffa92246158cb3d933b3","modified":1739429246931},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1739429246873},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1739429246941},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1739429246955},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1739429246939},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1739429246947},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"0d257d38cb150b9b2696aa2d058e9d277cfdf3d7","modified":1739429246978},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1739429246968},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1739429246826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1739429246825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"5012e9cca9c1ce8c379d407f4ff426e297fd1ffe","modified":1739429246830},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1739429246828},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1739429246831},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1739429246833},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1739429246834},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1739429246835},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"ff38e96f336a6c85ecb0ef015973980a11fc83f5","modified":1739429246838},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1739429246839},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1739429246841},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"e4eb905a53da498d5b036d4ab78a486a3cc77aa3","modified":1739429246845},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"79e95511d8d51e8944092b9596994d9779c1f4e4","modified":1739429247050},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1739429247093},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1739429247002},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1739429247012},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"3727d13b339134e037f30f5d7e9af9ec243f0ff1","modified":1739429246908},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1739429246843},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1739429247033},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"559e7cacb6e6911a064637fee0288fdcf0082a4b","modified":1739429247073},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1739429247014},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"0ba6e4f5252d1a95e9dfa20b4a17207b6713947d","modified":1739429247076},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1739429247079},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"11a0fde4e784b0af5bb813c9e9ca9e480e5db99a","modified":1739429247021},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1739429247042},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1739429247080},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"e2761a2515b34d2d41dea00551abc44d4ce72aeb","modified":1739429247077},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1739429246993},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1739429247087},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"9a3281ad7204ce595ff3b606c01da1516d59581a","modified":1740624109762},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"a96513acd7f51ffa01531ef3a24fdf5391ae93ae","modified":1739429247094},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1739429247082},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1739429246998},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1739429247009},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1739429246997},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1739429247017},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"b02e88bb5dafcef11be4669da6cd9cddbf9a852a","modified":1739429247030},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1739429247052},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1739429247085},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1739429247091},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1739429247060},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"2c71b5bfb873d57eb6532144f66e86183dd0dcf6","modified":1739429247008},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1739429247071},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"5ded9ddc66777e93cc4f0e1e4349540c0249346d","modified":1739429247040},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1739429247043},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1739429247065},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"f7415acfee7adb5ba01fd278b1e16b636a6b20a1","modified":1739429247064},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1739429247046},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1739429246674},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1739429247072},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"e76655e699154c3d39043c1a5bb8400dc1658399","modified":1739429247089},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"cf24d72ea16ef253a438efe95b9a0a8fdfbb6d01","modified":1739429247084},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"62d03f6c429c2de256a204399610a041cab23b04","modified":1739429247096},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1739429246726},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1739429246794},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"97e81321fe7991831bb5cd189402af477a0e5a73","modified":1739429246896},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1739429246590},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1739429246814},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1739429246866},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1739429246898},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1739429246877},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1739429246974},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1739429246951},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1739429246981},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1739429246986},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"ce9f21e5d599733089a91d655ea980970b87456d","modified":1739429246819},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"817902fe7f3c42d6fca1253afd83583ec4b9f90c","modified":1739429246875},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2cf6ce7a703197f0d8991f3416cbc47b7250734a","modified":1739429246870},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9b0df2082ac11ad85471ff70e79c03b58c916677","modified":1739429246885},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"67b67c46734eb82141ee1c827b8a71fea0945b2c","modified":1739429246887},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"5320f74b711aa2732ee0a506da08abef41c0c5ac","modified":1739429246868},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1739429246901},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1739429246913},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"0dc016c759b3b90449b1076307c390fcba6052f6","modified":1739429246918},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"566848e4f7b857af7cd01fc72952b49101955d0a","modified":1739429246952},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"3fdb4d12fa7440466720b24d19b12b06f53d35e1","modified":1739429246976},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b17416a1a76c58651757d9b80e4f6715de636342","modified":1739429246979},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"b99a94de9a6bda59d6977b3b693d0e369123d727","modified":1739429246988},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"dc02a84f6e0ab3d86f410c6ba7cb6f7b277eb1a4","modified":1739429246861},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"5c97558d4d9109b5f9aff5bef5665cfbe3938c50","modified":1739429246983},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5ba53d5c671c723754c2d0133016005b2af789a9","modified":1739429246854},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1739429246900},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd0af44547211520c10953f3023e22a26025aaf9","modified":1739429246971},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"516dae8e5dad4ace61333cb4df8ae70a8a9acbec","modified":1739429246851},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b771c0de03a70d4fc2d98bb3e2ebc069033ff5eb","modified":1739429246902},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9e1fd1f5703e133682dea92a0c91cf7058207868","modified":1739429246821},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1739429246915},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"5fc8f74c6a04f0c219a52c9768c5f19119b80ef7","modified":1739429246922},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1739429246925},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"366273efa0d6fc7386e4acafa32ea92d7efe4464","modified":1739429246855},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"2af8902b0e8c336633ce3ee444a44b23028bacee","modified":1739429246903},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"e7e05cc32322f381077624599adc2e64486310a8","modified":1739429246864},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"f40e18bdf470f76ff7063cf42016c58d75d06c24","modified":1739429246889},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"39b620c7b2cf5f4527df547b1777fbcb7508a525","modified":1739429246954},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"e90902290515310480e376d6ea74c0be82fc03d8","modified":1739429246804},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"154ec9bcce19bc3a90771d8d55aff5ae14b5bee2","modified":1739429246972},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1739429246871},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"88aef4170336282bc988ab64c9b5ec8f5272a62c","modified":1739429246990},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"fc1f9d0655a94bfc76e5542207d1991e5d24690a","modified":1739429246984},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1739429246904},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"f11c6db285f57a475db638e74920efb2d0e5a4d0","modified":1739429246920},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1739429247024},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"cc272f7d612a52f4f1d2a95456cc89bc709fe0e5","modified":1739429247057},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1739429246906},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1739429247029},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1739429246800},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1739429246957},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1997713a8722391c8b5c8c1598ec19adee993fa5","modified":1739429247058},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ed77729c26cf815c75efd3a6889b6ac805471765","modified":1739429247068},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1739429246783},{"_id":"source/_posts/计算机科学记录/image-20250219195726811.png","hash":"1ece94200f6fa63bc441380b0409f2c3f71ef44e","modified":1739966247191},{"_id":"source/_posts/计算机科学记录/image-20250219200002098.png","hash":"1734fafc8091296ac3c9bf51ff31e117ccafb346","modified":1739966402502},{"_id":"source/_posts/计算机科学记录/image-20250219203400181.png","hash":"57993b98c09c01d3e7ee2391fe3dfd89a1a8f347","modified":1739968440641},{"_id":"source/img/bg/bg-动漫-蜡笔小新.png","hash":"30cde555071a1f6c7d2831f25d3d3daa70ed3a11","modified":1739436724672},{"_id":"source/_posts/计算机科学记录/image-20250219203513305.png","hash":"f5d648c7bdccbf8ce425503743750b3a37b08e4e","modified":1739968513755},{"_id":"source/_posts/计算机科学记录/image-20250219203435390.png","hash":"a13dee9a0e7311d9c38e3663dba9231b6b1dee42","modified":1739968475856},{"_id":"source/img/bg/bg-笑嘻嘻-美女.png","hash":"6ff61789b9117a6547c299652cbca47b5492ac58","modified":1739435505127},{"_id":"source/_posts/编译原理/image-20250221224033621.png","hash":"4fcf0ecaca4dba99aed01b19a9edbce9a23ae673","modified":1740148834046},{"_id":"source/img/bg/bg-2.jpg","hash":"d2884f5e32bacab9e63200400e0a13c9513eba49","modified":1739435393250},{"_id":"source/img/bg/bg-1.jpg","hash":"0af7a35bae632f1433803f1aa96a8df434101bc1","modified":1739433874979},{"_id":"public/css/footer.css","hash":"436c1a1b2826ffe1939e978d4ddc3a3a878387bf","modified":1740626839438},{"_id":"public/css/custom.css","hash":"28670dc788a4e325c41aa43d55be82c40518ed5f","modified":1740626839438},{"_id":"public/js/footer.js","hash":"69820f3be23919390f0684c7cabd4823659daacd","modified":1740626839438},{"_id":"public/js/universe.js","hash":"fb0de0b3d7842d41b46dd113723dc77f82a4d530","modified":1740626839438},{"_id":"public/css/progress_bar.css","hash":"bce3941544968ff91494b2d87f47f05fe0c5b6a3","modified":1740626839438},{"_id":"public/css/universe.css","hash":"5da771baf876582c40d3334c3d3e50bcc95f725a","modified":1740626839438},{"_id":"public/search.xml","hash":"39bc967da833d2abd970d2900baf1b065fd30e2d","modified":1740626839438},{"_id":"public/categories/index.html","hash":"a193758c6c998250de47988bdb023de6546196f4","modified":1740626839438},{"_id":"public/comments/index.html","hash":"f6e3206e50ab3f85d95436d5234b5a1f953a6e0a","modified":1740626839438},{"_id":"public/movies/index.html","hash":"be37524a6df69b7aafdb4543e82a804b2102e30e","modified":1740626839438},{"_id":"public/link/index.html","hash":"6132c4d62be92bf796aea793f704991ead023e2b","modified":1740626839438},{"_id":"public/404.html","hash":"009e1e04e01ff3444dfdaf4bd297fbec39401a92","modified":1740626839438},{"_id":"public/tags/index.html","hash":"2cbf676d87a8f609baee118d0b2ea6cd0ea16061","modified":1740626839438},{"_id":"public/music/index.html","hash":"36fcb4a99bfb106ea37512ee2786f7828670fd75","modified":1740626839438},{"_id":"public/works/index.html","hash":"beb55eade0b76b2804a2e2e54157c1e29cd38cfc","modified":1740626839438},{"_id":"public/2025/01/29/关于本站/index.html","hash":"62fffd8f25006c7db3ca565d42c9a9f3781f900c","modified":1740626839438},{"_id":"public/2025/01/25/我的第一篇文章/index.html","hash":"5a500bbcb959f4ab4c6e7c1709c8d9d977a617c1","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/index.html","hash":"57352051bd1741caa0aa05dd1f8575f9fff6799a","modified":1740626839438},{"_id":"public/2025/02/04/图片显示测试/index.html","hash":"aa5e5d065743b4ed366e4386e88e7e8878bfc664","modified":1740626839438},{"_id":"public/2025/02/18/操作系统/index.html","hash":"3d9b61ba118e03d067318708d0adafa454b581cf","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/index.html","hash":"8d4b6d5570a5d1d27b1696ee2e53c2731a39de05","modified":1740626839438},{"_id":"public/2025/02/21/编译原理/index.html","hash":"9a080ad1681b36f97674275e188008452a28a351","modified":1740626839438},{"_id":"public/2025/02/24/刷题注意事项/index.html","hash":"1101bfb8a80e3d3980d6c6e07fa49d7cefa54ea1","modified":1740626839438},{"_id":"public/archives/index.html","hash":"589c1f730ae4e9ed800bbe1673e3ff8a370747f4","modified":1740626839438},{"_id":"public/2025/02/26/刷题日记2.26/index.html","hash":"49af46e4f05cac5526fe205b1e6e095376e8ec05","modified":1740626839438},{"_id":"public/archives/2025/01/index.html","hash":"43562299147d059242356cb1c447b5ebc23df83e","modified":1740626839438},{"_id":"public/archives/2025/index.html","hash":"2b35fcbc813ecff956017d30367817764cb02e3d","modified":1740626839438},{"_id":"public/archives/2025/02/index.html","hash":"47f454d2271683f19440c330ef9bff03baaecc56","modified":1740626839438},{"_id":"public/categories/算法/index.html","hash":"4bedb0693876bf487821022d8fec60e7ed3cdbb3","modified":1740626839438},{"_id":"public/categories/java/index.html","hash":"5091504423c4d605251c9a290452440fa1fe07db","modified":1740626839438},{"_id":"public/categories/博客相关/index.html","hash":"d2d003246dcccdf1345a5e33860bb7d6813d9537","modified":1740626839438},{"_id":"public/categories/计算机基础/index.html","hash":"8368849929606aa8c3e443911f9ce35073e01648","modified":1740626839438},{"_id":"public/tags/java基础/index.html","hash":"6c5fb6e13036ee1dae96e6f2865d0806ab4ee400","modified":1740626839438},{"_id":"public/index.html","hash":"f84b870423cac4e737a1faab645e4ee9f8f2dab9","modified":1740626839438},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1740626839438},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1740626839438},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1740626839438},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1740626839438},{"_id":"public/img/my/小埋1.jpg","hash":"255f5431c3d1ee89340776dab1dbb8922efbf10c","modified":1740626839438},{"_id":"public/img/my/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1740626839438},{"_id":"public/img/my/小埋2.jpg","hash":"a56b44d26bbde53d57757e2c441624516125f02f","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250207211115238.png","hash":"c86f78a236a7980a4a8a51d1432fba6d2dafb8bd","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250207212537344.png","hash":"5182e1f9bac79d177a285abef70fb75b1896aaaa","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250207222214122.png","hash":"a48b0b1d3d759fc8c512a4325ce0ba38186c90e4","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250220105056954.png","hash":"dee06e3aaf2c51ccfe0aa27bddd02570bae9f521","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250223200310462.png","hash":"fbd6db786652de0182a96cc5b24e2275d3c12470","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1740626839438},{"_id":"public/2025/02/04/图片显示测试/image-20250201135214019.png","hash":"9d684e1691383c7b6477e2abb5b852c94aa4083a","modified":1740626839438},{"_id":"public/2025/01/25/我的第一篇文章/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1740626839438},{"_id":"public/2025/02/04/图片显示测试/logo.jpg","hash":"a69dc9790f0aba628a9f07f8b23d738b7c339d64","modified":1740626839438},{"_id":"public/css/index.css","hash":"d69d31f778b446bdd4b724bf548306a5f119c051","modified":1740626839438},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1740626839438},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1740626839438},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1740626839438},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1740626839438},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1740626839438},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1740626839438},{"_id":"public/2025/02/21/编译原理/image-20250221230151097.png","hash":"cbf12c4c6c2e4ae951180d5db8d4a2049e254a0b","modified":1740626839438},{"_id":"public/2025/02/26/刷题日记2.26/image-20250226225152860.png","hash":"0dde3c0bc50764b1aa61dfdffe513fb81bc6d226","modified":1740626839438},{"_id":"public/2025/02/26/刷题日记2.26/image-20250226225220869.png","hash":"48b66483e539131bcbf38d8bb2fabc7a9a3a2e04","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250207203028138.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250207202641150.png","hash":"9e20ced6fb1a1a693fb232b04a31fb43d28f5ae9","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250207203153099.png","hash":"32362112712ad97d6ebcd7be9285b348c59cb5ae","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250207230001660.png","hash":"04cd0052bec9e3068acf7239e48c6e93ae105dd4","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250216222117731.png","hash":"34fc2f47dd828ce6c762d0276c2017070f18e568","modified":1740626839438},{"_id":"public/2025/02/18/操作系统/image-20250218154211332.png","hash":"c4c283ccade64a751d5114a2d58f4b4fb7a5dea5","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250220122408100.png","hash":"28b4a9f3ca198aec1b0a7c25f9e199b3fafbb576","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192411375.png","hash":"3b4d8ba29237f7786f58efd6d3fe7e8de21989c2","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250216221349436.png","hash":"d9306810aa7c6e01d5b49ab53d590b3347787e20","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250222224319340.png","hash":"17108c5fd7d2e90f41917f0fb4f78a7c682fe43a","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250223191142600.png","hash":"b63e4d6f2ab18477eca7f0cc969cf8850a9bd0ed","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250223163956807.png","hash":"41c8b39cc33d86f8317cfac10fc01f72f3b801d6","modified":1740626839438},{"_id":"public/2025/02/04/图片显示测试/image.png","hash":"60d56aea7bbb09d8e7b8804ac81508387ca06d04","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250223201933145.png","hash":"b9c28be8c214fbde56ee6e88080210de8c4b5d1e","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250223201954533.png","hash":"9d99ff43a0df5ec0f212900f10c058f8d1186918","modified":1740626839438},{"_id":"public/2025/02/21/编译原理/1740148009384.jpg","hash":"b825a513916ab1982d7fe6f2dc225ba7bd2da5fa","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192653645.png","hash":"095f88ea7023c867a9cb7bccfe7424518c2a27a9","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192931677.png","hash":"5703b38e3f85a4a7a167280476bcfa5dc07f139e","modified":1740626839438},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250222225338830.png","hash":"aa72d91efe4a12ee4c111075e01de01e1791493a","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250222224835797.png","hash":"237dd8153bb9b7b9b1c4bc089e192e88ff11c7e5","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192740802.png","hash":"942abf8139420f890e36fd6700ac7ed3006e48e9","modified":1740626839438},{"_id":"public/2025/02/04/Java基础复盘/image-20250220123104283.png","hash":"9ada20bc80bec04b67b27038b6451b64b9d0ddf0","modified":1740626839438},{"_id":"public/img/bg/bg-剑客-水墨.png","hash":"e5e24ac005ef3e467b3aa7a72787942bb4a84a5e","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219192840808.png","hash":"270ee6ad417af19dd0acdcb74ffc32b0f0f1a3f3","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219195726811.png","hash":"1ece94200f6fa63bc441380b0409f2c3f71ef44e","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219200002098.png","hash":"1734fafc8091296ac3c9bf51ff31e117ccafb346","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219203400181.png","hash":"57993b98c09c01d3e7ee2391fe3dfd89a1a8f347","modified":1740626839438},{"_id":"public/img/bg/bg-动漫-蜡笔小新.png","hash":"30cde555071a1f6c7d2831f25d3d3daa70ed3a11","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219203435390.png","hash":"a13dee9a0e7311d9c38e3663dba9231b6b1dee42","modified":1740626839438},{"_id":"public/2025/02/20/计算机科学记录/image-20250219203513305.png","hash":"f5d648c7bdccbf8ce425503743750b3a37b08e4e","modified":1740626839438},{"_id":"public/img/bg/bg-笑嘻嘻-美女.png","hash":"6ff61789b9117a6547c299652cbca47b5492ac58","modified":1740626839438},{"_id":"public/2025/02/21/编译原理/image-20250221224033621.png","hash":"4fcf0ecaca4dba99aed01b19a9edbce9a23ae673","modified":1740626839438},{"_id":"public/img/bg/bg-2.jpg","hash":"d2884f5e32bacab9e63200400e0a13c9513eba49","modified":1740626839438},{"_id":"public/img/bg/bg-1.jpg","hash":"0af7a35bae632f1433803f1aa96a8df434101bc1","modified":1740626839438}],"Category":[{"name":"算法","_id":"cm7msa3dz000em0ot5ip59zpd"},{"name":"java","_id":"cm7msa3e2000km0ot3j4jceuf"},{"name":"博客相关","_id":"cm7msa3e3000pm0ot3f5c0unq"},{"name":"计算机基础","_id":"cm7msa3e5000xm0ot7910dm1u"}],"Data":[{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"本blog搭建引路人！！","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]}],"Page":[{"title":"categories","date":"2025-02-13T07:01:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-02-13 15:01:17\ntype: \"categories\"\n---\n","updated":"2025-02-16T14:44:07.358Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm7msa3dp0000m0ot3b3u39bt","content":"","excerpt":"","more":""},{"title":"comments","date":"2025-02-13T07:01:17.000Z","_content":"","source":"comments/index.md","raw":"---\ntitle: comments\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-15T05:04:16.035Z","path":"comments/index.html","comments":1,"layout":"page","_id":"cm7msa3dq0001m0oth0fy1ovx","content":"","excerpt":"","more":""},{"_content":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(2) .menus_item_child {\n  left: -125px;\n}\n\n\n/* 霓虹灯 */\n/* 夜间模式菜单栏发光字 */\n[data-theme=\"dark\"] #nav .site-page,\n[data-theme=\"dark\"] #nav .menus_items .menus_item .menus_item_child li a {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 手机端适配 */\n[data-theme=\"dark\"] #sidebar #sidebar-menus .menus_items .site-page {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 闪烁变动颜色连续渐变 */\n#site-name,\n#site-title,\n#site-subtitle,\n#post-info,\n.author-info__name,\n.author-info__description {\n  transition: text-shadow 1s linear !important;\n}\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n/* end */\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: orange;\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: orange;\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 小冰分类分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n  background: #1e1e1e;\n  color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n  background: #3ecdf1;\n  color: #f2f2f2;\n}","source":"css/custom.css","raw":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(2) .menus_item_child {\n  left: -125px;\n}\n\n\n/* 霓虹灯 */\n/* 夜间模式菜单栏发光字 */\n[data-theme=\"dark\"] #nav .site-page,\n[data-theme=\"dark\"] #nav .menus_items .menus_item .menus_item_child li a {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 手机端适配 */\n[data-theme=\"dark\"] #sidebar #sidebar-menus .menus_items .site-page {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 闪烁变动颜色连续渐变 */\n#site-name,\n#site-title,\n#site-subtitle,\n#post-info,\n.author-info__name,\n.author-info__description {\n  transition: text-shadow 1s linear !important;\n}\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n/* end */\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: orange;\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: orange;\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 小冰分类分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n  background: #1e1e1e;\n  color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n  background: #3ecdf1;\n  color: #f2f2f2;\n}","date":"2025-02-27T03:00:44.522Z","updated":"2025-02-27T03:00:44.522Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cm7msa3dr0002m0ot3uol1y78","content":"/* 页脚与头图透明 */\n#footer {\n    background: transparent !important;\n  }\n  #page-header {\n    background: transparent !important;\n  }\n  \n  /* 白天模式遮罩透明 */\n  #footer::before {\n    background: transparent !important;\n  }\n  #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 夜间模式遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(2) .menus_item_child {\n  left: -125px;\n}\n\n\n/* 霓虹灯 */\n/* 夜间模式菜单栏发光字 */\n[data-theme=\"dark\"] #nav .site-page,\n[data-theme=\"dark\"] #nav .menus_items .menus_item .menus_item_child li a {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 手机端适配 */\n[data-theme=\"dark\"] #sidebar #sidebar-menus .menus_items .site-page {\n  text-shadow: 0 0 2px rgb(36, 116, 186) !important;\n}\n\n/* 闪烁变动颜色连续渐变 */\n#site-name,\n#site-title,\n#site-subtitle,\n#post-info,\n.author-info__name,\n.author-info__description {\n  transition: text-shadow 1s linear !important;\n}\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n/* end */\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: orange;\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: orange;\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 小冰分类分类磁铁黑夜模式适配 */\n/* 一般状态 */\n[data-theme=\"dark\"] .magnet_link_context {\n  background: #1e1e1e;\n  color: antiquewhite;\n}\n/* 鼠标悬浮状态 */\n[data-theme=\"dark\"] .magnet_link_context:hover {\n  background: #3ecdf1;\n  color: #f2f2f2;\n}"},{"_content":"#workboard{font-size:13px;font-weight:700}\n\n/* 悬停时显示徽标提示语的样式 */\na.github-badge:hover:before {\n    position: fixed; /* 固定定位 */\n    width: fit-content; /* 宽度根据内容自适应 */\n    margin: auto; /* 自动居中 */\n    left: 0; /* 左对齐 */\n    right: 0; /* 右对齐 */\n    top: 10%; /* 距离顶部10% */\n    border-radius: 10px; /* 圆角边框 */\n    text-align: center; /* 文字居中 */\n    z-index: 100; /* 层级高于其他元素 */\n    content: attr(data-title); /* 显示data-title属性的内容 */\n    font-size: 20px; /* 字体大小 */\n    color: #fff; /* 文字颜色为白色 */\n    padding: 10px; /* 内边距 */\n    background-color: var(--text-bg-hover); /* 背景颜色为变量 */\n  }\n  \n  /* 暗色主题下悬停提示语的样式 */\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8); /* 背景颜色为深灰色 */\n  }\n  ","source":"css/footer.css","raw":"#workboard{font-size:13px;font-weight:700}\n\n/* 悬停时显示徽标提示语的样式 */\na.github-badge:hover:before {\n    position: fixed; /* 固定定位 */\n    width: fit-content; /* 宽度根据内容自适应 */\n    margin: auto; /* 自动居中 */\n    left: 0; /* 左对齐 */\n    right: 0; /* 右对齐 */\n    top: 10%; /* 距离顶部10% */\n    border-radius: 10px; /* 圆角边框 */\n    text-align: center; /* 文字居中 */\n    z-index: 100; /* 层级高于其他元素 */\n    content: attr(data-title); /* 显示data-title属性的内容 */\n    font-size: 20px; /* 字体大小 */\n    color: #fff; /* 文字颜色为白色 */\n    padding: 10px; /* 内边距 */\n    background-color: var(--text-bg-hover); /* 背景颜色为变量 */\n  }\n  \n  /* 暗色主题下悬停提示语的样式 */\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8); /* 背景颜色为深灰色 */\n  }\n  ","date":"2025-02-13T13:29:31.484Z","updated":"2025-02-13T13:29:31.484Z","path":"css/footer.css","layout":"false","title":"","comments":1,"_id":"cm7msa3dr0003m0otbco2e530","content":"#workboard{font-size:13px;font-weight:700}\n\n/* 悬停时显示徽标提示语的样式 */\na.github-badge:hover:before {\n    position: fixed; /* 固定定位 */\n    width: fit-content; /* 宽度根据内容自适应 */\n    margin: auto; /* 自动居中 */\n    left: 0; /* 左对齐 */\n    right: 0; /* 右对齐 */\n    top: 10%; /* 距离顶部10% */\n    border-radius: 10px; /* 圆角边框 */\n    text-align: center; /* 文字居中 */\n    z-index: 100; /* 层级高于其他元素 */\n    content: attr(data-title); /* 显示data-title属性的内容 */\n    font-size: 20px; /* 字体大小 */\n    color: #fff; /* 文字颜色为白色 */\n    padding: 10px; /* 内边距 */\n    background-color: var(--text-bg-hover); /* 背景颜色为变量 */\n  }\n  \n  /* 暗色主题下悬停提示语的样式 */\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8); /* 背景颜色为深灰色 */\n  }\n  "},{"_content":"setInterval(() => { // 每隔1秒执行一次函数\n    let create_time = Math.round(new Date('2025-01-25 00:00:00').getTime() / 1000); // 设置建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000); // 获取当前时间戳\n    let second = timestamp - create_time; // 计算从建站到现在经过的秒数\n    let time = new Array(0, 0, 0, 0, 0); // 初始化时间数组，用于存储年、天、时、分、秒\n  \n    var nol = function(h){ // 定义一个函数，用于在数字小于10时补零\n      return h>9?h:'0'+h;\n    }\n  \n    // 计算经过的时间\n    if (second >= 365 * 24 * 3600) { // 如果超过1年\n      time[0] = parseInt(second / (365 * 24 * 3600)); // 计算年数\n      second %= 365 * 24 * 3600; // 取余数\n    }\n    if (second >= 24 * 3600) { // 如果超过1天\n      time[1] = parseInt(second / (24 * 3600)); // 计算天数\n      second %= 24 * 3600; // 取余数\n    }\n    if (second >= 3600) { // 如果超过1小时\n      time[2] = nol(parseInt(second / 3600)); // 计算小时数，并补零\n      second %= 3600; // 取余数\n    }\n    if (second >= 60) { // 如果超过1分钟\n      time[3] = nol(parseInt(second / 60)); // 计算分钟数，并补零\n      second %= 60; // 取余数\n    }\n    if (second > 0) { // 如果还有秒数\n      time[4] = nol(second); // 补零\n    }\n  \n    // 根据时间判断显示内容\n    if ((Number(time[2])<22) && (Number(time[2])>7)){ // 如果当前时间在7点到22点之间\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-营业中-6adea8?style=social&logo=cakephp' title='欢迎光临~'>` +\n        `<div id='runtime'>` + '本站已经运行' + time[0] + ' 年 ' + time[1] + ' 天 ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '了哟~' + '</div>';\n    }\n    else{ // 否则\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'>` +\n        `<div id='runtime'>` + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n  \n    // 将生成的HTML内容插入到页面中\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);","source":"js/footer.js","raw":"setInterval(() => { // 每隔1秒执行一次函数\n    let create_time = Math.round(new Date('2025-01-25 00:00:00').getTime() / 1000); // 设置建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000); // 获取当前时间戳\n    let second = timestamp - create_time; // 计算从建站到现在经过的秒数\n    let time = new Array(0, 0, 0, 0, 0); // 初始化时间数组，用于存储年、天、时、分、秒\n  \n    var nol = function(h){ // 定义一个函数，用于在数字小于10时补零\n      return h>9?h:'0'+h;\n    }\n  \n    // 计算经过的时间\n    if (second >= 365 * 24 * 3600) { // 如果超过1年\n      time[0] = parseInt(second / (365 * 24 * 3600)); // 计算年数\n      second %= 365 * 24 * 3600; // 取余数\n    }\n    if (second >= 24 * 3600) { // 如果超过1天\n      time[1] = parseInt(second / (24 * 3600)); // 计算天数\n      second %= 24 * 3600; // 取余数\n    }\n    if (second >= 3600) { // 如果超过1小时\n      time[2] = nol(parseInt(second / 3600)); // 计算小时数，并补零\n      second %= 3600; // 取余数\n    }\n    if (second >= 60) { // 如果超过1分钟\n      time[3] = nol(parseInt(second / 60)); // 计算分钟数，并补零\n      second %= 60; // 取余数\n    }\n    if (second > 0) { // 如果还有秒数\n      time[4] = nol(second); // 补零\n    }\n  \n    // 根据时间判断显示内容\n    if ((Number(time[2])<22) && (Number(time[2])>7)){ // 如果当前时间在7点到22点之间\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-营业中-6adea8?style=social&logo=cakephp' title='欢迎光临~'>` +\n        `<div id='runtime'>` + '本站已经运行' + time[0] + ' 年 ' + time[1] + ' 天 ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '了哟~' + '</div>';\n    }\n    else{ // 否则\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'>` +\n        `<div id='runtime'>` + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n  \n    // 将生成的HTML内容插入到页面中\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);","date":"2025-02-13T13:20:51.156Z","updated":"2025-02-13T13:20:51.156Z","path":"js/footer.js","layout":"false","title":"","comments":1,"_id":"cm7msa3dr0004m0ot3no86lpu","content":"setInterval(() => { // 每隔1秒执行一次函数\n    let create_time = Math.round(new Date('2025-01-25 00:00:00').getTime() / 1000); // 设置建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000); // 获取当前时间戳\n    let second = timestamp - create_time; // 计算从建站到现在经过的秒数\n    let time = new Array(0, 0, 0, 0, 0); // 初始化时间数组，用于存储年、天、时、分、秒\n  \n    var nol = function(h){ // 定义一个函数，用于在数字小于10时补零\n      return h>9?h:'0'+h;\n    }\n  \n    // 计算经过的时间\n    if (second >= 365 * 24 * 3600) { // 如果超过1年\n      time[0] = parseInt(second / (365 * 24 * 3600)); // 计算年数\n      second %= 365 * 24 * 3600; // 取余数\n    }\n    if (second >= 24 * 3600) { // 如果超过1天\n      time[1] = parseInt(second / (24 * 3600)); // 计算天数\n      second %= 24 * 3600; // 取余数\n    }\n    if (second >= 3600) { // 如果超过1小时\n      time[2] = nol(parseInt(second / 3600)); // 计算小时数，并补零\n      second %= 3600; // 取余数\n    }\n    if (second >= 60) { // 如果超过1分钟\n      time[3] = nol(parseInt(second / 60)); // 计算分钟数，并补零\n      second %= 60; // 取余数\n    }\n    if (second > 0) { // 如果还有秒数\n      time[4] = nol(second); // 补零\n    }\n  \n    // 根据时间判断显示内容\n    if ((Number(time[2])<22) && (Number(time[2])>7)){ // 如果当前时间在7点到22点之间\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-营业中-6adea8?style=social&logo=cakephp' title='欢迎光临~'>` +\n        `<div id='runtime'>` + '本站已经运行' + time[0] + ' 年 ' + time[1] + ' 天 ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '了哟~' + '</div>';\n    }\n    else{ // 否则\n      currentTimeHtml =`<img class='boardsign' src='https://img.shields.io/badge/dmw小屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'>` +\n        `<div id='runtime'>` + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n  \n    // 将生成的HTML内容插入到页面中\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);"},{"title":"movies","date":"2025-02-13T07:01:17.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-13T09:31:05.195Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cm7msa3ds0005m0otdl8516al","content":"","excerpt":"","more":""},{"title":"link","date":"2025-02-13T07:01:55.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2025-02-13 15:01:55\ntype: \"link\"\n---\n","updated":"2025-02-16T14:44:58.871Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm7msa3ds0006m0ot8fsh9o11","content":"","excerpt":"","more":""},{"title":"music","date":"2025-02-13T07:01:17.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-13T07:14:13.107Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm7msa3ds0007m0otaml480yx","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-02-13T07:01:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-02-13 15:01:17\ntype: \"tags\"\n---\n","updated":"2025-02-16T14:44:21.799Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm7msa3ds0008m0ot9r4w70vu","content":"","excerpt":"","more":""},{"title":"works","date":"2025-02-13T07:01:17.000Z","_content":"","source":"works/index.md","raw":"---\ntitle: works\ndate: 2025-02-13 15:01:17\n---\n","updated":"2025-02-13T07:18:31.900Z","path":"works/index.html","comments":1,"layout":"page","_id":"cm7msa3dt0009m0ot6t8q1qby","content":"","excerpt":"","more":""},{"_content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()","source":"js/universe.js","raw":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()","date":"2025-02-15T05:38:21.891Z","updated":"2025-02-15T05:32:21.203Z","path":"js/universe.js","layout":"false","title":"","comments":1,"_id":"cm7msa3du000am0otc539by7j","content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()"},{"_content":".loading-img {\n    background: url(../img/my/小埋1.jpg) no-repeat center center;\n    background-size: cover;\n}\n\n.pace {\n    -webkit-pointer-events: none;\n    pointer-events: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    z-index: 2000;\n    position: fixed;\n    margin: auto;\n    top: 10px;\n    left: 0;\n    right: 0;\n    height: 8px;\n    border-radius: 8px;\n    width: 4rem;\n    background: #eaecf2;\n    border: 1px #e3e8f7;\n    overflow: hidden;\n  }\n  \n  .pace-inactive .pace-progress {\n    opacity: 0;\n    transition: 0.3s ease-in;\n  }\n  \n  .pace .pace-progress {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    max-width: 200px;\n    position: absolute;\n    z-index: 2000;\n    display: block;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    animation: gradient 1.5s ease infinite;\n    background-size: 200%;\n  }\n  \n  .pace.pace-inactive {\n    opacity: 0;\n    transition: 0.3s;\n    top: -8px;\n  }\n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }","source":"css/progress_bar.css","raw":".loading-img {\n    background: url(../img/my/小埋1.jpg) no-repeat center center;\n    background-size: cover;\n}\n\n.pace {\n    -webkit-pointer-events: none;\n    pointer-events: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    z-index: 2000;\n    position: fixed;\n    margin: auto;\n    top: 10px;\n    left: 0;\n    right: 0;\n    height: 8px;\n    border-radius: 8px;\n    width: 4rem;\n    background: #eaecf2;\n    border: 1px #e3e8f7;\n    overflow: hidden;\n  }\n  \n  .pace-inactive .pace-progress {\n    opacity: 0;\n    transition: 0.3s ease-in;\n  }\n  \n  .pace .pace-progress {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    max-width: 200px;\n    position: absolute;\n    z-index: 2000;\n    display: block;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    animation: gradient 1.5s ease infinite;\n    background-size: 200%;\n  }\n  \n  .pace.pace-inactive {\n    opacity: 0;\n    transition: 0.3s;\n    top: -8px;\n  }\n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }","date":"2025-02-27T02:39:54.528Z","updated":"2025-02-27T02:39:54.528Z","path":"css/progress_bar.css","layout":"false","title":"","comments":1,"_id":"cm7msa3dx000cm0otfbzubkuj","content":".loading-img {\n    background: url(../img/my/小埋1.jpg) no-repeat center center;\n    background-size: cover;\n}\n\n.pace {\n    -webkit-pointer-events: none;\n    pointer-events: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    z-index: 2000;\n    position: fixed;\n    margin: auto;\n    top: 10px;\n    left: 0;\n    right: 0;\n    height: 8px;\n    border-radius: 8px;\n    width: 4rem;\n    background: #eaecf2;\n    border: 1px #e3e8f7;\n    overflow: hidden;\n  }\n  \n  .pace-inactive .pace-progress {\n    opacity: 0;\n    transition: 0.3s ease-in;\n  }\n  \n  .pace .pace-progress {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    max-width: 200px;\n    position: absolute;\n    z-index: 2000;\n    display: block;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    animation: gradient 1.5s ease infinite;\n    background-size: 200%;\n  }\n  \n  .pace.pace-inactive {\n    opacity: 0;\n    transition: 0.3s;\n    top: -8px;\n  }\n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }"},{"_content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }","source":"css/universe.css","raw":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }","date":"2025-02-15T05:38:39.605Z","updated":"2025-02-15T05:38:39.605Z","path":"css/universe.css","layout":"false","title":"","comments":1,"_id":"cm7msa3dz000fm0ot0bgydqme","content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }"}],"Post":[{"title":"刷题日记2.26","date":"2025-02-25T16:00:00.000Z","updated":"2025-02-25T16:00:00.000Z","_content":"## 1.前缀和\n\n前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。\n\n本题链接：\n\n[【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/7)\n\n今日题解如下：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e5 +9;\nll a[N], pre[N];\n\nint main() {\n   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n   int t;\n   cin>>t;\n   \n   while(t--) {\n   \tint n,q;\n   \tcin >> n >> q;\n   \t\n   \tfor(int i = 1; i <= n; ++i)cin>>a[i];\n   \tfor(int i = 1; i <= n; ++i)pre[i] = pre[i-1] + a[i];\n\n   \twhile(q--) {\n   \t\tint l, r;\n   \t\tcin>>l>>r;\n   \t\tcout << pre[r] -pre[l - 1] << '\\n';\n   \t}\n   }\n\n   return 0;\n}\n```\n\n粗心的把ll = long long 写成ll = int；导致结果错误。\n\n## 2.差分\n\n差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。\n\n原题链接：\n\n[【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/8)\n\n今日题解:\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1e5 + 9;\nll a[N],diff[N],pre[N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,p,q;\n\tcin>>n>>p>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i];\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tdiff[i] = a[i] - a[i-1];//差分数组每一项为原数组两项之差\n\t} \n\twhile(p--) {\n\t\tint l,r,x;\n\t\tcin>>l>>r>>x;\n\t\tdiff[l]+=x;\n\t\tdiff[r+1]-=x;//只在[l,r]上修改，之后的要恢复原样\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\ta[i]=a[i-1]+diff[i];//恢复成原数组\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tpre[i]=pre[i-1]+a[i];//修改后的前缀和\n\t}\n\twhile(q--) {\n\t\tint l,r;\n\t\tcin>>l>>r;\n\t\tcout<<pre[r] - pre[l-1]<<'\\n';\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n## 3.**二维前缀和**\n\n原题链接：\n\n[【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/15)\n\n今日题解：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e3 + 9;\nll a[N][N], pre[N][N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,m,q;\n\tcin>>n>>m>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tpre[i][j]=pre[i-1][j]+pre[i][j-1]-pre[i-1][j-1]+a[i][j];//见图1\n\t\t}\n\t}\n\twhile(q--) {\n\t\tint x1,y1,x2,y2;\n\t\tcin>>x1>>y1>>x2>>y2;\n\t\tcout<<pre[x2][y2]-pre[x2][y1-1]-pre[x1-1][y2]+pre[x1-1][y1-1]<<'\\n';//见图2\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n图1：\n\n![image-20250226225152860](刷题日记2.26/image-20250226225152860.png)\n\n图2：\n\n![image-20250226225220869](刷题日记2.26/image-20250226225220869.png)","source":"_posts/刷题日记2.26.md","raw":"---\ntitle: 刷题日记2.26\ndate: 2025-02-26\nupdated: 2025-02-26\ncategories: 算法\n---\n## 1.前缀和\n\n前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。\n\n本题链接：\n\n[【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/7)\n\n今日题解如下：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e5 +9;\nll a[N], pre[N];\n\nint main() {\n   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n   int t;\n   cin>>t;\n   \n   while(t--) {\n   \tint n,q;\n   \tcin >> n >> q;\n   \t\n   \tfor(int i = 1; i <= n; ++i)cin>>a[i];\n   \tfor(int i = 1; i <= n; ++i)pre[i] = pre[i-1] + a[i];\n\n   \twhile(q--) {\n   \t\tint l, r;\n   \t\tcin>>l>>r;\n   \t\tcout << pre[r] -pre[l - 1] << '\\n';\n   \t}\n   }\n\n   return 0;\n}\n```\n\n粗心的把ll = long long 写成ll = int；导致结果错误。\n\n## 2.差分\n\n差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。\n\n原题链接：\n\n[【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/8)\n\n今日题解:\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1e5 + 9;\nll a[N],diff[N],pre[N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,p,q;\n\tcin>>n>>p>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tcin>>a[i];\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tdiff[i] = a[i] - a[i-1];//差分数组每一项为原数组两项之差\n\t} \n\twhile(p--) {\n\t\tint l,r,x;\n\t\tcin>>l>>r>>x;\n\t\tdiff[l]+=x;\n\t\tdiff[r+1]-=x;//只在[l,r]上修改，之后的要恢复原样\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\ta[i]=a[i-1]+diff[i];//恢复成原数组\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tpre[i]=pre[i-1]+a[i];//修改后的前缀和\n\t}\n\twhile(q--) {\n\t\tint l,r;\n\t\tcin>>l>>r;\n\t\tcout<<pre[r] - pre[l-1]<<'\\n';\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n## 3.**二维前缀和**\n\n原题链接：\n\n[【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛](https://www.starrycoding.com/problem/15)\n\n今日题解：\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1e3 + 9;\nll a[N][N], pre[N][N];\n\nvoid solve() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint n,m,q;\n\tcin>>n>>m>>q;\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=m;++j) {\n\t\t\tpre[i][j]=pre[i-1][j]+pre[i][j-1]-pre[i-1][j-1]+a[i][j];//见图1\n\t\t}\n\t}\n\twhile(q--) {\n\t\tint x1,y1,x2,y2;\n\t\tcin>>x1>>y1>>x2>>y2;\n\t\tcout<<pre[x2][y2]-pre[x2][y1-1]-pre[x1-1][y2]+pre[x1-1][y1-1]<<'\\n';//见图2\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tint t=1;\n//\tcin>>t;\n\twhile(t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n图1：\n\n![image-20250226225152860](刷题日记2.26/image-20250226225152860.png)\n\n图2：\n\n![image-20250226225220869](刷题日记2.26/image-20250226225220869.png)","slug":"刷题日记2.26","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3dv000bm0otaaby174b","content":"<h2 id=\"1-前缀和\"><a href=\"#1-前缀和\" class=\"headerlink\" title=\"1.前缀和\"></a>1.前缀和</h2><p>前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。</p>\n<p>本题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/7\">【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> <span class=\"number\">+9</span>;</span><br><span class=\"line\">ll a[N], pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"type\">int</span> t;</span><br><span class=\"line\">   cin&gt;&gt;t;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">   \t<span class=\"type\">int</span> n,q;</span><br><span class=\"line\">   \tcin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)cin&gt;&gt;a[i];</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)pre[i] = pre[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">   \t\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">   \t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">   \t\tcout &lt;&lt; pre[r] -pre[l - <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>粗心的把ll &#x3D; long long 写成ll &#x3D; int；导致结果错误。</p>\n<h2 id=\"2-差分\"><a href=\"#2-差分\" class=\"headerlink\" title=\"2.差分\"></a>2.差分</h2><p>差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。</p>\n<p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/8\">【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N],diff[N],pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,p,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tdiff[i] = a[i] - a[i<span class=\"number\">-1</span>];<span class=\"comment\">//差分数组每一项为原数组两项之差</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r,x;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class=\"line\">\t\tdiff[l]+=x;</span><br><span class=\"line\">\t\tdiff[r<span class=\"number\">+1</span>]-=x;<span class=\"comment\">//只在[l,r]上修改，之后的要恢复原样</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\ta[i]=a[i<span class=\"number\">-1</span>]+diff[i];<span class=\"comment\">//恢复成原数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tpre[i]=pre[i<span class=\"number\">-1</span>]+a[i];<span class=\"comment\">//修改后的前缀和</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[r] - pre[l<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-二维前缀和\"><a href=\"#3-二维前缀和\" class=\"headerlink\" title=\"3.二维前缀和\"></a>3.<strong>二维前缀和</strong></h2><p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/15\">【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e3</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N][N], pre[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;a[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tpre[i][j]=pre[i<span class=\"number\">-1</span>][j]+pre[i][j<span class=\"number\">-1</span>]-pre[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+a[i][j];<span class=\"comment\">//见图1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x1,y1,x2,y2;</span><br><span class=\"line\">\t\tcin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[x2][y2]-pre[x2][y1<span class=\"number\">-1</span>]-pre[x1<span class=\"number\">-1</span>][y2]+pre[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;<span class=\"comment\">//见图2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图1：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225152860.png\" alt=\"image-20250226225152860\"></p>\n<p>图2：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225220869.png\" alt=\"image-20250226225220869\"></p>\n","excerpt":"","more":"<h2 id=\"1-前缀和\"><a href=\"#1-前缀和\" class=\"headerlink\" title=\"1.前缀和\"></a>1.前缀和</h2><p>前缀和提供一个时间复杂的为O(1)的区间查询。通过前缀和右端点与左端点-1之差可以得到其区间和。</p>\n<p>本题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/7\">【模板】前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> <span class=\"number\">+9</span>;</span><br><span class=\"line\">ll a[N], pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"type\">int</span> t;</span><br><span class=\"line\">   cin&gt;&gt;t;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">   \t<span class=\"type\">int</span> n,q;</span><br><span class=\"line\">   \tcin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)cin&gt;&gt;a[i];</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)pre[i] = pre[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">   \t\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">   \t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">   \t\tcout &lt;&lt; pre[r] -pre[l - <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>粗心的把ll &#x3D; long long 写成ll &#x3D; int；导致结果错误。</p>\n<h2 id=\"2-差分\"><a href=\"#2-差分\" class=\"headerlink\" title=\"2.差分\"></a>2.差分</h2><p>差分便于区间修改，可以通过前缀和得到前缀和数组，然后利用前缀和得到修改后的区间和。</p>\n<p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/8\">【模板】差分 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N],diff[N],pre[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,p,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tcin&gt;&gt;a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tdiff[i] = a[i] - a[i<span class=\"number\">-1</span>];<span class=\"comment\">//差分数组每一项为原数组两项之差</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r,x;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class=\"line\">\t\tdiff[l]+=x;</span><br><span class=\"line\">\t\tdiff[r<span class=\"number\">+1</span>]-=x;<span class=\"comment\">//只在[l,r]上修改，之后的要恢复原样</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\ta[i]=a[i<span class=\"number\">-1</span>]+diff[i];<span class=\"comment\">//恢复成原数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\tpre[i]=pre[i<span class=\"number\">-1</span>]+a[i];<span class=\"comment\">//修改后的前缀和</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l,r;</span><br><span class=\"line\">\t\tcin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[r] - pre[l<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-二维前缀和\"><a href=\"#3-二维前缀和\" class=\"headerlink\" title=\"3.二维前缀和\"></a>3.<strong>二维前缀和</strong></h2><p>原题链接：</p>\n<p><a href=\"https://www.starrycoding.com/problem/15\">【模板】二维前缀和 | 星码StarryCoding | 算法竞赛新手村 | ACM、OI、蓝桥杯、天梯赛、CCF、ACM-ICPC、大学生信息学竞赛</a></p>\n<p>今日题解：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e3</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">ll a[N][N], pre[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\">\tcin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;a[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;++j) &#123;</span><br><span class=\"line\">\t\t\tpre[i][j]=pre[i<span class=\"number\">-1</span>][j]+pre[i][j<span class=\"number\">-1</span>]-pre[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+a[i][j];<span class=\"comment\">//见图1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x1,y1,x2,y2;</span><br><span class=\"line\">\t\tcin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">\t\tcout&lt;&lt;pre[x2][y2]-pre[x2][y1<span class=\"number\">-1</span>]-pre[x1<span class=\"number\">-1</span>][y2]+pre[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;<span class=\"comment\">//见图2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\tcin&gt;&gt;t;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图1：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225152860.png\" alt=\"image-20250226225152860\"></p>\n<p>图2：</p>\n<p><img src=\"/2025/02/26/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B02.26/image-20250226225220869.png\" alt=\"image-20250226225220869\"></p>\n"},{"title":"Java基础复盘","date":"2025-02-03T16:00:00.000Z","updated":"2025-02-16T16:00:00.000Z","swiper_index":1,"_content":"\n## 一、Java概述\n\n### 1.Java定义\n\n由Sun公司于1995发布的一种编程语言和计算平台。\n\n主要分为三个版本：JavaSE---标准版，JavaEE---企业版，JavaME---微型版。\n\n### 2.Java特点\n\n1.**面向对象**，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。\n\n2.**静态语言**。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。\n\n3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。\n\n4.**容易实现多线程**。在用户空间中实现多线程。\n\n5.**高性能**。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。\n\n6.**自动管理对象的生命周期**。安全。\n\n7.功能强大和简单易用。\n\n## 二、Java开发环境\n\nJDK包括jre和核心类库。jre包括jvm。\n\njre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。\n\n## 三、Java基础语法\n\n### 1.数据类型\n\n四类八种：\n\n1.整数型：\nbyte一个字节即8位(-128-127)，\nshort两个字节即16位(-32768-32767)，\nint4个字节即32位(-2147283648-2147483647)，\nlong八个字节即64位(-9e18-9e18)---后加L\n\n2.浮点型：\nfloat4字节即32位---精确到到小数点后六位---后加f，\ndouble8字节即64位精确到小数点后15位---后加d。\n\n3.字符型：\nchar类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。\n\n4.布尔型Boolean类型：只有true或false。\n\n### 2.基础语法\n\n1.大小写敏感\n\n2.类名采用大驼峰命名法(即MyClass类似的)\n\n3.包名小写(网址倒序)\n\n4方法名采用小驼峰命名法(即myFirstMethod类似的)\n\n### 3.运算符\n\n1.**赋值运算符’=‘**，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：\n\n- **浅拷贝**：复制对象的字段值，但引用类型的字段仍然指向同一个对象。\n\n- **深拷贝**：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。  \n\n2.自增自减运算符：\n\n![](Java基础复盘/image-20250201135214019.png)\n\n3.算数运算符与比较运算符和数学差不多\n\n4.逻辑运算符与数学差不多，按位运算符比较的是二进制位\n\n5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：\n\n​\t8>>1=4;9<<2=36;\n\n6.三元运算符：语法为：\n\n​\t**条件表达式？表达式1：表达式2**\n\n条件表达式为true就调用表达式1，否则调用表达式2.\n\n\n\n## 四、Java执行流程控制\n\n### 1.条件语句\n\n1.if...else\n\n`if(表达式) {`\n\n​\t`表达式为真执行；`\n\n`}`\n\n`else {`\n\n​\t`否则执行`\n\n`}`\n\n2.switch用于小范围单个值\n\n`switch(变量) {`\n\n​\t`case 值1：`\n\n​\t\t`表达式1；`\n\n​\t\t`break；`\n\n​\t`case 值2：`\n\n​\t\t`表达式2：`\n\n​\t\t`break；`\n\n​\t`......`\n\n​\t`default：`\n\n​\t\t`表达式n;`\n\n​\t\t`break;`\n\n`}`\n\n注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的`case`开始执行，直到遇到`break`语句或`switch`块的末尾为止，而不会自动停止。\n\n### 2.循环语句\n\nwhile，do...while，for和for-each\n\nwhile(表达式) {\n\n​\t为真执行并再次调用while()；\n\n}\n\ndo {\n\n​\t第一次直接执行，后续满足表达式执行；\n\n}while(表达式)；\n\nfor( 初始化;条件 ;步进 ) { 条件为真执行}\n\nfor-each例如:\n\n​\tint array[]={1,2,3}\n\n​\tfor(auto arr: array) {\n\n​\t\tSystem.out.println(arr);\n\n​\t}\n\n打印数组。\n\n### 3.跳转语句\n\n有break，continue和return\n\nbreak用于退出当前循环\n\ncontinue用于退出当次循环进入下一次循环\n\nreturn直接结束本次函数调用\n\n## 五、面向对象\n\n### 1.类和对象\n\n类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。\n\n### 2.对象的创建\n\n1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：\n\n`Car carKey；`\n\n但是我们一般在创建对象引用时会同时把一个对象赋给它如：\n\n`Car carKey = new Car();`\n\n### 3.属性和方法\n\n属性也被称为字段，属性可以是对象，也可以是基本数据类型。\n\n方法也就是函数，意思是做某些事情。\n\n方法的示例：\n\n访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){\n\n​\t方法体;\n\n} \n\n如果没有指定修饰符默认同包访问权限(package-private)；\n\n#### (1)构造方法\n\n构造方法也称构造器，构造函数，它是一种特殊的方法。\n\n特点：\n\n1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。\n\n2.它的方法名称必须和类名相同，\n\n3.没有返回值类型(连void都没有)。\n\n4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。\n\n5.可以重载，只要参数列表不同。\n\n6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。\n\n7.构造方法不能被继承或重写，但可以通过`super()`调用父类的构造方法。\n\n#### (2)方法重载\n\n方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。\n\n#### (3)方法的重写\n\n方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。\n\n要实现方法重写，必须满足以下条件：\n\n1. **继承关系**：子类必须继承父类。\n2. **方法名和参数列表相同**：子类中的方法必须与父类中的方法具有相同的名称和参数列表。\n3. **返回值类型相同或兼容**：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。\n4. **访问修饰符的限制**：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是`public`，子类方法不能是`protected`或`private`。\n5. **异常声明的限制**：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。\n\n### 4.初始化\n\n在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：\n\n#### (1) 类的初始化\n\n类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：\n\n- **加载**：将类的`.class`文件加载到JVM内存中。\n- **连接**：\n  - **验证**：检查类的结构是否正确，是否符合Java规范。\n  - **准备**：为类的静态变量分配内存，并设置默认初始值。\n  - **解析**：将类、接口、字段和方法的符号引用转换为直接引用。\n- **初始化**：执行类构造器`<clinit>`方法，完成静态变量的赋值和静态代码块的执行。\n\n**示例**：\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块执行\");\n    }\n    static int staticVar = 10;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(MyClass.staticVar); // 触发类的初始化\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块执行\n10\n```\n\n#### (2) 成员初始化\n\n成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：\n\n- **默认初始化**：由JVM自动为成员变量赋予默认值。例如，`int`类型默认为`0`，`double`类型默认为`0.0`，`boolean`类型默认为`false`，对象引用类型默认为`null`。\n- **显式初始化**：在成员变量声明时直接赋值。\n- **构造器初始化**：通过构造器为成员变量赋值。\n\n**示例**：\n\n```java\nclass MyClass {\n    int instanceVar = 10; // 显式初始化\n    static int staticVar = 20; // 显式初始化\n    int anotherVar; // 默认初始化为0\n}\n```\n\n#### (3) 构造器初始化\n\n构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    int instanceVar;\n\n    // 构造器\n    public MyClass(int value) {\n        instanceVar = value; // 构造器初始化\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(100);\n        System.out.println(obj.instanceVar); // 输出100\n    }\n}\n```\n\n#### (4) 数组初始化\n\n数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：\n\n- **静态初始化**：在声明数组时直接指定数组元素的值。\n- **动态初始化**：指定数组的长度，由JVM自动为数组元素赋予默认值。\n\n**示例**：\n\njava复制\n\n```java\n// 静态初始化\nint[] arr1 = {1, 2, 3, 4, 5};\n\n// 动态初始化\nint[] arr2 = new int[5]; // 默认初始化为0\n```\n\n#### (5) 初始化顺序\n\nJava中对象的初始化顺序如下：\n\n1. **加载类**：加载类的`.class`文件。\n2. **静态变量和静态方法块初始化**：按照代码的顺序，先初始化静态变量，再执行静态代码块。\n3. **实例变量初始化**：按照代码的顺序，先初始化实例变量，再执行实例代码块。\n4. **构造器初始化**：执行构造器，为对象的成员变量赋值。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块1\");\n    }\n\n    static int staticVar = 10; // 静态变量初始化\n\n    {\n        System.out.println(\"实例代码块1\");\n    }\n\n    int instanceVar = 20; // 实例变量初始化\n\n    public MyClass() {\n        System.out.println(\"构造器\");\n    }\n\n    static {\n        System.out.println(\"静态代码块2\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块1\n静态代码块2\n实例代码块1\n构造器\n```\n\n### 总结\n\n- **类初始化**：加载类、静态变量初始化和执行静态代码块。\n- **成员初始化**：包括默认初始化、显式初始化和构造器初始化。\n- **构造器初始化**：通过构造器为对象的成员变量赋值。\n- **数组初始化**：静态初始化和动态初始化。\n- **初始化顺序**：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。\n\n### 5.对象的销毁\n\nJava和c/c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由**Java虚拟机**进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。\n\n#### (1)对象作用域\n\n绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。\n\n`{`\n\n​\t`int a = 11;`\n\n​\t`{`\n\n​\t\t`int b = 22;`\n\n​\t`}`\n\n`}`\n\n变量a会在两个{}中生效，而变量b只在自己的{}内生效。\n\n#### (2)this和super\n\n二者都是关键字。\n\n**this**作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。\n\n调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。![](Java基础复盘/image-20250207203153099.png)\n\nthis用在构造方法时this(参数)需要放在第一行，否则编译不通过。\n\n**super**可以调用父类的方法，属性，指向父类。其他同this。\n\n## 六、访问控制权限\n\n访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。\n\nJava中成员的访问权限一共有四种，分别是public，protected，default，private。如下\n\n![image-20250207211115238](Java基础复盘/image-20250207211115238.png)\n\n### 1.继承\n\n三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。\n\n![image-20250207212537344](Java基础复盘/image-20250207212537344.png)\n\n继承的关键字是**extends**，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：\n\n`class Father{}`\n\n`class Son extends Father{}`\n\n子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。\n\n### 2.多态\n\n三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。\n\n如何实现多态？达成三个充要条件：\n\n- 继承\n- 重写父类方法\n- 父类引用指向子类对象  \n\n比如以下代码：\n\n```java\nclass Fruit{\n    int num;\n\n    public void eat() {\n        System.out.println(\"eat Fruit\");\n    }\n}\nclass Pear extends Fruit{\n    @Override\n    public void eat() {\n        super.num = 10;\n        System.out.println(\"eat\"+num+\"Pear\");\n    }\n}\n\npublic class DuoTai {\n    public static void main(String[] args) {\n        Fruit fruit = new Pear();\n        fruit.eat();\n    }\n}\n```\n\n可以发现main方法中Fruit fruit = new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态->父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。\n\n### 3.组合\n\n组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话**多用组合，少用继承**。二者关系如下：\n\n![image-20250207222214122](Java基础复盘/image-20250207222214122.png)\n\n### 4.动态代理\n\n为什么需要代理：代理可以无侵入式的给对象增加其他功能。\n\n代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：\n\n![image-20250220105056954](Java基础复盘/image-20250220105056954.png)\n\njava如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。\n\n![](Java基础复盘/image-20250223201954533.png)\n\n**定义一个接口**\n\n```java\npublic interface HelloService {\n    void sayHello(String name);\n}\n```\n\n**实现该接口**\n\n```java\npublic class HelloServiceImpl implements HelloService {\n    @Override\n    public void sayHello(String name) {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}\n```\n\n**创建一个`InvocationHandler`实现类**\n\n```java\nimport java.lang.reflect.*;\n\npublic class MyInvocationHandler implements InvocationHandler {\n    private final Object target; // 被代理对象\n\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 在方法调用之前执行的操作\n        System.out.println(\"Before calling: \" + method.getName());\n        // 调用原始方法\n        Object result = method.invoke(target, args);\n        // 在方法调用之后执行的操作\n        System.out.println(\"After calling: \" + method.getName());\n        return result;\n    }\n}\n```\n\n**使用`Proxy`生成代理对象**\n\n```java\npublic class JdkProxyDemo {\n    public static void main(String[] args) {\n        // 创建目标对象\n        HelloService target = new HelloServiceImpl();\n        // 创建InvocationHandler实例\n        MyInvocationHandler handler = new MyInvocationHandler(target);\n        // 生成代理对象\n        HelloService proxy = (HelloService) Proxy.newProxyInstance(\n                HelloService.class.getClassLoader(), // 目标类的类加载器\n                new Class<?>[]{HelloService.class}, // 目标类实现的接口\n                handler // InvocationHandler\n        );\n        // 调用代理对象的方法\n        proxy.sayHello(\"Kimi\");\n    }\n}\n```\n\n**输出结果**\n\n```\nBefore calling: sayHello\nHello, Kimi!\nAfter calling: sayHello\n```\n\n### 5.向上转型\n\n向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。\n\n向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。\n\n向下转型相反而且不是自动完成，需要强制指定。\n\n### 6.statics\n\n`static` 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 `static` 关键字的一些主要用途：\n\n- **静态变量**：定义类的全局变量，所有实例共享。\n- **静态方法**：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。\n- **静态初始化块**：用于初始化静态变量，当类被加载时执行一次。提示程序性能。\n\n### 7.final\n\n`final` 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 `final` 关键字的一些主要用途：\n\n- **最终变量**：一旦被初始化，其值就不能被改变。\n- **最终方法**：不能被子类重写。\n- **最终类**：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。\n\n## 七、接口和抽象类\n\n在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于**定义规范和提供代码复用**，但它们在功能、用途和语法上有很大的区别。\n\n### 一、定义\n\n1. **接口(Interface)**\n   - 接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 `public` 和 `abstract` 的，字段默认是 `public static final` 的。\n   - 接口的目的是定义一组行为规范，**任何实现了该接口的类都必须实现接口中定义的所有方法**。\n   - 接口可以被多个类实现，从而实现多继承的效果。\n2. **抽象类(Abstract Class)**\n   - 抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。\n   - 抽象类的主要目的是**为子类提供一个通用的模板**，**子类必须实现抽象类中的所有抽象方法**。\n   - 抽象类只能被单个类继承，不能实现多继承。\n\n### 二、区别\n\n1. **方法实现**\n   - **接口**：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(`default`)和静态方法(`static`)，但这些方法的使用场景相对有限。\n   - **抽象类**：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。\n2. **字段**\n   - **接口**：接口中的字段默认是 `public static final` 的，即常量。它们必须在声明时初始化，且不能被修改。\n   - **抽象类**：抽象类可以包含普通字段(实例变量)，这些字段可以是 `public`、`protected` 或 `private` 的，也可以是静态的或非静态的。\n3. **继承和实现**\n   - **接口**：一个类可以实现多个接口。这是实现多继承的一种方式。\n   - **抽象类**：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。\n4. **构造方法**\n   - **接口**：接口不能有构造方法，因为接口不能被实例化。\n   - **抽象类**：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。\n5. **实例化**\n   - **接口**：接口不能被实例化。\n   - **抽象类**：抽象类也不能被实例化，但可以通过子类来实例化。\n\n### 三、使用场景\n\n1. **接口**\n   - 当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 `Animal` 接口，其中包含 `eat()` 和 `move()` 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。\n   - 当**需要实现多继承时**，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。\n2. **抽象类**\n   - 当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 `Vehicle` 抽象类，其中包含 `move()` 抽象方法和一些通用字段(如 `speed`、`color` 等)，然后让 `Car`、`Bike` 等子类继承并实现具体的行为。\n   - 当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。\n\n## 八、异常\n\nException位于**java.lang**包下，它是一种顶级接口，继承于**Throwable**类，**Throwable类是Java语言中所以错误(error)和异常(exception)类的父类**。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。\n\n在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。\n\n### 一、异常的分类\n\nJava中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。\n\n1. **受检查的异常(Checked Exception)**\n   - 这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(`FileNotFoundException`)、网络连接失败(`IOException`)等。\n   - 受检查的异常必须在代码中显式处理，否则编译器会报错。\n   - 受检查的异常继承自`Exception`类，但不包括`RuntimeException`及其子类。\n2. **非受检查的异常(Unchecked Exception)**\n   - 这些异常是程序逻辑错误或运行时错误，例如空指针异常(`NullPointerException`)、数组越界异常(`ArrayIndexOutOfBoundsException`)等。\n   - 非受检查的异常继承自`RuntimeException`类，编译器不会强制要求处理这些异常。\n   - 但为了程序的健壮性，通常也会对这些异常进行捕获和处理。\n3. **错误(Error)**\n   - 错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(`VirtualMachineError`)、线程死亡(`ThreadDeath`)等。\n   - 错误继承自`Error`类，通常不需要程序员处理，因为它们通常表示系统级别的问题。\n\n### 二、异常处理机制\n\nJava提供了以下几种机制来处理异常：\n\n1. **try-catch**\n   - `try`块用于包裹可能会抛出异常的代码，`catch`块用于捕获和处理异常。\n   - 可以有多个`catch`块来捕获不同类型的异常。\n2. **finally**\n   - `finally`块用于在`try-catch`块执行完毕后执行清理操作，无论是否捕获到异常，`finally`块都会执行。\n   - 常用于关闭文件流、释放资源等操作。\n3. **throw**\n   - `throw`关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。\n4. **throws**\n   - `throws`关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。\n\n### 三、异常处理的流程\n\n1. **抛出异常**\n   - 当程序运行时遇到错误，会创建一个异常对象并抛出。\n   - 异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。\n2. **捕获异常**\n   - 使用`try-catch`块捕获异常，捕获到异常后可以在`catch`块中进行处理。\n3. **处理异常**\n   - 在`catch`块中可以记录日志、提示用户、尝试恢复等操作。\n4. **清理资源**\n   - 使用`finally`块进行资源清理，确保资源被正确释放。\n\n### 四、示例代码\n\n以下是一个简单的Java异常处理示例：\n\n```java\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        try {\n            // 可能会抛出异常的代码\n            int result = divide(10, 0);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            // 捕获并处理特定类型的异常\n            System.out.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            // 捕获其他类型的异常\n            System.out.println(\"General Error: \" + e.getMessage());\n        } finally {\n            // 无论是否捕获到异常，finally块都会执行\n            System.out.println(\"Finally block executed.\");\n        }\n    }\n\n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### 五、自定义异常\n\nJava允许程序员定义自己的异常类，自定义异常类通常继承自`Exception`类或其子类。自定义异常可以提供更具体的错误信息。\n\n```java\npublic class MyCustomException extends Exception {\n    public MyCustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            checkAge(15);\n        } catch (MyCustomException e) {\n            System.out.println(\"Caught custom exception: \" + e.getMessage());\n        }\n    }\n\n    public static void checkAge(int age) throws MyCustomException {\n        if (age < 18) {\n            throw new MyCustomException(\"Age must be at least 18.\");\n        }\n        System.out.println(\"Age is valid.\");\n    }\n}\n```\n\n### 六、如何实践\n\n1. **明确异常的用途**\n   - 受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。\n2. **合理使用`try-catch`**\n   - 不要捕获所有异常，只捕获需要处理的异常。\n3. **避免空的`catch`块**\n   - 捕获异常后应该进行处理，而不是忽略异常。\n4. **使用`finally`块清理资源**\n   - 确保资源被正确释放，避免资源泄漏。\n5. **自定义异常**\n   - 当系统提供的异常类不足以描述错误时，可以定义自定义异常。\n\n### 七、异常处理的优缺点\n\n**优点**\n\n- 提高程序的健壮性，避免程序因错误而崩溃。\n- 提供详细的错误信息，方便调试和修复。\n- 可以通过异常处理机制实现程序的容错机制。\n\n**缺点**\n\n- 异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。\n- 如果滥用异常处理机制，可能会导致程序性能下降。\n\n总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。\n\n## 九、内部类\n\n写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。\n\n### 作用：\n\n**1.实现多继承**，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。\n\n2.**实现回调机制**，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。\n\n3.**封装逻辑**，避免暴露具体实现。\n\n内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。\n\n普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:\n\n```java\nOuter.Inner inner = outer.new Inner(); // 创建内部类实例\n```\n\n匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：\n\n```java\ninterface MyInterface {\n    void display();\n}\n\nclass Outer {\n    void method() {\n        MyInterface mi = new MyInterface() {\n            @Override\n            public void display() {\n                System.out.println(\"Anonymous inner class\");\n            }\n        };\n        mi.display();\n    }\n}\n```\n\n## 十、集合\n\n### collections框架图\n\n![image-20250216221349436](Java基础复盘/image-20250216221349436.png)\n\n### iterable接口\n\n定义了一种方法`iterator()`，允许以统一的方式(增强for)遍历集合。\n\n### 顶层接口\n\n**Collection** 是一个顶层接口，它主要用来定义集合的约定\n**List**接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类\n**Set**接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。\n\n**Queue**是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。\n\nSortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。\n\nMap是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。\n\n### 类(数据结构)\n\n1. **ArrayList**：动态数组实现的列表，支持快速随机访问。\n2. **Vector**：与`ArrayList`类似，但它是同步的，适用于多线程环境。\n3. **LinkedList 类**：双向链表实现的列表，支持快速插入和删除。\n4. **Stack**：后进先出（LIFO）的栈，基于`Vector`实现。\n5. **HashSet**：基于哈希表实现的集合，不允许重复元素。\n6. **TreeSet**：基于红黑树实现的有序集合。\n7. **LinkedHashSet 类**：`HashSet`的链表版本，维护元素插入顺序。\n8. **PriorityQueue**：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。\n9. **HashMap**：基于哈希表实现的映射，允许一个null键和多个null值。\n10. **TreeMap 类**：基于红黑树实现的有序映射。\n11. **LinkedHashMap 类**：`HashMap`的链表版本，维护元素插入或访问顺序。\n12. **Hashtable 类**：与`HashMap`类似，但它是同步的，适用于多线程环境。\n13. **IdentityHashMap 类**：`HashMap`的变体，使用引用相等性而不是对象相等性。\n14. **WeakHashMap 类**：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。\n15. **Collections 类**：提供对集合的静态方法操作，如排序、搜索和修改。\n\n### 集合实现类特征图\n\n![image-20250216222117731](Java基础复盘/image-20250216222117731.png)\n\n## 十一、泛型\n\n一种语言特性，允许开发者在定义类，接口或方法时使用**类型参数**，从而**提高代码的复用性和灵活性**。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时**保持类型安全**。\n\n### **类型参数**\n\n类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。\n\n**类型参数的命名规范**\n\n- 通常使用单个大写字母表示类型参数，常见的有：\n  - `T`（Type）：表示任意类型。\n  - `E`（Element）：表示集合中的元素类型。\n  - `K`（Key）：表示键的类型。\n  - `V`（Value）：表示值的类型。\n  - `N`（Number）：表示数字类型。\n  - `S`、`U`、`V` 等：用于多个类型参数的区分。\n\n### **类型擦除**\n\nJava泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组\n\n```java\nBox<String>[] boxes = new Box<String>[10]; // 编译错误\n```\n\n但是可以通过强制类型转换创建\n\n```java\nBox<String>[] boxes = (Box<String>[]) new Box[10]; // 需要强制类型转换\n```\n\n### 类型限制\n\n1.**不能使用原始数据类型，只能使用包装类**\n\n2.**不能创建泛型的静态字段**，因为静态字段属于类，而泛型类型是实例相关的。\n\n```java\npublic class Box<T> {\n    private static T value; // 编译错误\n}\n```\n\n3.**不能实例化泛型类型参数**：\n\n```java\npublic class Box<T> {\n    public void set(T value) {\n        T newValue = new T(); // 编译错误\n    }\n}\n```\n\n### 通配符\n\n通配符（`?`）用于表示未知类型，分为无界通配符和有界通配符：\n\n1. **无界通配符**：\n\n   ```java\n   Box<?> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是未知的，可以是任何类型。\n\n2. **有界通配符**：\n\n   上界\n\n   ```java\n   Box<? extends Number> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Number` 或其子类。\n\n   ```java\n   List<String> stringList = new ArrayList<>();\n   List<? extends Object> objectList = stringList; // 协变\n   ```\n\n   下界\n\n   ```java\n   Box<? super Integer> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Integer` 或其父类。\n\n   ```java\n   List<Object> objectList = new ArrayList<>();\n   List<? super String> stringList = objectList; // 逆变\n   ```\n\n## 十二、反射\n\n啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。\n\n![image-20250220123104283](Java基础复盘/image-20250220123104283.png)\n\n### 获取对象\n\n```java\npackage com.dmw.basedemo.reflect;\n\npublic class Demo {\n    public static void main(String[] args) throws ClassNotFoundException {\n        /*\n        * 获取class对象的三种方式：\n        *   1.Class.forName(\"全类名\");\n        *   2.类名.class\n        *   3.对象.getClass();\n        * */\n\n        //第一种方式\n        //全类名：包名+类名\n        //最为常用\n        Class clazz1 = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n\n        //第二种方式\n        //一般用于传参\n        Class clazz2 = Student.class;\n\n        //第三种方式\n        //当我们已经有了这个类的对象时，才可以使用。\n        Student student = new Student();\n        Class clazz3 = student.getClass();\n\n        System.out.println(clazz1 == clazz2);\n        System.out.println(clazz1 == clazz3);\n    }\n}\n```\n\n![image-20250220122408100](Java基础复盘/image-20250220122408100.png)\n\n### 获取对象的构造方法\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Parameter;\n\npublic class Demo2Constructor {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        /*\n        * Class类中用于获取构造方法的方法\n        *   Constructor<?>[] getConstructors()获取公共的构造方法\n        *   Constructor<?>[] getDeclaredConstructors()获取所有构造方法\n        *   Constructor<?>[] getConstructor(Class<?>...parameterTypes)获取公共的某个构造方法\n        *   Constructor<?>[] getConstructors(Class<?>...parameterTypes)获取某个构造方法\n        * */\n\n        //1.获取class字节码文件对象\n        Class clazz= Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2获取构造方法\n        Constructor[] cons = clazz.getConstructors();\n        for(Constructor c : cons) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor[] cons1 = clazz.getDeclaredConstructors();\n        for(Constructor c : cons1) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor cons2 = clazz.getDeclaredConstructor(int.class);\n        System.out.println(cons2);\n        System.out.println(\"---------------\");\n        Constructor cons3 = clazz.getDeclaredConstructor(String.class);\n        System.out.println(cons3);\n        System.out.println(\"---------------\");\n        Constructor cons4 = clazz.getDeclaredConstructor(String.class, int.class);\n        System.out.println(cons4);\n        System.out.println(\"---------------\");\n        //获取权限修饰符\n        int Modifiers = cons4.getModifiers();\n        System.out.println(Modifiers);//其中1为public，2为protected，4为private\n        System.out.println(\"---------------\");\n        //获取参数\n        Parameter[] parameters = cons4.getParameters();\n        for(Parameter p : parameters) {\n            System.out.println(p);\n        }\n        //暴力反射：表示临时取消权限校验\n        cons4.setAccessible(true);\n        //利用获取到的构造方法来构造对象\n        Student stu = (Student) cons4.newInstance(\"张三\", 23);\n        System.out.println(stu);\n    }\n}\n\n```\n\n![image-20250222225338830](Java基础复盘/image-20250222225338830.png)\n\n其中**权限修饰符常量字段值**如下\n\n![](Java基础复盘/image-20250222224835797.png)\n\n### 获取对象的成员变量\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Field;\n\npublic class Demo3Var {\n    /*\n    * Class类中用于获取成员变量的方法\n    * Field[] getFields();//返回所有公共成员变量对象的数组\n    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组\n    * Field getField(String name);//返回单个公共成员变量对象\n    * Field[] getDeclareField(String name);//返回单个成员变量对象\n    * */\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n        //1.获取class字节码文件对象\n        Class clazz = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2.获取所有的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n        //获取单个的成员变量\n        Field age = clazz.getDeclaredField(\"age\");\n        age.setAccessible(true);\n        System.out.println(age);\n        //获取权限修饰符\n        int modifiers = age.getModifiers();\n        System.out.println(modifiers);\n        //获取成员变量的名字\n        String n = age.getName();\n        System.out.println(n);\n        //获取成员变量的类型\n        Class<?> type = age.getType();\n        System.out.println(type);\n        //获取成员变量记录的值\n        Student student = new Student(\"zhangsan\", 18);\n        age.setAccessible(true);\n        Object o = age.get(student);//获取student这个对象age记录的值\n        System.out.println(o);\n    }\n}\n```\n\n![image-20250223163956807](Java基础复盘/image-20250223163956807.png)\n\n### 获取对象中的成员方法\n\n```java\n/*\n* Class类中用于获取对象中的成员方法\n* Method[] getMethods();//获取当前类及其父类的所有公有方法。\n* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。\n* Method getMethod(String name, Class<?>... parameterTypes)：获取公有方法（包括父类方法）\n* Method getDeclaredMethod(String name, Class<?>... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。\n*\n* 调用方法\n* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：\n    obj是目标对象实例。即调用者\n    args是方法的参数。\n    如果目标方法是静态方法，则obj可以为null。\n* */\n```\n\n### 反射的使用\n\n**1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑**\n\n```\npackage com.dmw.basedemo.reflect;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\n\npublic class Demo5Application {\n\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)\n    public static void main(String[] args) throws IOException, IllegalAccessException {\n        Student s = new Student(\"dmw\",23);\n        saveObject(s);\n    }\n\n    public static void saveObject(Object o) throws IOException, IllegalAccessException {\n        //1.获取class字节码文件\n        Class c = o.getClass();\n        //2.创建IO流\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"src\\\\a.txt\"));\n        //3.获取所有的成员变量\n        Field[] fields = c.getDeclaredFields();\n        for (Field f : fields) {\n            f.setAccessible(true);\n            String name = f.getName();\n            Object value = f.get(o);\n            bw.write(name+\":\"+value);\n            bw.newLine();\n        }\n        bw.close();\n    }\n}\n```\n\n![image-20250223191142600](Java基础复盘/image-20250223191142600.png)\n\n**2.跟配置文件相结合动态的创建对象，并调用方法**\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Objects;\nimport java.util.Properties;\n\npublic class Demo6Application2 {\n    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        //1.读取配置文件的信息\n        Properties prop = new Properties();\n        FileInputStream fis = new FileInputStream(\"src/prop.properties\");\n        prop.load(fis);\n        fis.close();\n        System.out.println(prop);\n\n        //2.获取全类名和方法名\n        String className = (String) prop.get(\"classname\");\n        String methodName = (String) prop.get(\"method\");\n        System.out.println(className);\n        System.out.println(methodName);\n\n        //3.利用反射创建对象并运行方法\n        Class clazz = Class.forName(className);\n        //获取构造方法\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        Object o = constructor.newInstance();\n        System.out.println(o);\n        Method method = clazz.getDeclaredMethod(methodName);\n        method.setAccessible(true);\n        method.invoke(o);//利用构造方法创建的对象调用此方法\n    }\n}\n```\n\n```properties\nclassname=com.dmw.basedemo.reflect.Student\nmethod=study\n```\n\n![image-20250223200310462](Java基础复盘/image-20250223200310462.png)\n\n## 十三、枚举\n\n## 十四、I/O\n\n### 1.File类\n\n### 2.基础IO类和相关方法\n\n## 十五、注解\n\n## 十六、关于null的几种处理方式\n\n","source":"_posts/Java基础复盘.md","raw":"---\ntitle: Java基础复盘\ndate: 2025-02-04\nupdated: 2025-02-17\ntags: java基础\ncategories: java\nswiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n\n## 一、Java概述\n\n### 1.Java定义\n\n由Sun公司于1995发布的一种编程语言和计算平台。\n\n主要分为三个版本：JavaSE---标准版，JavaEE---企业版，JavaME---微型版。\n\n### 2.Java特点\n\n1.**面向对象**，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。\n\n2.**静态语言**。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。\n\n3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。\n\n4.**容易实现多线程**。在用户空间中实现多线程。\n\n5.**高性能**。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。\n\n6.**自动管理对象的生命周期**。安全。\n\n7.功能强大和简单易用。\n\n## 二、Java开发环境\n\nJDK包括jre和核心类库。jre包括jvm。\n\njre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。\n\n## 三、Java基础语法\n\n### 1.数据类型\n\n四类八种：\n\n1.整数型：\nbyte一个字节即8位(-128-127)，\nshort两个字节即16位(-32768-32767)，\nint4个字节即32位(-2147283648-2147483647)，\nlong八个字节即64位(-9e18-9e18)---后加L\n\n2.浮点型：\nfloat4字节即32位---精确到到小数点后六位---后加f，\ndouble8字节即64位精确到小数点后15位---后加d。\n\n3.字符型：\nchar类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。\n\n4.布尔型Boolean类型：只有true或false。\n\n### 2.基础语法\n\n1.大小写敏感\n\n2.类名采用大驼峰命名法(即MyClass类似的)\n\n3.包名小写(网址倒序)\n\n4方法名采用小驼峰命名法(即myFirstMethod类似的)\n\n### 3.运算符\n\n1.**赋值运算符’=‘**，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：\n\n- **浅拷贝**：复制对象的字段值，但引用类型的字段仍然指向同一个对象。\n\n- **深拷贝**：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。  \n\n2.自增自减运算符：\n\n![](Java基础复盘/image-20250201135214019.png)\n\n3.算数运算符与比较运算符和数学差不多\n\n4.逻辑运算符与数学差不多，按位运算符比较的是二进制位\n\n5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：\n\n​\t8>>1=4;9<<2=36;\n\n6.三元运算符：语法为：\n\n​\t**条件表达式？表达式1：表达式2**\n\n条件表达式为true就调用表达式1，否则调用表达式2.\n\n\n\n## 四、Java执行流程控制\n\n### 1.条件语句\n\n1.if...else\n\n`if(表达式) {`\n\n​\t`表达式为真执行；`\n\n`}`\n\n`else {`\n\n​\t`否则执行`\n\n`}`\n\n2.switch用于小范围单个值\n\n`switch(变量) {`\n\n​\t`case 值1：`\n\n​\t\t`表达式1；`\n\n​\t\t`break；`\n\n​\t`case 值2：`\n\n​\t\t`表达式2：`\n\n​\t\t`break；`\n\n​\t`......`\n\n​\t`default：`\n\n​\t\t`表达式n;`\n\n​\t\t`break;`\n\n`}`\n\n注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的`case`开始执行，直到遇到`break`语句或`switch`块的末尾为止，而不会自动停止。\n\n### 2.循环语句\n\nwhile，do...while，for和for-each\n\nwhile(表达式) {\n\n​\t为真执行并再次调用while()；\n\n}\n\ndo {\n\n​\t第一次直接执行，后续满足表达式执行；\n\n}while(表达式)；\n\nfor( 初始化;条件 ;步进 ) { 条件为真执行}\n\nfor-each例如:\n\n​\tint array[]={1,2,3}\n\n​\tfor(auto arr: array) {\n\n​\t\tSystem.out.println(arr);\n\n​\t}\n\n打印数组。\n\n### 3.跳转语句\n\n有break，continue和return\n\nbreak用于退出当前循环\n\ncontinue用于退出当次循环进入下一次循环\n\nreturn直接结束本次函数调用\n\n## 五、面向对象\n\n### 1.类和对象\n\n类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。\n\n### 2.对象的创建\n\n1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：\n\n`Car carKey；`\n\n但是我们一般在创建对象引用时会同时把一个对象赋给它如：\n\n`Car carKey = new Car();`\n\n### 3.属性和方法\n\n属性也被称为字段，属性可以是对象，也可以是基本数据类型。\n\n方法也就是函数，意思是做某些事情。\n\n方法的示例：\n\n访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){\n\n​\t方法体;\n\n} \n\n如果没有指定修饰符默认同包访问权限(package-private)；\n\n#### (1)构造方法\n\n构造方法也称构造器，构造函数，它是一种特殊的方法。\n\n特点：\n\n1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。\n\n2.它的方法名称必须和类名相同，\n\n3.没有返回值类型(连void都没有)。\n\n4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。\n\n5.可以重载，只要参数列表不同。\n\n6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。\n\n7.构造方法不能被继承或重写，但可以通过`super()`调用父类的构造方法。\n\n#### (2)方法重载\n\n方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。\n\n#### (3)方法的重写\n\n方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。\n\n要实现方法重写，必须满足以下条件：\n\n1. **继承关系**：子类必须继承父类。\n2. **方法名和参数列表相同**：子类中的方法必须与父类中的方法具有相同的名称和参数列表。\n3. **返回值类型相同或兼容**：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。\n4. **访问修饰符的限制**：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是`public`，子类方法不能是`protected`或`private`。\n5. **异常声明的限制**：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。\n\n### 4.初始化\n\n在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：\n\n#### (1) 类的初始化\n\n类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：\n\n- **加载**：将类的`.class`文件加载到JVM内存中。\n- **连接**：\n  - **验证**：检查类的结构是否正确，是否符合Java规范。\n  - **准备**：为类的静态变量分配内存，并设置默认初始值。\n  - **解析**：将类、接口、字段和方法的符号引用转换为直接引用。\n- **初始化**：执行类构造器`<clinit>`方法，完成静态变量的赋值和静态代码块的执行。\n\n**示例**：\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块执行\");\n    }\n    static int staticVar = 10;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(MyClass.staticVar); // 触发类的初始化\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块执行\n10\n```\n\n#### (2) 成员初始化\n\n成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：\n\n- **默认初始化**：由JVM自动为成员变量赋予默认值。例如，`int`类型默认为`0`，`double`类型默认为`0.0`，`boolean`类型默认为`false`，对象引用类型默认为`null`。\n- **显式初始化**：在成员变量声明时直接赋值。\n- **构造器初始化**：通过构造器为成员变量赋值。\n\n**示例**：\n\n```java\nclass MyClass {\n    int instanceVar = 10; // 显式初始化\n    static int staticVar = 20; // 显式初始化\n    int anotherVar; // 默认初始化为0\n}\n```\n\n#### (3) 构造器初始化\n\n构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    int instanceVar;\n\n    // 构造器\n    public MyClass(int value) {\n        instanceVar = value; // 构造器初始化\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(100);\n        System.out.println(obj.instanceVar); // 输出100\n    }\n}\n```\n\n#### (4) 数组初始化\n\n数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：\n\n- **静态初始化**：在声明数组时直接指定数组元素的值。\n- **动态初始化**：指定数组的长度，由JVM自动为数组元素赋予默认值。\n\n**示例**：\n\njava复制\n\n```java\n// 静态初始化\nint[] arr1 = {1, 2, 3, 4, 5};\n\n// 动态初始化\nint[] arr2 = new int[5]; // 默认初始化为0\n```\n\n#### (5) 初始化顺序\n\nJava中对象的初始化顺序如下：\n\n1. **加载类**：加载类的`.class`文件。\n2. **静态变量和静态方法块初始化**：按照代码的顺序，先初始化静态变量，再执行静态代码块。\n3. **实例变量初始化**：按照代码的顺序，先初始化实例变量，再执行实例代码块。\n4. **构造器初始化**：执行构造器，为对象的成员变量赋值。\n\n**示例**：\n\njava复制\n\n```java\nclass MyClass {\n    static {\n        System.out.println(\"静态代码块1\");\n    }\n\n    static int staticVar = 10; // 静态变量初始化\n\n    {\n        System.out.println(\"实例代码块1\");\n    }\n\n    int instanceVar = 20; // 实例变量初始化\n\n    public MyClass() {\n        System.out.println(\"构造器\");\n    }\n\n    static {\n        System.out.println(\"静态代码块2\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n```\n\n**输出**：\n\n```\n静态代码块1\n静态代码块2\n实例代码块1\n构造器\n```\n\n### 总结\n\n- **类初始化**：加载类、静态变量初始化和执行静态代码块。\n- **成员初始化**：包括默认初始化、显式初始化和构造器初始化。\n- **构造器初始化**：通过构造器为对象的成员变量赋值。\n- **数组初始化**：静态初始化和动态初始化。\n- **初始化顺序**：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。\n\n### 5.对象的销毁\n\nJava和c/c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由**Java虚拟机**进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。\n\n#### (1)对象作用域\n\n绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。\n\n`{`\n\n​\t`int a = 11;`\n\n​\t`{`\n\n​\t\t`int b = 22;`\n\n​\t`}`\n\n`}`\n\n变量a会在两个{}中生效，而变量b只在自己的{}内生效。\n\n#### (2)this和super\n\n二者都是关键字。\n\n**this**作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。\n\n调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。![](Java基础复盘/image-20250207203153099.png)\n\nthis用在构造方法时this(参数)需要放在第一行，否则编译不通过。\n\n**super**可以调用父类的方法，属性，指向父类。其他同this。\n\n## 六、访问控制权限\n\n访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。\n\nJava中成员的访问权限一共有四种，分别是public，protected，default，private。如下\n\n![image-20250207211115238](Java基础复盘/image-20250207211115238.png)\n\n### 1.继承\n\n三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。\n\n![image-20250207212537344](Java基础复盘/image-20250207212537344.png)\n\n继承的关键字是**extends**，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：\n\n`class Father{}`\n\n`class Son extends Father{}`\n\n子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。\n\n### 2.多态\n\n三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。\n\n如何实现多态？达成三个充要条件：\n\n- 继承\n- 重写父类方法\n- 父类引用指向子类对象  \n\n比如以下代码：\n\n```java\nclass Fruit{\n    int num;\n\n    public void eat() {\n        System.out.println(\"eat Fruit\");\n    }\n}\nclass Pear extends Fruit{\n    @Override\n    public void eat() {\n        super.num = 10;\n        System.out.println(\"eat\"+num+\"Pear\");\n    }\n}\n\npublic class DuoTai {\n    public static void main(String[] args) {\n        Fruit fruit = new Pear();\n        fruit.eat();\n    }\n}\n```\n\n可以发现main方法中Fruit fruit = new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态->父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。\n\n### 3.组合\n\n组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话**多用组合，少用继承**。二者关系如下：\n\n![image-20250207222214122](Java基础复盘/image-20250207222214122.png)\n\n### 4.动态代理\n\n为什么需要代理：代理可以无侵入式的给对象增加其他功能。\n\n代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：\n\n![image-20250220105056954](Java基础复盘/image-20250220105056954.png)\n\njava如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。\n\n![](Java基础复盘/image-20250223201954533.png)\n\n**定义一个接口**\n\n```java\npublic interface HelloService {\n    void sayHello(String name);\n}\n```\n\n**实现该接口**\n\n```java\npublic class HelloServiceImpl implements HelloService {\n    @Override\n    public void sayHello(String name) {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}\n```\n\n**创建一个`InvocationHandler`实现类**\n\n```java\nimport java.lang.reflect.*;\n\npublic class MyInvocationHandler implements InvocationHandler {\n    private final Object target; // 被代理对象\n\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 在方法调用之前执行的操作\n        System.out.println(\"Before calling: \" + method.getName());\n        // 调用原始方法\n        Object result = method.invoke(target, args);\n        // 在方法调用之后执行的操作\n        System.out.println(\"After calling: \" + method.getName());\n        return result;\n    }\n}\n```\n\n**使用`Proxy`生成代理对象**\n\n```java\npublic class JdkProxyDemo {\n    public static void main(String[] args) {\n        // 创建目标对象\n        HelloService target = new HelloServiceImpl();\n        // 创建InvocationHandler实例\n        MyInvocationHandler handler = new MyInvocationHandler(target);\n        // 生成代理对象\n        HelloService proxy = (HelloService) Proxy.newProxyInstance(\n                HelloService.class.getClassLoader(), // 目标类的类加载器\n                new Class<?>[]{HelloService.class}, // 目标类实现的接口\n                handler // InvocationHandler\n        );\n        // 调用代理对象的方法\n        proxy.sayHello(\"Kimi\");\n    }\n}\n```\n\n**输出结果**\n\n```\nBefore calling: sayHello\nHello, Kimi!\nAfter calling: sayHello\n```\n\n### 5.向上转型\n\n向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。\n\n向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。\n\n向下转型相反而且不是自动完成，需要强制指定。\n\n### 6.statics\n\n`static` 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 `static` 关键字的一些主要用途：\n\n- **静态变量**：定义类的全局变量，所有实例共享。\n- **静态方法**：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。\n- **静态初始化块**：用于初始化静态变量，当类被加载时执行一次。提示程序性能。\n\n### 7.final\n\n`final` 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 `final` 关键字的一些主要用途：\n\n- **最终变量**：一旦被初始化，其值就不能被改变。\n- **最终方法**：不能被子类重写。\n- **最终类**：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。\n\n## 七、接口和抽象类\n\n在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于**定义规范和提供代码复用**，但它们在功能、用途和语法上有很大的区别。\n\n### 一、定义\n\n1. **接口(Interface)**\n   - 接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 `public` 和 `abstract` 的，字段默认是 `public static final` 的。\n   - 接口的目的是定义一组行为规范，**任何实现了该接口的类都必须实现接口中定义的所有方法**。\n   - 接口可以被多个类实现，从而实现多继承的效果。\n2. **抽象类(Abstract Class)**\n   - 抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。\n   - 抽象类的主要目的是**为子类提供一个通用的模板**，**子类必须实现抽象类中的所有抽象方法**。\n   - 抽象类只能被单个类继承，不能实现多继承。\n\n### 二、区别\n\n1. **方法实现**\n   - **接口**：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(`default`)和静态方法(`static`)，但这些方法的使用场景相对有限。\n   - **抽象类**：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。\n2. **字段**\n   - **接口**：接口中的字段默认是 `public static final` 的，即常量。它们必须在声明时初始化，且不能被修改。\n   - **抽象类**：抽象类可以包含普通字段(实例变量)，这些字段可以是 `public`、`protected` 或 `private` 的，也可以是静态的或非静态的。\n3. **继承和实现**\n   - **接口**：一个类可以实现多个接口。这是实现多继承的一种方式。\n   - **抽象类**：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。\n4. **构造方法**\n   - **接口**：接口不能有构造方法，因为接口不能被实例化。\n   - **抽象类**：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。\n5. **实例化**\n   - **接口**：接口不能被实例化。\n   - **抽象类**：抽象类也不能被实例化，但可以通过子类来实例化。\n\n### 三、使用场景\n\n1. **接口**\n   - 当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 `Animal` 接口，其中包含 `eat()` 和 `move()` 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。\n   - 当**需要实现多继承时**，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。\n2. **抽象类**\n   - 当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 `Vehicle` 抽象类，其中包含 `move()` 抽象方法和一些通用字段(如 `speed`、`color` 等)，然后让 `Car`、`Bike` 等子类继承并实现具体的行为。\n   - 当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。\n\n## 八、异常\n\nException位于**java.lang**包下，它是一种顶级接口，继承于**Throwable**类，**Throwable类是Java语言中所以错误(error)和异常(exception)类的父类**。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。\n\n在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。\n\n### 一、异常的分类\n\nJava中的异常主要分为两大类：**受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)**。\n\n1. **受检查的异常(Checked Exception)**\n   - 这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(`FileNotFoundException`)、网络连接失败(`IOException`)等。\n   - 受检查的异常必须在代码中显式处理，否则编译器会报错。\n   - 受检查的异常继承自`Exception`类，但不包括`RuntimeException`及其子类。\n2. **非受检查的异常(Unchecked Exception)**\n   - 这些异常是程序逻辑错误或运行时错误，例如空指针异常(`NullPointerException`)、数组越界异常(`ArrayIndexOutOfBoundsException`)等。\n   - 非受检查的异常继承自`RuntimeException`类，编译器不会强制要求处理这些异常。\n   - 但为了程序的健壮性，通常也会对这些异常进行捕获和处理。\n3. **错误(Error)**\n   - 错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(`VirtualMachineError`)、线程死亡(`ThreadDeath`)等。\n   - 错误继承自`Error`类，通常不需要程序员处理，因为它们通常表示系统级别的问题。\n\n### 二、异常处理机制\n\nJava提供了以下几种机制来处理异常：\n\n1. **try-catch**\n   - `try`块用于包裹可能会抛出异常的代码，`catch`块用于捕获和处理异常。\n   - 可以有多个`catch`块来捕获不同类型的异常。\n2. **finally**\n   - `finally`块用于在`try-catch`块执行完毕后执行清理操作，无论是否捕获到异常，`finally`块都会执行。\n   - 常用于关闭文件流、释放资源等操作。\n3. **throw**\n   - `throw`关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。\n4. **throws**\n   - `throws`关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。\n\n### 三、异常处理的流程\n\n1. **抛出异常**\n   - 当程序运行时遇到错误，会创建一个异常对象并抛出。\n   - 异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。\n2. **捕获异常**\n   - 使用`try-catch`块捕获异常，捕获到异常后可以在`catch`块中进行处理。\n3. **处理异常**\n   - 在`catch`块中可以记录日志、提示用户、尝试恢复等操作。\n4. **清理资源**\n   - 使用`finally`块进行资源清理，确保资源被正确释放。\n\n### 四、示例代码\n\n以下是一个简单的Java异常处理示例：\n\n```java\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        try {\n            // 可能会抛出异常的代码\n            int result = divide(10, 0);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            // 捕获并处理特定类型的异常\n            System.out.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            // 捕获其他类型的异常\n            System.out.println(\"General Error: \" + e.getMessage());\n        } finally {\n            // 无论是否捕获到异常，finally块都会执行\n            System.out.println(\"Finally block executed.\");\n        }\n    }\n\n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### 五、自定义异常\n\nJava允许程序员定义自己的异常类，自定义异常类通常继承自`Exception`类或其子类。自定义异常可以提供更具体的错误信息。\n\n```java\npublic class MyCustomException extends Exception {\n    public MyCustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            checkAge(15);\n        } catch (MyCustomException e) {\n            System.out.println(\"Caught custom exception: \" + e.getMessage());\n        }\n    }\n\n    public static void checkAge(int age) throws MyCustomException {\n        if (age < 18) {\n            throw new MyCustomException(\"Age must be at least 18.\");\n        }\n        System.out.println(\"Age is valid.\");\n    }\n}\n```\n\n### 六、如何实践\n\n1. **明确异常的用途**\n   - 受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。\n2. **合理使用`try-catch`**\n   - 不要捕获所有异常，只捕获需要处理的异常。\n3. **避免空的`catch`块**\n   - 捕获异常后应该进行处理，而不是忽略异常。\n4. **使用`finally`块清理资源**\n   - 确保资源被正确释放，避免资源泄漏。\n5. **自定义异常**\n   - 当系统提供的异常类不足以描述错误时，可以定义自定义异常。\n\n### 七、异常处理的优缺点\n\n**优点**\n\n- 提高程序的健壮性，避免程序因错误而崩溃。\n- 提供详细的错误信息，方便调试和修复。\n- 可以通过异常处理机制实现程序的容错机制。\n\n**缺点**\n\n- 异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。\n- 如果滥用异常处理机制，可能会导致程序性能下降。\n\n总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。\n\n## 九、内部类\n\n写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。\n\n### 作用：\n\n**1.实现多继承**，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。\n\n2.**实现回调机制**，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。\n\n3.**封装逻辑**，避免暴露具体实现。\n\n内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。\n\n普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:\n\n```java\nOuter.Inner inner = outer.new Inner(); // 创建内部类实例\n```\n\n匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：\n\n```java\ninterface MyInterface {\n    void display();\n}\n\nclass Outer {\n    void method() {\n        MyInterface mi = new MyInterface() {\n            @Override\n            public void display() {\n                System.out.println(\"Anonymous inner class\");\n            }\n        };\n        mi.display();\n    }\n}\n```\n\n## 十、集合\n\n### collections框架图\n\n![image-20250216221349436](Java基础复盘/image-20250216221349436.png)\n\n### iterable接口\n\n定义了一种方法`iterator()`，允许以统一的方式(增强for)遍历集合。\n\n### 顶层接口\n\n**Collection** 是一个顶层接口，它主要用来定义集合的约定\n**List**接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类\n**Set**接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。\n\n**Queue**是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。\n\nSortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。\n\nMap是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。\n\n### 类(数据结构)\n\n1. **ArrayList**：动态数组实现的列表，支持快速随机访问。\n2. **Vector**：与`ArrayList`类似，但它是同步的，适用于多线程环境。\n3. **LinkedList 类**：双向链表实现的列表，支持快速插入和删除。\n4. **Stack**：后进先出（LIFO）的栈，基于`Vector`实现。\n5. **HashSet**：基于哈希表实现的集合，不允许重复元素。\n6. **TreeSet**：基于红黑树实现的有序集合。\n7. **LinkedHashSet 类**：`HashSet`的链表版本，维护元素插入顺序。\n8. **PriorityQueue**：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。\n9. **HashMap**：基于哈希表实现的映射，允许一个null键和多个null值。\n10. **TreeMap 类**：基于红黑树实现的有序映射。\n11. **LinkedHashMap 类**：`HashMap`的链表版本，维护元素插入或访问顺序。\n12. **Hashtable 类**：与`HashMap`类似，但它是同步的，适用于多线程环境。\n13. **IdentityHashMap 类**：`HashMap`的变体，使用引用相等性而不是对象相等性。\n14. **WeakHashMap 类**：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。\n15. **Collections 类**：提供对集合的静态方法操作，如排序、搜索和修改。\n\n### 集合实现类特征图\n\n![image-20250216222117731](Java基础复盘/image-20250216222117731.png)\n\n## 十一、泛型\n\n一种语言特性，允许开发者在定义类，接口或方法时使用**类型参数**，从而**提高代码的复用性和灵活性**。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时**保持类型安全**。\n\n### **类型参数**\n\n类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。\n\n**类型参数的命名规范**\n\n- 通常使用单个大写字母表示类型参数，常见的有：\n  - `T`（Type）：表示任意类型。\n  - `E`（Element）：表示集合中的元素类型。\n  - `K`（Key）：表示键的类型。\n  - `V`（Value）：表示值的类型。\n  - `N`（Number）：表示数字类型。\n  - `S`、`U`、`V` 等：用于多个类型参数的区分。\n\n### **类型擦除**\n\nJava泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组\n\n```java\nBox<String>[] boxes = new Box<String>[10]; // 编译错误\n```\n\n但是可以通过强制类型转换创建\n\n```java\nBox<String>[] boxes = (Box<String>[]) new Box[10]; // 需要强制类型转换\n```\n\n### 类型限制\n\n1.**不能使用原始数据类型，只能使用包装类**\n\n2.**不能创建泛型的静态字段**，因为静态字段属于类，而泛型类型是实例相关的。\n\n```java\npublic class Box<T> {\n    private static T value; // 编译错误\n}\n```\n\n3.**不能实例化泛型类型参数**：\n\n```java\npublic class Box<T> {\n    public void set(T value) {\n        T newValue = new T(); // 编译错误\n    }\n}\n```\n\n### 通配符\n\n通配符（`?`）用于表示未知类型，分为无界通配符和有界通配符：\n\n1. **无界通配符**：\n\n   ```java\n   Box<?> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是未知的，可以是任何类型。\n\n2. **有界通配符**：\n\n   上界\n\n   ```java\n   Box<? extends Number> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Number` 或其子类。\n\n   ```java\n   List<String> stringList = new ArrayList<>();\n   List<? extends Object> objectList = stringList; // 协变\n   ```\n\n   下界\n\n   ```java\n   Box<? super Integer> box = new Box<>();\n   ```\n\n   表示 `Box` 的泛型类型是 `Integer` 或其父类。\n\n   ```java\n   List<Object> objectList = new ArrayList<>();\n   List<? super String> stringList = objectList; // 逆变\n   ```\n\n## 十二、反射\n\n啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。\n\n![image-20250220123104283](Java基础复盘/image-20250220123104283.png)\n\n### 获取对象\n\n```java\npackage com.dmw.basedemo.reflect;\n\npublic class Demo {\n    public static void main(String[] args) throws ClassNotFoundException {\n        /*\n        * 获取class对象的三种方式：\n        *   1.Class.forName(\"全类名\");\n        *   2.类名.class\n        *   3.对象.getClass();\n        * */\n\n        //第一种方式\n        //全类名：包名+类名\n        //最为常用\n        Class clazz1 = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n\n        //第二种方式\n        //一般用于传参\n        Class clazz2 = Student.class;\n\n        //第三种方式\n        //当我们已经有了这个类的对象时，才可以使用。\n        Student student = new Student();\n        Class clazz3 = student.getClass();\n\n        System.out.println(clazz1 == clazz2);\n        System.out.println(clazz1 == clazz3);\n    }\n}\n```\n\n![image-20250220122408100](Java基础复盘/image-20250220122408100.png)\n\n### 获取对象的构造方法\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Parameter;\n\npublic class Demo2Constructor {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        /*\n        * Class类中用于获取构造方法的方法\n        *   Constructor<?>[] getConstructors()获取公共的构造方法\n        *   Constructor<?>[] getDeclaredConstructors()获取所有构造方法\n        *   Constructor<?>[] getConstructor(Class<?>...parameterTypes)获取公共的某个构造方法\n        *   Constructor<?>[] getConstructors(Class<?>...parameterTypes)获取某个构造方法\n        * */\n\n        //1.获取class字节码文件对象\n        Class clazz= Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2获取构造方法\n        Constructor[] cons = clazz.getConstructors();\n        for(Constructor c : cons) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor[] cons1 = clazz.getDeclaredConstructors();\n        for(Constructor c : cons1) {\n            System.out.println(c);\n        }\n        System.out.println(\"---------------\");\n        Constructor cons2 = clazz.getDeclaredConstructor(int.class);\n        System.out.println(cons2);\n        System.out.println(\"---------------\");\n        Constructor cons3 = clazz.getDeclaredConstructor(String.class);\n        System.out.println(cons3);\n        System.out.println(\"---------------\");\n        Constructor cons4 = clazz.getDeclaredConstructor(String.class, int.class);\n        System.out.println(cons4);\n        System.out.println(\"---------------\");\n        //获取权限修饰符\n        int Modifiers = cons4.getModifiers();\n        System.out.println(Modifiers);//其中1为public，2为protected，4为private\n        System.out.println(\"---------------\");\n        //获取参数\n        Parameter[] parameters = cons4.getParameters();\n        for(Parameter p : parameters) {\n            System.out.println(p);\n        }\n        //暴力反射：表示临时取消权限校验\n        cons4.setAccessible(true);\n        //利用获取到的构造方法来构造对象\n        Student stu = (Student) cons4.newInstance(\"张三\", 23);\n        System.out.println(stu);\n    }\n}\n\n```\n\n![image-20250222225338830](Java基础复盘/image-20250222225338830.png)\n\n其中**权限修饰符常量字段值**如下\n\n![](Java基础复盘/image-20250222224835797.png)\n\n### 获取对象的成员变量\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.lang.reflect.Field;\n\npublic class Demo3Var {\n    /*\n    * Class类中用于获取成员变量的方法\n    * Field[] getFields();//返回所有公共成员变量对象的数组\n    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组\n    * Field getField(String name);//返回单个公共成员变量对象\n    * Field[] getDeclareField(String name);//返回单个成员变量对象\n    * */\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n        //1.获取class字节码文件对象\n        Class clazz = Class.forName(\"com.dmw.basedemo.reflect.Student\");\n        //2.获取所有的成员变量\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            System.out.println(field);\n        }\n\n        //获取单个的成员变量\n        Field age = clazz.getDeclaredField(\"age\");\n        age.setAccessible(true);\n        System.out.println(age);\n        //获取权限修饰符\n        int modifiers = age.getModifiers();\n        System.out.println(modifiers);\n        //获取成员变量的名字\n        String n = age.getName();\n        System.out.println(n);\n        //获取成员变量的类型\n        Class<?> type = age.getType();\n        System.out.println(type);\n        //获取成员变量记录的值\n        Student student = new Student(\"zhangsan\", 18);\n        age.setAccessible(true);\n        Object o = age.get(student);//获取student这个对象age记录的值\n        System.out.println(o);\n    }\n}\n```\n\n![image-20250223163956807](Java基础复盘/image-20250223163956807.png)\n\n### 获取对象中的成员方法\n\n```java\n/*\n* Class类中用于获取对象中的成员方法\n* Method[] getMethods();//获取当前类及其父类的所有公有方法。\n* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。\n* Method getMethod(String name, Class<?>... parameterTypes)：获取公有方法（包括父类方法）\n* Method getDeclaredMethod(String name, Class<?>... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。\n*\n* 调用方法\n* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：\n    obj是目标对象实例。即调用者\n    args是方法的参数。\n    如果目标方法是静态方法，则obj可以为null。\n* */\n```\n\n### 反射的使用\n\n**1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑**\n\n```\npackage com.dmw.basedemo.reflect;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\n\npublic class Demo5Application {\n\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)\n    public static void main(String[] args) throws IOException, IllegalAccessException {\n        Student s = new Student(\"dmw\",23);\n        saveObject(s);\n    }\n\n    public static void saveObject(Object o) throws IOException, IllegalAccessException {\n        //1.获取class字节码文件\n        Class c = o.getClass();\n        //2.创建IO流\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"src\\\\a.txt\"));\n        //3.获取所有的成员变量\n        Field[] fields = c.getDeclaredFields();\n        for (Field f : fields) {\n            f.setAccessible(true);\n            String name = f.getName();\n            Object value = f.get(o);\n            bw.write(name+\":\"+value);\n            bw.newLine();\n        }\n        bw.close();\n    }\n}\n```\n\n![image-20250223191142600](Java基础复盘/image-20250223191142600.png)\n\n**2.跟配置文件相结合动态的创建对象，并调用方法**\n\n```java\npackage com.dmw.basedemo.reflect;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Objects;\nimport java.util.Properties;\n\npublic class Demo6Application2 {\n    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        //1.读取配置文件的信息\n        Properties prop = new Properties();\n        FileInputStream fis = new FileInputStream(\"src/prop.properties\");\n        prop.load(fis);\n        fis.close();\n        System.out.println(prop);\n\n        //2.获取全类名和方法名\n        String className = (String) prop.get(\"classname\");\n        String methodName = (String) prop.get(\"method\");\n        System.out.println(className);\n        System.out.println(methodName);\n\n        //3.利用反射创建对象并运行方法\n        Class clazz = Class.forName(className);\n        //获取构造方法\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        Object o = constructor.newInstance();\n        System.out.println(o);\n        Method method = clazz.getDeclaredMethod(methodName);\n        method.setAccessible(true);\n        method.invoke(o);//利用构造方法创建的对象调用此方法\n    }\n}\n```\n\n```properties\nclassname=com.dmw.basedemo.reflect.Student\nmethod=study\n```\n\n![image-20250223200310462](Java基础复盘/image-20250223200310462.png)\n\n## 十三、枚举\n\n## 十四、I/O\n\n### 1.File类\n\n### 2.基础IO类和相关方法\n\n## 十五、注解\n\n## 十六、关于null的几种处理方式\n\n","slug":"Java基础复盘","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3dx000dm0ot6yy9cnq4","content":"<h2 id=\"一、Java概述\"><a href=\"#一、Java概述\" class=\"headerlink\" title=\"一、Java概述\"></a>一、Java概述</h2><h3 id=\"1-Java定义\"><a href=\"#1-Java定义\" class=\"headerlink\" title=\"1.Java定义\"></a>1.Java定义</h3><p>由Sun公司于1995发布的一种编程语言和计算平台。</p>\n<p>主要分为三个版本：JavaSE—标准版，JavaEE—企业版，JavaME—微型版。</p>\n<h3 id=\"2-Java特点\"><a href=\"#2-Java特点\" class=\"headerlink\" title=\"2.Java特点\"></a>2.Java特点</h3><p>1.<strong>面向对象</strong>，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。</p>\n<p>2.<strong>静态语言</strong>。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。</p>\n<p>3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。</p>\n<p>4.<strong>容易实现多线程</strong>。在用户空间中实现多线程。</p>\n<p>5.<strong>高性能</strong>。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。</p>\n<p>6.<strong>自动管理对象的生命周期</strong>。安全。</p>\n<p>7.功能强大和简单易用。</p>\n<h2 id=\"二、Java开发环境\"><a href=\"#二、Java开发环境\" class=\"headerlink\" title=\"二、Java开发环境\"></a>二、Java开发环境</h2><p>JDK包括jre和核心类库。jre包括jvm。</p>\n<p>jre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。</p>\n<h2 id=\"三、Java基础语法\"><a href=\"#三、Java基础语法\" class=\"headerlink\" title=\"三、Java基础语法\"></a>三、Java基础语法</h2><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h3><p>四类八种：</p>\n<p>1.整数型：<br>byte一个字节即8位(-128-127)，<br>short两个字节即16位(-32768-32767)，<br>int4个字节即32位(-2147283648-2147483647)，<br>long八个字节即64位(-9e18-9e18)—后加L</p>\n<p>2.浮点型：<br>float4字节即32位—精确到到小数点后六位—后加f，<br>double8字节即64位精确到小数点后15位—后加d。</p>\n<p>3.字符型：<br>char类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。</p>\n<p>4.布尔型Boolean类型：只有true或false。</p>\n<h3 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h3><p>1.大小写敏感</p>\n<p>2.类名采用大驼峰命名法(即MyClass类似的)</p>\n<p>3.包名小写(网址倒序)</p>\n<p>4方法名采用小驼峰命名法(即myFirstMethod类似的)</p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3.运算符\"></a>3.运算符</h3><p>1.<strong>赋值运算符’&#x3D;‘</strong>，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：</p>\n<ul>\n<li><p><strong>浅拷贝</strong>：复制对象的字段值，但引用类型的字段仍然指向同一个对象。</p>\n</li>\n<li><p><strong>深拷贝</strong>：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。</p>\n</li>\n</ul>\n<p>2.自增自减运算符：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250201135214019.png\"></p>\n<p>3.算数运算符与比较运算符和数学差不多</p>\n<p>4.逻辑运算符与数学差不多，按位运算符比较的是二进制位</p>\n<p>5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：</p>\n<p>​\t8&gt;&gt;1&#x3D;4;9&lt;&lt;2&#x3D;36;</p>\n<p>6.三元运算符：语法为：</p>\n<p>​\t<strong>条件表达式？表达式1：表达式2</strong></p>\n<p>条件表达式为true就调用表达式1，否则调用表达式2.</p>\n<h2 id=\"四、Java执行流程控制\"><a href=\"#四、Java执行流程控制\" class=\"headerlink\" title=\"四、Java执行流程控制\"></a>四、Java执行流程控制</h2><h3 id=\"1-条件语句\"><a href=\"#1-条件语句\" class=\"headerlink\" title=\"1.条件语句\"></a>1.条件语句</h3><p>1.if…else</p>\n<p><code>if(表达式) &#123;</code></p>\n<p>​\t<code>表达式为真执行；</code></p>\n<p><code>&#125;</code></p>\n<p><code>else &#123;</code></p>\n<p>​\t<code>否则执行</code></p>\n<p><code>&#125;</code></p>\n<p>2.switch用于小范围单个值</p>\n<p><code>switch(变量) &#123;</code></p>\n<p>​\t<code>case 值1：</code></p>\n<p>​\t\t<code>表达式1；</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>case 值2：</code></p>\n<p>​\t\t<code>表达式2：</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>......</code></p>\n<p>​\t<code>default：</code></p>\n<p>​\t\t<code>表达式n;</code></p>\n<p>​\t\t<code>break;</code></p>\n<p><code>&#125;</code></p>\n<p>注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的<code>case</code>开始执行，直到遇到<code>break</code>语句或<code>switch</code>块的末尾为止，而不会自动停止。</p>\n<h3 id=\"2-循环语句\"><a href=\"#2-循环语句\" class=\"headerlink\" title=\"2.循环语句\"></a>2.循环语句</h3><p>while，do…while，for和for-each</p>\n<p>while(表达式) {</p>\n<p>​\t为真执行并再次调用while()；</p>\n<p>}</p>\n<p>do {</p>\n<p>​\t第一次直接执行，后续满足表达式执行；</p>\n<p>}while(表达式)；</p>\n<p>for( 初始化;条件 ;步进 ) { 条件为真执行}</p>\n<p>for-each例如:</p>\n<p>​\tint array[]&#x3D;{1,2,3}</p>\n<p>​\tfor(auto arr: array) {</p>\n<p>​\t\tSystem.out.println(arr);</p>\n<p>​\t}</p>\n<p>打印数组。</p>\n<h3 id=\"3-跳转语句\"><a href=\"#3-跳转语句\" class=\"headerlink\" title=\"3.跳转语句\"></a>3.跳转语句</h3><p>有break，continue和return</p>\n<p>break用于退出当前循环</p>\n<p>continue用于退出当次循环进入下一次循环</p>\n<p>return直接结束本次函数调用</p>\n<h2 id=\"五、面向对象\"><a href=\"#五、面向对象\" class=\"headerlink\" title=\"五、面向对象\"></a>五、面向对象</h2><h3 id=\"1-类和对象\"><a href=\"#1-类和对象\" class=\"headerlink\" title=\"1.类和对象\"></a>1.类和对象</h3><p>类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。</p>\n<h3 id=\"2-对象的创建\"><a href=\"#2-对象的创建\" class=\"headerlink\" title=\"2.对象的创建\"></a>2.对象的创建</h3><p>1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：</p>\n<p><code>Car carKey；</code></p>\n<p>但是我们一般在创建对象引用时会同时把一个对象赋给它如：</p>\n<p><code>Car carKey = new Car();</code></p>\n<h3 id=\"3-属性和方法\"><a href=\"#3-属性和方法\" class=\"headerlink\" title=\"3.属性和方法\"></a>3.属性和方法</h3><p>属性也被称为字段，属性可以是对象，也可以是基本数据类型。</p>\n<p>方法也就是函数，意思是做某些事情。</p>\n<p>方法的示例：</p>\n<p>访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){</p>\n<p>​\t方法体;</p>\n<p>} </p>\n<p>如果没有指定修饰符默认同包访问权限(package-private)；</p>\n<h4 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"(1)构造方法\"></a>(1)构造方法</h4><p>构造方法也称构造器，构造函数，它是一种特殊的方法。</p>\n<p>特点：</p>\n<p>1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。</p>\n<p>2.它的方法名称必须和类名相同，</p>\n<p>3.没有返回值类型(连void都没有)。</p>\n<p>4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。</p>\n<p>5.可以重载，只要参数列表不同。</p>\n<p>6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。</p>\n<p>7.构造方法不能被继承或重写，但可以通过<code>super()</code>调用父类的构造方法。</p>\n<h4 id=\"2-方法重载\"><a href=\"#2-方法重载\" class=\"headerlink\" title=\"(2)方法重载\"></a>(2)方法重载</h4><p>方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。</p>\n<h4 id=\"3-方法的重写\"><a href=\"#3-方法的重写\" class=\"headerlink\" title=\"(3)方法的重写\"></a>(3)方法的重写</h4><p>方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。</p>\n<p>要实现方法重写，必须满足以下条件：</p>\n<ol>\n<li><strong>继承关系</strong>：子类必须继承父类。</li>\n<li><strong>方法名和参数列表相同</strong>：子类中的方法必须与父类中的方法具有相同的名称和参数列表。</li>\n<li><strong>返回值类型相同或兼容</strong>：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。</li>\n<li><strong>访问修饰符的限制</strong>：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是<code>public</code>，子类方法不能是<code>protected</code>或<code>private</code>。</li>\n<li><strong>异常声明的限制</strong>：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。</li>\n</ol>\n<h3 id=\"4-初始化\"><a href=\"#4-初始化\" class=\"headerlink\" title=\"4.初始化\"></a>4.初始化</h3><p>在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：</p>\n<h4 id=\"1-类的初始化\"><a href=\"#1-类的初始化\" class=\"headerlink\" title=\"(1) 类的初始化\"></a>(1) 类的初始化</h4><p>类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：</p>\n<ul>\n<li><strong>加载</strong>：将类的<code>.class</code>文件加载到JVM内存中。</li>\n<li><strong>连接</strong>：<ul>\n<li><strong>验证</strong>：检查类的结构是否正确，是否符合Java规范。</li>\n<li><strong>准备</strong>：为类的静态变量分配内存，并设置默认初始值。</li>\n<li><strong>解析</strong>：将类、接口、字段和方法的符号引用转换为直接引用。</li>\n</ul>\n</li>\n<li><strong>初始化</strong>：执行类构造器<code>&lt;clinit&gt;</code>方法，完成静态变量的赋值和静态代码块的执行。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(MyClass.staticVar); <span class=\"comment\">// 触发类的初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块执行</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-成员初始化\"><a href=\"#2-成员初始化\" class=\"headerlink\" title=\"(2) 成员初始化\"></a>(2) 成员初始化</h4><p>成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：</p>\n<ul>\n<li><strong>默认初始化</strong>：由JVM自动为成员变量赋予默认值。例如，<code>int</code>类型默认为<code>0</code>，<code>double</code>类型默认为<code>0.0</code>，<code>boolean</code>类型默认为<code>false</code>，对象引用类型默认为<code>null</code>。</li>\n<li><strong>显式初始化</strong>：在成员变量声明时直接赋值。</li>\n<li><strong>构造器初始化</strong>：通过构造器为成员变量赋值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> anotherVar; <span class=\"comment\">// 默认初始化为0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造器初始化\"><a href=\"#3-构造器初始化\" class=\"headerlink\" title=\"(3) 构造器初始化\"></a>(3) 构造器初始化</h4><p>构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。</p>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> instanceVar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        instanceVar = value; <span class=\"comment\">// 构造器初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(obj.instanceVar); <span class=\"comment\">// 输出100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-数组初始化\"><a href=\"#4-数组初始化\" class=\"headerlink\" title=\"(4) 数组初始化\"></a>(4) 数组初始化</h4><p>数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：</p>\n<ul>\n<li><strong>静态初始化</strong>：在声明数组时直接指定数组元素的值。</li>\n<li><strong>动态初始化</strong>：指定数组的长度，由JVM自动为数组元素赋予默认值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>]; <span class=\"comment\">// 默认初始化为0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-初始化顺序\"><a href=\"#5-初始化顺序\" class=\"headerlink\" title=\"(5) 初始化顺序\"></a>(5) 初始化顺序</h4><p>Java中对象的初始化顺序如下：</p>\n<ol>\n<li><strong>加载类</strong>：加载类的<code>.class</code>文件。</li>\n<li><strong>静态变量和静态方法块初始化</strong>：按照代码的顺序，先初始化静态变量，再执行静态代码块。</li>\n<li><strong>实例变量初始化</strong>：按照代码的顺序，先初始化实例变量，再执行实例代码块。</li>\n<li><strong>构造器初始化</strong>：执行构造器，为对象的成员变量赋值。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 静态变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实例代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 实例变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块1</span><br><span class=\"line\">静态代码块2</span><br><span class=\"line\">实例代码块1</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>类初始化</strong>：加载类、静态变量初始化和执行静态代码块。</li>\n<li><strong>成员初始化</strong>：包括默认初始化、显式初始化和构造器初始化。</li>\n<li><strong>构造器初始化</strong>：通过构造器为对象的成员变量赋值。</li>\n<li><strong>数组初始化</strong>：静态初始化和动态初始化。</li>\n<li><strong>初始化顺序</strong>：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。</li>\n</ul>\n<h3 id=\"5-对象的销毁\"><a href=\"#5-对象的销毁\" class=\"headerlink\" title=\"5.对象的销毁\"></a>5.对象的销毁</h3><p>Java和c&#x2F;c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由<strong>Java虚拟机</strong>进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。</p>\n<h4 id=\"1-对象作用域\"><a href=\"#1-对象作用域\" class=\"headerlink\" title=\"(1)对象作用域\"></a>(1)对象作用域</h4><p>绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。</p>\n<p><code>&#123;</code></p>\n<p>​\t<code>int a = 11;</code></p>\n<p>​\t<code>&#123;</code></p>\n<p>​\t\t<code>int b = 22;</code></p>\n<p>​\t<code>&#125;</code></p>\n<p><code>&#125;</code></p>\n<p>变量a会在两个{}中生效，而变量b只在自己的{}内生效。</p>\n<h4 id=\"2-this和super\"><a href=\"#2-this和super\" class=\"headerlink\" title=\"(2)this和super\"></a>(2)this和super</h4><p>二者都是关键字。</p>\n<p><strong>this</strong>作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。</p>\n<p>调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。<img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207203153099.png\"></p>\n<p>this用在构造方法时this(参数)需要放在第一行，否则编译不通过。</p>\n<p><strong>super</strong>可以调用父类的方法，属性，指向父类。其他同this。</p>\n<h2 id=\"六、访问控制权限\"><a href=\"#六、访问控制权限\" class=\"headerlink\" title=\"六、访问控制权限\"></a>六、访问控制权限</h2><p>访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。</p>\n<p>Java中成员的访问权限一共有四种，分别是public，protected，default，private。如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207211115238.png\" alt=\"image-20250207211115238\"></p>\n<h3 id=\"1-继承\"><a href=\"#1-继承\" class=\"headerlink\" title=\"1.继承\"></a>1.继承</h3><p>三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207212537344.png\" alt=\"image-20250207212537344\"></p>\n<p>继承的关键字是<strong>extends</strong>，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：</p>\n<p><code>class Father&#123;&#125;</code></p>\n<p><code>class Son extends Father&#123;&#125;</code></p>\n<p>子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2.多态\"></a>2.多态</h3><p>三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。</p>\n<p>如何实现多态？达成三个充要条件：</p>\n<ul>\n<li>继承</li>\n<li>重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n<p>比如以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat Fruit&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pear</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.num = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat&quot;</span>+num+<span class=\"string\">&quot;Pear&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuoTai</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pear</span>();</span><br><span class=\"line\">        fruit.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现main方法中Fruit fruit &#x3D; new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态-&gt;父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。</p>\n<h3 id=\"3-组合\"><a href=\"#3-组合\" class=\"headerlink\" title=\"3.组合\"></a>3.组合</h3><p>组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话<strong>多用组合，少用继承</strong>。二者关系如下：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207222214122.png\" alt=\"image-20250207222214122\"></p>\n<h3 id=\"4-动态代理\"><a href=\"#4-动态代理\" class=\"headerlink\" title=\"4.动态代理\"></a>4.动态代理</h3><p>为什么需要代理：代理可以无侵入式的给对象增加其他功能。</p>\n<p>代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220105056954.png\" alt=\"image-20250220105056954\"></p>\n<p>java如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223201954533.png\"></p>\n<p><strong>定义一个接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现该接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个<code>InvocationHandler</code>实现类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target; <span class=\"comment\">// 被代理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之前执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之后执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用<code>Proxy</code>生成代理对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建目标对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建InvocationHandler实例</span></span><br><span class=\"line\">        <span class=\"type\">MyInvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInvocationHandler</span>(target);</span><br><span class=\"line\">        <span class=\"comment\">// 生成代理对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (HelloService) Proxy.newProxyInstance(</span><br><span class=\"line\">                HelloService.class.getClassLoader(), <span class=\"comment\">// 目标类的类加载器</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>&lt;?&gt;[]&#123;HelloService.class&#125;, <span class=\"comment\">// 目标类实现的接口</span></span><br><span class=\"line\">                handler <span class=\"comment\">// InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的方法</span></span><br><span class=\"line\">        proxy.sayHello(<span class=\"string\">&quot;Kimi&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before calling: sayHello</span><br><span class=\"line\">Hello, Kimi!</span><br><span class=\"line\">After calling: sayHello</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-向上转型\"><a href=\"#5-向上转型\" class=\"headerlink\" title=\"5.向上转型\"></a>5.向上转型</h3><p>向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。</p>\n<p>向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。</p>\n<p>向下转型相反而且不是自动完成，需要强制指定。</p>\n<h3 id=\"6-statics\"><a href=\"#6-statics\" class=\"headerlink\" title=\"6.statics\"></a>6.statics</h3><p><code>static</code> 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 <code>static</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>静态变量</strong>：定义类的全局变量，所有实例共享。</li>\n<li><strong>静态方法</strong>：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。</li>\n<li><strong>静态初始化块</strong>：用于初始化静态变量，当类被加载时执行一次。提示程序性能。</li>\n</ul>\n<h3 id=\"7-final\"><a href=\"#7-final\" class=\"headerlink\" title=\"7.final\"></a>7.final</h3><p><code>final</code> 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 <code>final</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>最终变量</strong>：一旦被初始化，其值就不能被改变。</li>\n<li><strong>最终方法</strong>：不能被子类重写。</li>\n<li><strong>最终类</strong>：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。</li>\n</ul>\n<h2 id=\"七、接口和抽象类\"><a href=\"#七、接口和抽象类\" class=\"headerlink\" title=\"七、接口和抽象类\"></a>七、接口和抽象类</h2><p>在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于<strong>定义规范和提供代码复用</strong>，但它们在功能、用途和语法上有很大的区别。</p>\n<h3 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h3><ol>\n<li><strong>接口(Interface)</strong><ul>\n<li>接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 <code>public</code> 和 <code>abstract</code> 的，字段默认是 <code>public static final</code> 的。</li>\n<li>接口的目的是定义一组行为规范，<strong>任何实现了该接口的类都必须实现接口中定义的所有方法</strong>。</li>\n<li>接口可以被多个类实现，从而实现多继承的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类(Abstract Class)</strong><ul>\n<li>抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。</li>\n<li>抽象类的主要目的是<strong>为子类提供一个通用的模板</strong>，<strong>子类必须实现抽象类中的所有抽象方法</strong>。</li>\n<li>抽象类只能被单个类继承，不能实现多继承。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h3><ol>\n<li><strong>方法实现</strong><ul>\n<li><strong>接口</strong>：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(<code>default</code>)和静态方法(<code>static</code>)，但这些方法的使用场景相对有限。</li>\n<li><strong>抽象类</strong>：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。</li>\n</ul>\n</li>\n<li><strong>字段</strong><ul>\n<li><strong>接口</strong>：接口中的字段默认是 <code>public static final</code> 的，即常量。它们必须在声明时初始化，且不能被修改。</li>\n<li><strong>抽象类</strong>：抽象类可以包含普通字段(实例变量)，这些字段可以是 <code>public</code>、<code>protected</code> 或 <code>private</code> 的，也可以是静态的或非静态的。</li>\n</ul>\n</li>\n<li><strong>继承和实现</strong><ul>\n<li><strong>接口</strong>：一个类可以实现多个接口。这是实现多继承的一种方式。</li>\n<li><strong>抽象类</strong>：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。</li>\n</ul>\n</li>\n<li><strong>构造方法</strong><ul>\n<li><strong>接口</strong>：接口不能有构造方法，因为接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。</li>\n</ul>\n</li>\n<li><strong>实例化</strong><ul>\n<li><strong>接口</strong>：接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类也不能被实例化，但可以通过子类来实例化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h3><ol>\n<li><strong>接口</strong><ul>\n<li>当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 <code>Animal</code> 接口，其中包含 <code>eat()</code> 和 <code>move()</code> 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。</li>\n<li>当<strong>需要实现多继承时</strong>，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类</strong><ul>\n<li>当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 <code>Vehicle</code> 抽象类，其中包含 <code>move()</code> 抽象方法和一些通用字段(如 <code>speed</code>、<code>color</code> 等)，然后让 <code>Car</code>、<code>Bike</code> 等子类继承并实现具体的行为。</li>\n<li>当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八、异常\"><a href=\"#八、异常\" class=\"headerlink\" title=\"八、异常\"></a>八、异常</h2><p>Exception位于<strong>java.lang</strong>包下，它是一种顶级接口，继承于<strong>Throwable</strong>类，<strong>Throwable类是Java语言中所以错误(error)和异常(exception)类的父类</strong>。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。</p>\n<p>在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。</p>\n<h3 id=\"一、异常的分类\"><a href=\"#一、异常的分类\" class=\"headerlink\" title=\"一、异常的分类\"></a>一、异常的分类</h3><p>Java中的异常主要分为两大类：<strong>受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)</strong>。</p>\n<ol>\n<li><strong>受检查的异常(Checked Exception)</strong><ul>\n<li>这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(<code>FileNotFoundException</code>)、网络连接失败(<code>IOException</code>)等。</li>\n<li>受检查的异常必须在代码中显式处理，否则编译器会报错。</li>\n<li>受检查的异常继承自<code>Exception</code>类，但不包括<code>RuntimeException</code>及其子类。</li>\n</ul>\n</li>\n<li><strong>非受检查的异常(Unchecked Exception)</strong><ul>\n<li>这些异常是程序逻辑错误或运行时错误，例如空指针异常(<code>NullPointerException</code>)、数组越界异常(<code>ArrayIndexOutOfBoundsException</code>)等。</li>\n<li>非受检查的异常继承自<code>RuntimeException</code>类，编译器不会强制要求处理这些异常。</li>\n<li>但为了程序的健壮性，通常也会对这些异常进行捕获和处理。</li>\n</ul>\n</li>\n<li><strong>错误(Error)</strong><ul>\n<li>错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(<code>VirtualMachineError</code>)、线程死亡(<code>ThreadDeath</code>)等。</li>\n<li>错误继承自<code>Error</code>类，通常不需要程序员处理，因为它们通常表示系统级别的问题。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、异常处理机制\"><a href=\"#二、异常处理机制\" class=\"headerlink\" title=\"二、异常处理机制\"></a>二、异常处理机制</h3><p>Java提供了以下几种机制来处理异常：</p>\n<ol>\n<li><strong>try-catch</strong><ul>\n<li><code>try</code>块用于包裹可能会抛出异常的代码，<code>catch</code>块用于捕获和处理异常。</li>\n<li>可以有多个<code>catch</code>块来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><strong>finally</strong><ul>\n<li><code>finally</code>块用于在<code>try-catch</code>块执行完毕后执行清理操作，无论是否捕获到异常，<code>finally</code>块都会执行。</li>\n<li>常用于关闭文件流、释放资源等操作。</li>\n</ul>\n</li>\n<li><strong>throw</strong><ul>\n<li><code>throw</code>关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。</li>\n</ul>\n</li>\n<li><strong>throws</strong><ul>\n<li><code>throws</code>关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、异常处理的流程\"><a href=\"#三、异常处理的流程\" class=\"headerlink\" title=\"三、异常处理的流程\"></a>三、异常处理的流程</h3><ol>\n<li><strong>抛出异常</strong><ul>\n<li>当程序运行时遇到错误，会创建一个异常对象并抛出。</li>\n<li>异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。</li>\n</ul>\n</li>\n<li><strong>捕获异常</strong><ul>\n<li>使用<code>try-catch</code>块捕获异常，捕获到异常后可以在<code>catch</code>块中进行处理。</li>\n</ul>\n</li>\n<li><strong>处理异常</strong><ul>\n<li>在<code>catch</code>块中可以记录日志、提示用户、尝试恢复等操作。</li>\n</ul>\n</li>\n<li><strong>清理资源</strong><ul>\n<li>使用<code>finally</code>块进行资源清理，确保资源被正确释放。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、示例代码\"><a href=\"#四、示例代码\" class=\"headerlink\" title=\"四、示例代码\"></a>四、示例代码</h3><p>以下是一个简单的Java异常处理示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可能会抛出异常的代码</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Result: &quot;</span> + result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理特定类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获其他类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;General Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否捕获到异常，finally块都会执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Finally block executed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;Division by zero is not allowed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、自定义异常\"><a href=\"#五、自定义异常\" class=\"headerlink\" title=\"五、自定义异常\"></a>五、自定义异常</h3><p>Java允许程序员定义自己的异常类，自定义异常类通常继承自<code>Exception</code>类或其子类。自定义异常可以提供更具体的错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCustomException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyCustomException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            checkAge(<span class=\"number\">15</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyCustomException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Caught custom exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> <span class=\"keyword\">throws</span> MyCustomException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCustomException</span>(<span class=\"string\">&quot;Age must be at least 18.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age is valid.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、如何实践\"><a href=\"#六、如何实践\" class=\"headerlink\" title=\"六、如何实践\"></a>六、如何实践</h3><ol>\n<li><strong>明确异常的用途</strong><ul>\n<li>受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。</li>\n</ul>\n</li>\n<li><strong>合理使用<code>try-catch</code></strong><ul>\n<li>不要捕获所有异常，只捕获需要处理的异常。</li>\n</ul>\n</li>\n<li><strong>避免空的<code>catch</code>块</strong><ul>\n<li>捕获异常后应该进行处理，而不是忽略异常。</li>\n</ul>\n</li>\n<li><strong>使用<code>finally</code>块清理资源</strong><ul>\n<li>确保资源被正确释放，避免资源泄漏。</li>\n</ul>\n</li>\n<li><strong>自定义异常</strong><ul>\n<li>当系统提供的异常类不足以描述错误时，可以定义自定义异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"七、异常处理的优缺点\"><a href=\"#七、异常处理的优缺点\" class=\"headerlink\" title=\"七、异常处理的优缺点\"></a>七、异常处理的优缺点</h3><p><strong>优点</strong></p>\n<ul>\n<li>提高程序的健壮性，避免程序因错误而崩溃。</li>\n<li>提供详细的错误信息，方便调试和修复。</li>\n<li>可以通过异常处理机制实现程序的容错机制。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。</li>\n<li>如果滥用异常处理机制，可能会导致程序性能下降。</li>\n</ul>\n<p>总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。</p>\n<h2 id=\"九、内部类\"><a href=\"#九、内部类\" class=\"headerlink\" title=\"九、内部类\"></a>九、内部类</h2><p>写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。</p>\n<h3 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h3><p><strong>1.实现多继承</strong>，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。</p>\n<p>2.<strong>实现回调机制</strong>，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。</p>\n<p>3.<strong>封装逻辑</strong>，避免暴露具体实现。</p>\n<p>内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。</p>\n<p>普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>(); <span class=\"comment\">// 创建内部类实例</span></span><br></pre></td></tr></table></figure>\n\n<p>匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyInterface</span> <span class=\"variable\">mi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInterface</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Anonymous inner class&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        mi.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、集合\"><a href=\"#十、集合\" class=\"headerlink\" title=\"十、集合\"></a>十、集合</h2><h3 id=\"collections框架图\"><a href=\"#collections框架图\" class=\"headerlink\" title=\"collections框架图\"></a>collections框架图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216221349436.png\" alt=\"image-20250216221349436\"></p>\n<h3 id=\"iterable接口\"><a href=\"#iterable接口\" class=\"headerlink\" title=\"iterable接口\"></a>iterable接口</h3><p>定义了一种方法<code>iterator()</code>，允许以统一的方式(增强for)遍历集合。</p>\n<h3 id=\"顶层接口\"><a href=\"#顶层接口\" class=\"headerlink\" title=\"顶层接口\"></a>顶层接口</h3><p><strong>Collection</strong> 是一个顶层接口，它主要用来定义集合的约定<br><strong>List</strong>接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类<br><strong>Set</strong>接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。</p>\n<p><strong>Queue</strong>是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。</p>\n<p>SortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。</p>\n<p>Map是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。</p>\n<h3 id=\"类-数据结构\"><a href=\"#类-数据结构\" class=\"headerlink\" title=\"类(数据结构)\"></a>类(数据结构)</h3><ol>\n<li><strong>ArrayList</strong>：动态数组实现的列表，支持快速随机访问。</li>\n<li><strong>Vector</strong>：与<code>ArrayList</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>LinkedList 类</strong>：双向链表实现的列表，支持快速插入和删除。</li>\n<li><strong>Stack</strong>：后进先出（LIFO）的栈，基于<code>Vector</code>实现。</li>\n<li><strong>HashSet</strong>：基于哈希表实现的集合，不允许重复元素。</li>\n<li><strong>TreeSet</strong>：基于红黑树实现的有序集合。</li>\n<li><strong>LinkedHashSet 类</strong>：<code>HashSet</code>的链表版本，维护元素插入顺序。</li>\n<li><strong>PriorityQueue</strong>：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。</li>\n<li><strong>HashMap</strong>：基于哈希表实现的映射，允许一个null键和多个null值。</li>\n<li><strong>TreeMap 类</strong>：基于红黑树实现的有序映射。</li>\n<li><strong>LinkedHashMap 类</strong>：<code>HashMap</code>的链表版本，维护元素插入或访问顺序。</li>\n<li><strong>Hashtable 类</strong>：与<code>HashMap</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>IdentityHashMap 类</strong>：<code>HashMap</code>的变体，使用引用相等性而不是对象相等性。</li>\n<li><strong>WeakHashMap 类</strong>：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。</li>\n<li><strong>Collections 类</strong>：提供对集合的静态方法操作，如排序、搜索和修改。</li>\n</ol>\n<h3 id=\"集合实现类特征图\"><a href=\"#集合实现类特征图\" class=\"headerlink\" title=\"集合实现类特征图\"></a>集合实现类特征图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216222117731.png\" alt=\"image-20250216222117731\"></p>\n<h2 id=\"十一、泛型\"><a href=\"#十一、泛型\" class=\"headerlink\" title=\"十一、泛型\"></a>十一、泛型</h2><p>一种语言特性，允许开发者在定义类，接口或方法时使用<strong>类型参数</strong>，从而<strong>提高代码的复用性和灵活性</strong>。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时<strong>保持类型安全</strong>。</p>\n<h3 id=\"类型参数\"><a href=\"#类型参数\" class=\"headerlink\" title=\"类型参数\"></a><strong>类型参数</strong></h3><p>类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。</p>\n<p><strong>类型参数的命名规范</strong></p>\n<ul>\n<li>通常使用单个大写字母表示类型参数，常见的有：<ul>\n<li><code>T</code>（Type）：表示任意类型。</li>\n<li><code>E</code>（Element）：表示集合中的元素类型。</li>\n<li><code>K</code>（Key）：表示键的类型。</li>\n<li><code>V</code>（Value）：表示值的类型。</li>\n<li><code>N</code>（Number）：表示数字类型。</li>\n<li><code>S</code>、<code>U</code>、<code>V</code> 等：用于多个类型参数的区分。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a><strong>类型擦除</strong></h3><p>Java泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;String&gt;[<span class=\"number\">10</span>]; <span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n\n<p>但是可以通过强制类型转换创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = (Box&lt;String&gt;[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 需要强制类型转换</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型限制\"><a href=\"#类型限制\" class=\"headerlink\" title=\"类型限制\"></a>类型限制</h3><p>1.<strong>不能使用原始数据类型，只能使用包装类</strong></p>\n<p>2.<strong>不能创建泛型的静态字段</strong>，因为静态字段属于类，而泛型类型是实例相关的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T value; <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>不能实例化泛型类型参数</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">T</span>(); <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><p>通配符（<code>?</code>）用于表示未知类型，分为无界通配符和有界通配符：</p>\n<ol>\n<li><p><strong>无界通配符</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;?&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是未知的，可以是任何类型。</p>\n</li>\n<li><p><strong>有界通配符</strong>：</p>\n<p>上界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Number</code> 或其子类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&gt; objectList = stringList; <span class=\"comment\">// 协变</span></span><br></pre></td></tr></table></figure>\n\n<p>下界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"built_in\">super</span> Integer&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Integer</code> 或其父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; objectList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"built_in\">super</span> String&gt; stringList = objectList; <span class=\"comment\">// 逆变</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"十二、反射\"><a href=\"#十二、反射\" class=\"headerlink\" title=\"十二、反射\"></a>十二、反射</h2><p>啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220123104283.png\" alt=\"image-20250220123104283\"></p>\n<h3 id=\"获取对象\"><a href=\"#获取对象\" class=\"headerlink\" title=\"获取对象\"></a>获取对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 获取class对象的三种方式：</span></span><br><span class=\"line\"><span class=\"comment\">        *   1.Class.forName(&quot;全类名&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        *   2.类名.class</span></span><br><span class=\"line\"><span class=\"comment\">        *   3.对象.getClass();</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//全类名：包名+类名</span></span><br><span class=\"line\">        <span class=\"comment\">//最为常用</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第二种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//一般用于传参</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Student.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第三种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//当我们已经有了这个类的对象时，才可以使用。</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> student.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(clazz1 == clazz2);</span><br><span class=\"line\">        System.out.println(clazz1 == clazz3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220122408100.png\" alt=\"image-20250220122408100\"></p>\n<h3 id=\"获取对象的构造方法\"><a href=\"#获取对象的构造方法\" class=\"headerlink\" title=\"获取对象的构造方法\"></a>获取对象的构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Constructor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Class类中用于获取构造方法的方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors()获取公共的构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getDeclaredConstructors()获取所有构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructor(Class&lt;?&gt;...parameterTypes)获取公共的某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors(Class&lt;?&gt;...parameterTypes)获取某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        Class clazz= Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2获取构造方法</span></span><br><span class=\"line\">        Constructor[] cons = clazz.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        Constructor[] cons1 = clazz.getDeclaredConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons1) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons2</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons3</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        System.out.println(cons3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons4</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons4);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">Modifiers</span> <span class=\"operator\">=</span> cons4.getModifiers();</span><br><span class=\"line\">        System.out.println(Modifiers);<span class=\"comment\">//其中1为public，2为protected，4为private</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">        Parameter[] parameters = cons4.getParameters();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Parameter p : parameters) &#123;</span><br><span class=\"line\">            System.out.println(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//暴力反射：表示临时取消权限校验</span></span><br><span class=\"line\">        cons4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//利用获取到的构造方法来构造对象</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> (Student) cons4.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        System.out.println(stu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222225338830.png\" alt=\"image-20250222225338830\"></p>\n<p>其中<strong>权限修饰符常量字段值</strong>如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222224835797.png\"></p>\n<h3 id=\"获取对象的成员变量\"><a href=\"#获取对象的成员变量\" class=\"headerlink\" title=\"获取对象的成员变量\"></a>获取对象的成员变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3Var</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Class类中用于获取成员变量的方法</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getFields();//返回所有公共成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field getField(String name);//返回单个公共成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclareField(String name);//返回单个成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.获取所有的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            System.out.println(field);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取单个的成员变量</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> clazz.getDeclaredField(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">modifiers</span> <span class=\"operator\">=</span> age.getModifiers();</span><br><span class=\"line\">        System.out.println(modifiers);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的名字</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> age.getName();</span><br><span class=\"line\">        System.out.println(n);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的类型</span></span><br><span class=\"line\">        Class&lt;?&gt; type = age.getType();</span><br><span class=\"line\">        System.out.println(type);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量记录的值</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> age.get(student);<span class=\"comment\">//获取student这个对象age记录的值</span></span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223163956807.png\" alt=\"image-20250223163956807\"></p>\n<h3 id=\"获取对象中的成员方法\"><a href=\"#获取对象中的成员方法\" class=\"headerlink\" title=\"获取对象中的成员方法\"></a>获取对象中的成员方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* Class类中用于获取对象中的成员方法</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getMethods();//获取当前类及其父类的所有公有方法。</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。</span></span><br><span class=\"line\"><span class=\"comment\">* Method getMethod(String name, Class&lt;?&gt;... parameterTypes)：获取公有方法（包括父类方法）</span></span><br><span class=\"line\"><span class=\"comment\">* Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：</span></span><br><span class=\"line\"><span class=\"comment\">    obj是目标对象实例。即调用者</span></span><br><span class=\"line\"><span class=\"comment\">    args是方法的参数。</span></span><br><span class=\"line\"><span class=\"comment\">    如果目标方法是静态方法，则obj可以为null。</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反射的使用\"><a href=\"#反射的使用\" class=\"headerlink\" title=\"反射的使用\"></a>反射的使用</h3><p><strong>1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Demo5Application &#123;</span><br><span class=\"line\">\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)</span><br><span class=\"line\">    public static void main(String[] args) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        Student s = new Student(&quot;dmw&quot;,23);</span><br><span class=\"line\">        saveObject(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void saveObject(Object o) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        //1.获取class字节码文件</span><br><span class=\"line\">        Class c = o.getClass();</span><br><span class=\"line\">        //2.创建IO流</span><br><span class=\"line\">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;src\\\\a.txt&quot;));</span><br><span class=\"line\">        //3.获取所有的成员变量</span><br><span class=\"line\">        Field[] fields = c.getDeclaredFields();</span><br><span class=\"line\">        for (Field f : fields) &#123;</span><br><span class=\"line\">            f.setAccessible(true);</span><br><span class=\"line\">            String name = f.getName();</span><br><span class=\"line\">            Object value = f.get(o);</span><br><span class=\"line\">            bw.write(name+&quot;:&quot;+value);</span><br><span class=\"line\">            bw.newLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bw.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223191142600.png\" alt=\"image-20250223191142600\"></p>\n<p><strong>2.跟配置文件相结合动态的创建对象，并调用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo6Application2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.读取配置文件的信息</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src/prop.properties&quot;</span>);</span><br><span class=\"line\">        prop.load(fis);</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">        System.out.println(prop);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.获取全类名和方法名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;classname&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;method&quot;</span>);</span><br><span class=\"line\">        System.out.println(className);</span><br><span class=\"line\">        System.out.println(methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.利用反射创建对象并运行方法</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\">        <span class=\"comment\">//获取构造方法</span></span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(methodName);</span><br><span class=\"line\">        method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        method.invoke(o);<span class=\"comment\">//利用构造方法创建的对象调用此方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">classname</span>=<span class=\"string\">com.dmw.basedemo.reflect.Student</span></span><br><span class=\"line\"><span class=\"attr\">method</span>=<span class=\"string\">study</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223200310462.png\" alt=\"image-20250223200310462\"></p>\n<h2 id=\"十三、枚举\"><a href=\"#十三、枚举\" class=\"headerlink\" title=\"十三、枚举\"></a>十三、枚举</h2><h2 id=\"十四、I-O\"><a href=\"#十四、I-O\" class=\"headerlink\" title=\"十四、I&#x2F;O\"></a>十四、I&#x2F;O</h2><h3 id=\"1-File类\"><a href=\"#1-File类\" class=\"headerlink\" title=\"1.File类\"></a>1.File类</h3><h3 id=\"2-基础IO类和相关方法\"><a href=\"#2-基础IO类和相关方法\" class=\"headerlink\" title=\"2.基础IO类和相关方法\"></a>2.基础IO类和相关方法</h3><h2 id=\"十五、注解\"><a href=\"#十五、注解\" class=\"headerlink\" title=\"十五、注解\"></a>十五、注解</h2><h2 id=\"十六、关于null的几种处理方式\"><a href=\"#十六、关于null的几种处理方式\" class=\"headerlink\" title=\"十六、关于null的几种处理方式\"></a>十六、关于null的几种处理方式</h2>","excerpt":"","more":"<h2 id=\"一、Java概述\"><a href=\"#一、Java概述\" class=\"headerlink\" title=\"一、Java概述\"></a>一、Java概述</h2><h3 id=\"1-Java定义\"><a href=\"#1-Java定义\" class=\"headerlink\" title=\"1.Java定义\"></a>1.Java定义</h3><p>由Sun公司于1995发布的一种编程语言和计算平台。</p>\n<p>主要分为三个版本：JavaSE—标准版，JavaEE—企业版，JavaME—微型版。</p>\n<h3 id=\"2-Java特点\"><a href=\"#2-Java特点\" class=\"headerlink\" title=\"2.Java特点\"></a>2.Java特点</h3><p>1.<strong>面向对象</strong>，即将现实世界抽象成一个一个的对象，把相关的数据和方法当作一个整体来看待。</p>\n<p>2.<strong>静态语言</strong>。强类型语言。静态语言执行效率比动态语言高，速度更快。而动态语言能够用更少的代码实现相同的功能，程序员编码效率高。</p>\n<p>3.**跨平台和可移植性。**已编译的Java程序依靠JVM实现在不同平台能够直接运行。</p>\n<p>4.<strong>容易实现多线程</strong>。在用户空间中实现多线程。</p>\n<p>5.<strong>高性能</strong>。不仅支持解释执行，有些JVM(Hotspot JVM)还支持编译执行。</p>\n<p>6.<strong>自动管理对象的生命周期</strong>。安全。</p>\n<p>7.功能强大和简单易用。</p>\n<h2 id=\"二、Java开发环境\"><a href=\"#二、Java开发环境\" class=\"headerlink\" title=\"二、Java开发环境\"></a>二、Java开发环境</h2><p>JDK包括jre和核心类库。jre包括jvm。</p>\n<p>jre是java运行环境，如果只是需要运行普通的java程序，只要安装jre即可。</p>\n<h2 id=\"三、Java基础语法\"><a href=\"#三、Java基础语法\" class=\"headerlink\" title=\"三、Java基础语法\"></a>三、Java基础语法</h2><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h3><p>四类八种：</p>\n<p>1.整数型：<br>byte一个字节即8位(-128-127)，<br>short两个字节即16位(-32768-32767)，<br>int4个字节即32位(-2147283648-2147483647)，<br>long八个字节即64位(-9e18-9e18)—后加L</p>\n<p>2.浮点型：<br>float4字节即32位—精确到到小数点后六位—后加f，<br>double8字节即64位精确到小数点后15位—后加d。</p>\n<p>3.字符型：<br>char类型是一个单一的16位Unicode字符，最小值(\\u0000)也就是0，最大值\\uffff即65535。</p>\n<p>4.布尔型Boolean类型：只有true或false。</p>\n<h3 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h3><p>1.大小写敏感</p>\n<p>2.类名采用大驼峰命名法(即MyClass类似的)</p>\n<p>3.包名小写(网址倒序)</p>\n<p>4方法名采用小驼峰命名法(即myFirstMethod类似的)</p>\n<h3 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3.运算符\"></a>3.运算符</h3><p>1.<strong>赋值运算符’&#x3D;‘</strong>，一般来说右值赋值给明确变量类型的左值就行。但是对象的赋值一般来说其实赋的是对象的引用，当一个对象的引用被赋值给另一个引用变量时，两个引用变量指向同一个对象。当然对象的赋值还有其他方式：</p>\n<ul>\n<li><p><strong>浅拷贝</strong>：复制对象的字段值，但引用类型的字段仍然指向同一个对象。</p>\n</li>\n<li><p><strong>深拷贝</strong>：递归复制对象及其引用类型的字段所指向的对象，创建一个完全独立的对象。</p>\n</li>\n</ul>\n<p>2.自增自减运算符：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250201135214019.png\"></p>\n<p>3.算数运算符与比较运算符和数学差不多</p>\n<p>4.逻辑运算符与数学差不多，按位运算符比较的是二进制位</p>\n<p>5.移位运算符是将某个操作数向某个方向移动指定的二进制位数例如：</p>\n<p>​\t8&gt;&gt;1&#x3D;4;9&lt;&lt;2&#x3D;36;</p>\n<p>6.三元运算符：语法为：</p>\n<p>​\t<strong>条件表达式？表达式1：表达式2</strong></p>\n<p>条件表达式为true就调用表达式1，否则调用表达式2.</p>\n<h2 id=\"四、Java执行流程控制\"><a href=\"#四、Java执行流程控制\" class=\"headerlink\" title=\"四、Java执行流程控制\"></a>四、Java执行流程控制</h2><h3 id=\"1-条件语句\"><a href=\"#1-条件语句\" class=\"headerlink\" title=\"1.条件语句\"></a>1.条件语句</h3><p>1.if…else</p>\n<p><code>if(表达式) &#123;</code></p>\n<p>​\t<code>表达式为真执行；</code></p>\n<p><code>&#125;</code></p>\n<p><code>else &#123;</code></p>\n<p>​\t<code>否则执行</code></p>\n<p><code>&#125;</code></p>\n<p>2.switch用于小范围单个值</p>\n<p><code>switch(变量) &#123;</code></p>\n<p>​\t<code>case 值1：</code></p>\n<p>​\t\t<code>表达式1；</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>case 值2：</code></p>\n<p>​\t\t<code>表达式2：</code></p>\n<p>​\t\t<code>break；</code></p>\n<p>​\t<code>......</code></p>\n<p>​\t<code>default：</code></p>\n<p>​\t\t<code>表达式n;</code></p>\n<p>​\t\t<code>break;</code></p>\n<p><code>&#125;</code></p>\n<p>注意：不要忘记加每个case的表达式后加上break，否则会发生**“穿透”(fall-through)**现象。这意味着程序会从匹配的<code>case</code>开始执行，直到遇到<code>break</code>语句或<code>switch</code>块的末尾为止，而不会自动停止。</p>\n<h3 id=\"2-循环语句\"><a href=\"#2-循环语句\" class=\"headerlink\" title=\"2.循环语句\"></a>2.循环语句</h3><p>while，do…while，for和for-each</p>\n<p>while(表达式) {</p>\n<p>​\t为真执行并再次调用while()；</p>\n<p>}</p>\n<p>do {</p>\n<p>​\t第一次直接执行，后续满足表达式执行；</p>\n<p>}while(表达式)；</p>\n<p>for( 初始化;条件 ;步进 ) { 条件为真执行}</p>\n<p>for-each例如:</p>\n<p>​\tint array[]&#x3D;{1,2,3}</p>\n<p>​\tfor(auto arr: array) {</p>\n<p>​\t\tSystem.out.println(arr);</p>\n<p>​\t}</p>\n<p>打印数组。</p>\n<h3 id=\"3-跳转语句\"><a href=\"#3-跳转语句\" class=\"headerlink\" title=\"3.跳转语句\"></a>3.跳转语句</h3><p>有break，continue和return</p>\n<p>break用于退出当前循环</p>\n<p>continue用于退出当次循环进入下一次循环</p>\n<p>return直接结束本次函数调用</p>\n<h2 id=\"五、面向对象\"><a href=\"#五、面向对象\" class=\"headerlink\" title=\"五、面向对象\"></a>五、面向对象</h2><h3 id=\"1-类和对象\"><a href=\"#1-类和对象\" class=\"headerlink\" title=\"1.类和对象\"></a>1.类和对象</h3><p>类是对象的模板，有属性和方法，对象是类的具体体现，可以操作属性和方法。</p>\n<h3 id=\"2-对象的创建\"><a href=\"#2-对象的创建\" class=\"headerlink\" title=\"2.对象的创建\"></a>2.对象的创建</h3><p>1.在java中万事万物皆对象，但是我们操纵的确是一个个对象的引用(reference)。这个引用可以独立存在如：</p>\n<p><code>Car carKey；</code></p>\n<p>但是我们一般在创建对象引用时会同时把一个对象赋给它如：</p>\n<p><code>Car carKey = new Car();</code></p>\n<h3 id=\"3-属性和方法\"><a href=\"#3-属性和方法\" class=\"headerlink\" title=\"3.属性和方法\"></a>3.属性和方法</h3><p>属性也被称为字段，属性可以是对象，也可以是基本数据类型。</p>\n<p>方法也就是函数，意思是做某些事情。</p>\n<p>方法的示例：</p>\n<p>访问修饰符(public等)(其他修饰符static等)返回值类型 方法名称(参数列表){</p>\n<p>​\t方法体;</p>\n<p>} </p>\n<p>如果没有指定修饰符默认同包访问权限(package-private)；</p>\n<h4 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"(1)构造方法\"></a>(1)构造方法</h4><p>构造方法也称构造器，构造函数，它是一种特殊的方法。</p>\n<p>特点：</p>\n<p>1.用于在创建对象的时候初始化对象，给对象的字段赋初始值。</p>\n<p>2.它的方法名称必须和类名相同，</p>\n<p>3.没有返回值类型(连void都没有)。</p>\n<p>4.如果定义类的时候没有定义构造方法，Java编译器会自动提供一个无参构造方法，将所有字段初始化为默认值。</p>\n<p>5.可以重载，只要参数列表不同。</p>\n<p>6.自动调用，在使用new关键字创建对象时，Java自动调用相应的构造方法来初始化对象。</p>\n<p>7.构造方法不能被继承或重写，但可以通过<code>super()</code>调用父类的构造方法。</p>\n<h4 id=\"2-方法重载\"><a href=\"#2-方法重载\" class=\"headerlink\" title=\"(2)方法重载\"></a>(2)方法重载</h4><p>方法重载是一种允许类中出现多个同名方法的技术，这些方法的参数列表必须不同。具体调用哪个方法取决于传递的参数类型和数量。</p>\n<h4 id=\"3-方法的重写\"><a href=\"#3-方法的重写\" class=\"headerlink\" title=\"(3)方法的重写\"></a>(3)方法的重写</h4><p>方法重写是一种面向对象编程中的多态特性，允许子类提供一个与父类同名且参数列表相同的实例方法。通过方法重写，子类可以覆盖父类的方法实现，从而提供自己的行为逻辑。</p>\n<p>要实现方法重写，必须满足以下条件：</p>\n<ol>\n<li><strong>继承关系</strong>：子类必须继承父类。</li>\n<li><strong>方法名和参数列表相同</strong>：子类中的方法必须与父类中的方法具有相同的名称和参数列表。</li>\n<li><strong>返回值类型相同或兼容</strong>：子类方法的返回值类型必须与父类方法的返回值类型相同，或者返回值类型是父类返回值类型的子类(协变返回类型)。</li>\n<li><strong>访问修饰符的限制</strong>：子类方法的访问修饰符不能比父类方法的访问修饰符更严格。例如，如果父类方法是<code>public</code>，子类方法不能是<code>protected</code>或<code>private</code>。</li>\n<li><strong>异常声明的限制</strong>：子类方法声明的异常不能比父类方法声明的异常更宽泛。子类方法可以声明父类方法声明的异常，或者声明父类方法声明异常的子类，或者不声明异常。</li>\n</ol>\n<h3 id=\"4-初始化\"><a href=\"#4-初始化\" class=\"headerlink\" title=\"4.初始化\"></a>4.初始化</h3><p>在Java中，初始化是一个重要的概念，它涉及到类、成员变量、构造器、数组等的初始化过程。以下是详细的解释：</p>\n<h4 id=\"1-类的初始化\"><a href=\"#1-类的初始化\" class=\"headerlink\" title=\"(1) 类的初始化\"></a>(1) 类的初始化</h4><p>类的初始化是指在类加载到JVM(Java虚拟机)后，首次主动使用该类时，对其进行初始化的过程。类的初始化主要包括以下步骤：</p>\n<ul>\n<li><strong>加载</strong>：将类的<code>.class</code>文件加载到JVM内存中。</li>\n<li><strong>连接</strong>：<ul>\n<li><strong>验证</strong>：检查类的结构是否正确，是否符合Java规范。</li>\n<li><strong>准备</strong>：为类的静态变量分配内存，并设置默认初始值。</li>\n<li><strong>解析</strong>：将类、接口、字段和方法的符号引用转换为直接引用。</li>\n</ul>\n</li>\n<li><strong>初始化</strong>：执行类构造器<code>&lt;clinit&gt;</code>方法，完成静态变量的赋值和静态代码块的执行。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(MyClass.staticVar); <span class=\"comment\">// 触发类的初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块执行</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-成员初始化\"><a href=\"#2-成员初始化\" class=\"headerlink\" title=\"(2) 成员初始化\"></a>(2) 成员初始化</h4><p>成员初始化是指对类的成员变量(包括实例变量和静态变量)进行初始化。成员变量的初始化方式有以下几种：</p>\n<ul>\n<li><strong>默认初始化</strong>：由JVM自动为成员变量赋予默认值。例如，<code>int</code>类型默认为<code>0</code>，<code>double</code>类型默认为<code>0.0</code>，<code>boolean</code>类型默认为<code>false</code>，对象引用类型默认为<code>null</code>。</li>\n<li><strong>显式初始化</strong>：在成员变量声明时直接赋值。</li>\n<li><strong>构造器初始化</strong>：通过构造器为成员变量赋值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 显式初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> anotherVar; <span class=\"comment\">// 默认初始化为0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-构造器初始化\"><a href=\"#3-构造器初始化\" class=\"headerlink\" title=\"(3) 构造器初始化\"></a>(3) 构造器初始化</h4><p>构造器初始化是指通过构造器为对象的成员变量赋值。构造器是类的特殊方法，用于创建对象时初始化对象的状态。</p>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> instanceVar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        instanceVar = value; <span class=\"comment\">// 构造器初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(obj.instanceVar); <span class=\"comment\">// 输出100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-数组初始化\"><a href=\"#4-数组初始化\" class=\"headerlink\" title=\"(4) 数组初始化\"></a>(4) 数组初始化</h4><p>数组初始化是指为数组分配内存并为数组元素赋值。数组初始化有以下两种方式：</p>\n<ul>\n<li><strong>静态初始化</strong>：在声明数组时直接指定数组元素的值。</li>\n<li><strong>动态初始化</strong>：指定数组的长度，由JVM自动为数组元素赋予默认值。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>]; <span class=\"comment\">// 默认初始化为0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-初始化顺序\"><a href=\"#5-初始化顺序\" class=\"headerlink\" title=\"(5) 初始化顺序\"></a>(5) 初始化顺序</h4><p>Java中对象的初始化顺序如下：</p>\n<ol>\n<li><strong>加载类</strong>：加载类的<code>.class</code>文件。</li>\n<li><strong>静态变量和静态方法块初始化</strong>：按照代码的顺序，先初始化静态变量，再执行静态代码块。</li>\n<li><strong>实例变量初始化</strong>：按照代码的顺序，先初始化实例变量，再执行实例代码块。</li>\n<li><strong>构造器初始化</strong>：执行构造器，为对象的成员变量赋值。</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<p>java复制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">staticVar</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 静态变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实例代码块1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">instanceVar</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"comment\">// 实例变量初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块1</span><br><span class=\"line\">静态代码块2</span><br><span class=\"line\">实例代码块1</span><br><span class=\"line\">构造器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>类初始化</strong>：加载类、静态变量初始化和执行静态代码块。</li>\n<li><strong>成员初始化</strong>：包括默认初始化、显式初始化和构造器初始化。</li>\n<li><strong>构造器初始化</strong>：通过构造器为对象的成员变量赋值。</li>\n<li><strong>数组初始化</strong>：静态初始化和动态初始化。</li>\n<li><strong>初始化顺序</strong>：静态变量和静态代码块 → 实例变量和实例代码块 → 构造器。</li>\n</ul>\n<h3 id=\"5-对象的销毁\"><a href=\"#5-对象的销毁\" class=\"headerlink\" title=\"5.对象的销毁\"></a>5.对象的销毁</h3><p>Java和c&#x2F;c++的一个重要的特征就是不需要手动管理对象的销毁工作。对象是由<strong>Java虚拟机</strong>进行管理和销毁的。我们无需手动管理对象，但是得知道对象作用域的概念。</p>\n<h4 id=\"1-对象作用域\"><a href=\"#1-对象作用域\" class=\"headerlink\" title=\"(1)对象作用域\"></a>(1)对象作用域</h4><p>绝大多数语言都有作用域(scope)的概念，作用域决定了对象内部定义的变量名的可见性和生命周期。java中作用域通常由{}的位置决定。</p>\n<p><code>&#123;</code></p>\n<p>​\t<code>int a = 11;</code></p>\n<p>​\t<code>&#123;</code></p>\n<p>​\t\t<code>int b = 22;</code></p>\n<p>​\t<code>&#125;</code></p>\n<p><code>&#125;</code></p>\n<p>变量a会在两个{}中生效，而变量b只在自己的{}内生效。</p>\n<h4 id=\"2-this和super\"><a href=\"#2-this和super\" class=\"headerlink\" title=\"(2)this和super\"></a>(2)this和super</h4><p>二者都是关键字。</p>\n<p><strong>this</strong>作用在对象中并且不可以对静态变量或方法使用，它可以调用方法，调用属性和指向对象本身，因为局部变量优先级大于全局变量，所以在调用对象的方法进行属性的赋值时，需要使用到this来设置此对象的属性。</p>\n<p>调用对象：例子中eatApple()方法可以调用多次，return this的返回值使得哪个对象调用这个方法都能返回对象自身。<img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207203153099.png\"></p>\n<p>this用在构造方法时this(参数)需要放在第一行，否则编译不通过。</p>\n<p><strong>super</strong>可以调用父类的方法，属性，指向父类。其他同this。</p>\n<h2 id=\"六、访问控制权限\"><a href=\"#六、访问控制权限\" class=\"headerlink\" title=\"六、访问控制权限\"></a>六、访问控制权限</h2><p>访问控制权限又称封装，它是面向对象三大特性的一个，其核心是只对需要的类可见。</p>\n<p>Java中成员的访问权限一共有四种，分别是public，protected，default，private。如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207211115238.png\" alt=\"image-20250207211115238\"></p>\n<h3 id=\"1-继承\"><a href=\"#1-继承\" class=\"headerlink\" title=\"1.继承\"></a>1.继承</h3><p>三大特性之一，它是所有面向对象编程语言都不可或缺的一部分。只要我们创建了一个类，就隐式的继承自Object父类，只不过没有指定。如果显式指定了父类，那么此类的父类就继承于Object类。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207212537344.png\" alt=\"image-20250207212537344\"></p>\n<p>继承的关键字是<strong>extends</strong>，如果使用了extends显式指定了继承，那么我们可以说Father是父类，而Son是子类。用代码表示如下：</p>\n<p><code>class Father&#123;&#125;</code></p>\n<p><code>class Son extends Father&#123;&#125;</code></p>\n<p>子类具有父类的某些特征，如果子类没有自己的方法的话，默认调用父类的方法。如果子类实现了自己的方法，那么就相当于重写了父类的方法。</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2.多态\"></a>2.多态</h3><p>三大特性之一，多态是指同一个行为具有不同表现形式。即一个类实例(对象)的相同方法在不同情形下具有不同表现形式。封装和继承是多态的基础，多态只是一种表现形式。</p>\n<p>如何实现多态？达成三个充要条件：</p>\n<ul>\n<li>继承</li>\n<li>重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n<p>比如以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat Fruit&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pear</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fruit</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.num = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat&quot;</span>+num+<span class=\"string\">&quot;Pear&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DuoTai</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Fruit</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pear</span>();</span><br><span class=\"line\">        fruit.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现main方法中Fruit fruit &#x3D; new Pear()，Fruit类型的对象竟然指向了Pear对象的引用，这其实就是多态-&gt;父类引用指向子类对象，因为Pear继承于Fruit，并且重写了eat方法，所以能够表现出来多种状态的形式。</p>\n<h3 id=\"3-组合\"><a href=\"#3-组合\" class=\"headerlink\" title=\"3.组合\"></a>3.组合</h3><p>组合就是将对象引用置于新类中即可。组合也是一种提高类的复用性的一种方式。如果想要类具有更多的扩展功能，可以记住一句话<strong>多用组合，少用继承</strong>。二者关系如下：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250207222214122.png\" alt=\"image-20250207222214122\"></p>\n<h3 id=\"4-动态代理\"><a href=\"#4-动态代理\" class=\"headerlink\" title=\"4.动态代理\"></a>4.动态代理</h3><p>为什么需要代理：代理可以无侵入式的给对象增加其他功能。</p>\n<p>代理大致描述为：A想要调用B类的方法，但是不直接调用而是在自己的类中创建一个B对象的代理，再由代理调用B的方法。如下图所示：</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220105056954.png\" alt=\"image-20250220105056954\"></p>\n<p>java如何保证代理的实现？通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223201954533.png\"></p>\n<p><strong>定义一个接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现该接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个<code>InvocationHandler</code>实现类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target; <span class=\"comment\">// 被代理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之前执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">// 在方法调用之后执行的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After calling: &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用<code>Proxy</code>生成代理对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建目标对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建InvocationHandler实例</span></span><br><span class=\"line\">        <span class=\"type\">MyInvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInvocationHandler</span>(target);</span><br><span class=\"line\">        <span class=\"comment\">// 生成代理对象</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (HelloService) Proxy.newProxyInstance(</span><br><span class=\"line\">                HelloService.class.getClassLoader(), <span class=\"comment\">// 目标类的类加载器</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>&lt;?&gt;[]&#123;HelloService.class&#125;, <span class=\"comment\">// 目标类实现的接口</span></span><br><span class=\"line\">                handler <span class=\"comment\">// InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的方法</span></span><br><span class=\"line\">        proxy.sayHello(<span class=\"string\">&quot;Kimi&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Before calling: sayHello</span><br><span class=\"line\">Hello, Kimi!</span><br><span class=\"line\">After calling: sayHello</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-向上转型\"><a href=\"#5-向上转型\" class=\"headerlink\" title=\"5.向上转型\"></a>5.向上转型</h3><p>向上转型代表了子类和父类之间的关系，其实不仅有向上转型还有向下转型。</p>\n<p>向上转型是子类对象(小范围)转换为父类对象(大范围)，自动完成，不用强制。</p>\n<p>向下转型相反而且不是自动完成，需要强制指定。</p>\n<h3 id=\"6-statics\"><a href=\"#6-statics\" class=\"headerlink\" title=\"6.statics\"></a>6.statics</h3><p><code>static</code> 关键字用于表示一个成员(变量或方法)属于类本身，而不是类的某个特定实例。这意味着所有实例共享同一个静态成员。以下是 <code>static</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>静态变量</strong>：定义类的全局变量，所有实例共享。</li>\n<li><strong>静态方法</strong>：定义类级别的方法，可以直接通过类名调用，不需要创建类的实例。静态方法中不能访问类的非静态成员变量和方法。</li>\n<li><strong>静态初始化块</strong>：用于初始化静态变量，当类被加载时执行一次。提示程序性能。</li>\n</ul>\n<h3 id=\"7-final\"><a href=\"#7-final\" class=\"headerlink\" title=\"7.final\"></a>7.final</h3><p><code>final</code> 关键字用于表示一个元素(变量、方法或类)是不可变的。以下是 <code>final</code> 关键字的一些主要用途：</p>\n<ul>\n<li><strong>最终变量</strong>：一旦被初始化，其值就不能被改变。</li>\n<li><strong>最终方法</strong>：不能被子类重写。</li>\n<li><strong>最终类</strong>：不能被继承，且类中的成员方法默认指定为final方法，成员变量可以根据需要设为final。</li>\n</ul>\n<h2 id=\"七、接口和抽象类\"><a href=\"#七、接口和抽象类\" class=\"headerlink\" title=\"七、接口和抽象类\"></a>七、接口和抽象类</h2><p>在面向对象编程中，接口(Interface)和抽象类(Abstract Class)是两种非常重要的概念，它们都用于<strong>定义规范和提供代码复用</strong>，但它们在功能、用途和语法上有很大的区别。</p>\n<h3 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h3><ol>\n<li><strong>接口(Interface)</strong><ul>\n<li>接口是一种特殊的类，它完全由抽象方法(没有实现的方法)和常量组成。在 Java 中，接口中的方法默认是 <code>public</code> 和 <code>abstract</code> 的，字段默认是 <code>public static final</code> 的。</li>\n<li>接口的目的是定义一组行为规范，<strong>任何实现了该接口的类都必须实现接口中定义的所有方法</strong>。</li>\n<li>接口可以被多个类实现，从而实现多继承的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类(Abstract Class)</strong><ul>\n<li>抽象类是一种不能被实例化的类，它既可以包含抽象方法(没有具体实现的方法)，也可以包含具体方法(有实现的方法)。</li>\n<li>抽象类的主要目的是<strong>为子类提供一个通用的模板</strong>，<strong>子类必须实现抽象类中的所有抽象方法</strong>。</li>\n<li>抽象类只能被单个类继承，不能实现多继承。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h3><ol>\n<li><strong>方法实现</strong><ul>\n<li><strong>接口</strong>：接口中的方法默认是抽象的，不能有具体实现。从 Java 8 开始，接口可以包含默认方法(<code>default</code>)和静态方法(<code>static</code>)，但这些方法的使用场景相对有限。</li>\n<li><strong>抽象类</strong>：抽象类可以包含抽象方法和具体方法。抽象方法需要子类实现，具体方法可以直接被子类继承和使用。</li>\n</ul>\n</li>\n<li><strong>字段</strong><ul>\n<li><strong>接口</strong>：接口中的字段默认是 <code>public static final</code> 的，即常量。它们必须在声明时初始化，且不能被修改。</li>\n<li><strong>抽象类</strong>：抽象类可以包含普通字段(实例变量)，这些字段可以是 <code>public</code>、<code>protected</code> 或 <code>private</code> 的，也可以是静态的或非静态的。</li>\n</ul>\n</li>\n<li><strong>继承和实现</strong><ul>\n<li><strong>接口</strong>：一个类可以实现多个接口。这是实现多继承的一种方式。</li>\n<li><strong>抽象类</strong>：一个类只能继承一个抽象类。如果需要实现多继承，必须通过接口来实现。</li>\n</ul>\n</li>\n<li><strong>构造方法</strong><ul>\n<li><strong>接口</strong>：接口不能有构造方法，因为接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类可以有构造方法，但这些构造方法只能被子类在构造过程中调用。</li>\n</ul>\n</li>\n<li><strong>实例化</strong><ul>\n<li><strong>接口</strong>：接口不能被实例化。</li>\n<li><strong>抽象类</strong>：抽象类也不能被实例化，但可以通过子类来实例化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h3><ol>\n<li><strong>接口</strong><ul>\n<li>当需要定义一组行为规范，而不需要关心具体的实现细节时，使用接口。例如，定义一个 <code>Animal</code> 接口，其中包含 <code>eat()</code> 和 <code>move()</code> 方法，不同的动物类可以实现这些方法，但具体的实现方式可以不同。</li>\n<li>当<strong>需要实现多继承时</strong>，使用接口。因为 Java 不支持类的多继承，但可以通过实现多个接口来实现类似的效果。</li>\n</ul>\n</li>\n<li><strong>抽象类</strong><ul>\n<li>当需要为一组类提供一个通用的模板，且这些类有一些共同的行为和属性时，使用抽象类。例如，定义一个 <code>Vehicle</code> 抽象类，其中包含 <code>move()</code> 抽象方法和一些通用字段(如 <code>speed</code>、<code>color</code> 等)，然后让 <code>Car</code>、<code>Bike</code> 等子类继承并实现具体的行为。</li>\n<li>当需要在类中提供一些默认实现，同时允许子类根据需要进行扩展时，使用抽象类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"八、异常\"><a href=\"#八、异常\" class=\"headerlink\" title=\"八、异常\"></a>八、异常</h2><p>Exception位于<strong>java.lang</strong>包下，它是一种顶级接口，继承于<strong>Throwable</strong>类，<strong>Throwable类是Java语言中所以错误(error)和异常(exception)类的父类</strong>。只有继承于Throwable的类或者其子类才能被抛出，还有一种方式是带有Java中的**@throw**注解的类也可以抛出。</p>\n<p>在Java中，异常(Exception)是一种特殊的对象，用于表示程序运行时出现的错误或异常情况。通过异常处理机制，程序可以在遇到错误时优雅地处理问题，而不是直接崩溃。Java的异常处理机制主要包括异常的抛出(Throw)、捕获(Catch)和处理(Handle)。</p>\n<h3 id=\"一、异常的分类\"><a href=\"#一、异常的分类\" class=\"headerlink\" title=\"一、异常的分类\"></a>一、异常的分类</h3><p>Java中的异常主要分为两大类：<strong>受检查的异常(Checked Exception)和非受检查的异常(Unchecked Exception)</strong>。</p>\n<ol>\n<li><strong>受检查的异常(Checked Exception)</strong><ul>\n<li>这些异常是编译器强制要求处理的异常。它们通常是程序运行时可能出现的外部错误，例如文件找不到(<code>FileNotFoundException</code>)、网络连接失败(<code>IOException</code>)等。</li>\n<li>受检查的异常必须在代码中显式处理，否则编译器会报错。</li>\n<li>受检查的异常继承自<code>Exception</code>类，但不包括<code>RuntimeException</code>及其子类。</li>\n</ul>\n</li>\n<li><strong>非受检查的异常(Unchecked Exception)</strong><ul>\n<li>这些异常是程序逻辑错误或运行时错误，例如空指针异常(<code>NullPointerException</code>)、数组越界异常(<code>ArrayIndexOutOfBoundsException</code>)等。</li>\n<li>非受检查的异常继承自<code>RuntimeException</code>类，编译器不会强制要求处理这些异常。</li>\n<li>但为了程序的健壮性，通常也会对这些异常进行捕获和处理。</li>\n</ul>\n</li>\n<li><strong>错误(Error)</strong><ul>\n<li>错误是程序运行时出现的严重问题，通常是无法恢复的，例如虚拟机错误(<code>VirtualMachineError</code>)、线程死亡(<code>ThreadDeath</code>)等。</li>\n<li>错误继承自<code>Error</code>类，通常不需要程序员处理，因为它们通常表示系统级别的问题。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、异常处理机制\"><a href=\"#二、异常处理机制\" class=\"headerlink\" title=\"二、异常处理机制\"></a>二、异常处理机制</h3><p>Java提供了以下几种机制来处理异常：</p>\n<ol>\n<li><strong>try-catch</strong><ul>\n<li><code>try</code>块用于包裹可能会抛出异常的代码，<code>catch</code>块用于捕获和处理异常。</li>\n<li>可以有多个<code>catch</code>块来捕获不同类型的异常。</li>\n</ul>\n</li>\n<li><strong>finally</strong><ul>\n<li><code>finally</code>块用于在<code>try-catch</code>块执行完毕后执行清理操作，无论是否捕获到异常，<code>finally</code>块都会执行。</li>\n<li>常用于关闭文件流、释放资源等操作。</li>\n</ul>\n</li>\n<li><strong>throw</strong><ul>\n<li><code>throw</code>关键字用于手动抛出一个异常对象，可以是系统定义的异常，也可以是自定义的异常。</li>\n</ul>\n</li>\n<li><strong>throws</strong><ul>\n<li><code>throws</code>关键字用于声明方法可能会抛出的异常。如果方法中可能会抛出受检查的异常，必须在方法签名中声明这些异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、异常处理的流程\"><a href=\"#三、异常处理的流程\" class=\"headerlink\" title=\"三、异常处理的流程\"></a>三、异常处理的流程</h3><ol>\n<li><strong>抛出异常</strong><ul>\n<li>当程序运行时遇到错误，会创建一个异常对象并抛出。</li>\n<li>异常对象包含错误信息，例如异常类型、错误消息、堆栈跟踪等。</li>\n</ul>\n</li>\n<li><strong>捕获异常</strong><ul>\n<li>使用<code>try-catch</code>块捕获异常，捕获到异常后可以在<code>catch</code>块中进行处理。</li>\n</ul>\n</li>\n<li><strong>处理异常</strong><ul>\n<li>在<code>catch</code>块中可以记录日志、提示用户、尝试恢复等操作。</li>\n</ul>\n</li>\n<li><strong>清理资源</strong><ul>\n<li>使用<code>finally</code>块进行资源清理，确保资源被正确释放。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、示例代码\"><a href=\"#四、示例代码\" class=\"headerlink\" title=\"四、示例代码\"></a>四、示例代码</h3><p>以下是一个简单的Java异常处理示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可能会抛出异常的代码</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Result: &quot;</span> + result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获并处理特定类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 捕获其他类型的异常</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;General Error: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否捕获到异常，finally块都会执行</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Finally block executed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;Division by zero is not allowed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、自定义异常\"><a href=\"#五、自定义异常\" class=\"headerlink\" title=\"五、自定义异常\"></a>五、自定义异常</h3><p>Java允许程序员定义自己的异常类，自定义异常类通常继承自<code>Exception</code>类或其子类。自定义异常可以提供更具体的错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCustomException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyCustomException</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomExceptionExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            checkAge(<span class=\"number\">15</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyCustomException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Caught custom exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> <span class=\"keyword\">throws</span> MyCustomException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCustomException</span>(<span class=\"string\">&quot;Age must be at least 18.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age is valid.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、如何实践\"><a href=\"#六、如何实践\" class=\"headerlink\" title=\"六、如何实践\"></a>六、如何实践</h3><ol>\n<li><strong>明确异常的用途</strong><ul>\n<li>受检查的异常用于处理外部错误，非受检查的异常用于处理程序逻辑错误。</li>\n</ul>\n</li>\n<li><strong>合理使用<code>try-catch</code></strong><ul>\n<li>不要捕获所有异常，只捕获需要处理的异常。</li>\n</ul>\n</li>\n<li><strong>避免空的<code>catch</code>块</strong><ul>\n<li>捕获异常后应该进行处理，而不是忽略异常。</li>\n</ul>\n</li>\n<li><strong>使用<code>finally</code>块清理资源</strong><ul>\n<li>确保资源被正确释放，避免资源泄漏。</li>\n</ul>\n</li>\n<li><strong>自定义异常</strong><ul>\n<li>当系统提供的异常类不足以描述错误时，可以定义自定义异常。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"七、异常处理的优缺点\"><a href=\"#七、异常处理的优缺点\" class=\"headerlink\" title=\"七、异常处理的优缺点\"></a>七、异常处理的优缺点</h3><p><strong>优点</strong></p>\n<ul>\n<li>提高程序的健壮性，避免程序因错误而崩溃。</li>\n<li>提供详细的错误信息，方便调试和修复。</li>\n<li>可以通过异常处理机制实现程序的容错机制。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>异常处理机制可能会使代码变得复杂，增加阅读和维护的难度。</li>\n<li>如果滥用异常处理机制，可能会导致程序性能下降。</li>\n</ul>\n<p>总之，合理使用Java的异常处理机制可以提高程序的健壮性和可维护性，但需要谨慎使用，避免滥用。</p>\n<h2 id=\"九、内部类\"><a href=\"#九、内部类\" class=\"headerlink\" title=\"九、内部类\"></a>九、内部类</h2><p>写在一个类里面的类叫内部类。大体分为两种，一种为普通的，一种为静态的。</p>\n<h3 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h3><p><strong>1.实现多继承</strong>，外部类继承一个接口，内部类继承一个接口。而一个外部类可以有多个内部类。</p>\n<p>2.<strong>实现回调机制</strong>，内部类常用于实现事件监听器或其他回调机制。例如，GUI编程中，按钮的事件监听器通常使用匿名内部类实现。</p>\n<p>3.<strong>封装逻辑</strong>，避免暴露具体实现。</p>\n<p>内部类与外部类的其他成员变量，方法等属于同一级，普通的内部类可以直接服务外部类的成员变量和成员方法，静态内部类不可以。</p>\n<p>普通内部类实例化时需要使用外部类.内部类。静态内部类无需。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>(); <span class=\"comment\">// 创建内部类实例</span></span><br></pre></td></tr></table></figure>\n\n<p>匿名内部类是直接在实例化时写上该接口的实现，而无需再开一个文件去写实现类。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyInterface</span> <span class=\"variable\">mi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInterface</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Anonymous inner class&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        mi.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、集合\"><a href=\"#十、集合\" class=\"headerlink\" title=\"十、集合\"></a>十、集合</h2><h3 id=\"collections框架图\"><a href=\"#collections框架图\" class=\"headerlink\" title=\"collections框架图\"></a>collections框架图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216221349436.png\" alt=\"image-20250216221349436\"></p>\n<h3 id=\"iterable接口\"><a href=\"#iterable接口\" class=\"headerlink\" title=\"iterable接口\"></a>iterable接口</h3><p>定义了一种方法<code>iterator()</code>，允许以统一的方式(增强for)遍历集合。</p>\n<h3 id=\"顶层接口\"><a href=\"#顶层接口\" class=\"headerlink\" title=\"顶层接口\"></a>顶层接口</h3><p><strong>Collection</strong> 是一个顶层接口，它主要用来定义集合的约定<br><strong>List</strong>接口也是一个顶层接口，它继承了 Collection 接口，同时也是ArrayList、LinkedList 等集合元素的父类<br><strong>Set</strong>接口位于与List 接口同级的层次上，它同时也继承了 Collection 接口。Set接口提供了额外的规定。它对add、equals、hashCode方法提供了额外的标准。</p>\n<p><strong>Queue</strong>是和 List、Set接口并列的 Collection的三大接口之一。Queue的设计用来在处理之前保持元素的访问次序。除了Collection基础的操作之外，队列提供了额外的插入，读取，检查操作。</p>\n<p>SortedSet接口直接继承于Set接口，使用 Comparable 对元素进行自然排序或者使用 Comparator在创建时对元素提供定制的排序规则。set的迭代器将按升序元素顺序遍历集合。</p>\n<p>Map是一个支持 key-value存储的对象，Map 不能包含重复的key，每个键最多映射一个值。这个接口代替了Dictionary类，Dictionary是一个抽象类而不是接口。</p>\n<h3 id=\"类-数据结构\"><a href=\"#类-数据结构\" class=\"headerlink\" title=\"类(数据结构)\"></a>类(数据结构)</h3><ol>\n<li><strong>ArrayList</strong>：动态数组实现的列表，支持快速随机访问。</li>\n<li><strong>Vector</strong>：与<code>ArrayList</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>LinkedList 类</strong>：双向链表实现的列表，支持快速插入和删除。</li>\n<li><strong>Stack</strong>：后进先出（LIFO）的栈，基于<code>Vector</code>实现。</li>\n<li><strong>HashSet</strong>：基于哈希表实现的集合，不允许重复元素。</li>\n<li><strong>TreeSet</strong>：基于红黑树实现的有序集合。</li>\n<li><strong>LinkedHashSet 类</strong>：<code>HashSet</code>的链表版本，维护元素插入顺序。</li>\n<li><strong>PriorityQueue</strong>：基于优先级堆实现的队列，元素按自然顺序或构造时指定的比较器排序。</li>\n<li><strong>HashMap</strong>：基于哈希表实现的映射，允许一个null键和多个null值。</li>\n<li><strong>TreeMap 类</strong>：基于红黑树实现的有序映射。</li>\n<li><strong>LinkedHashMap 类</strong>：<code>HashMap</code>的链表版本，维护元素插入或访问顺序。</li>\n<li><strong>Hashtable 类</strong>：与<code>HashMap</code>类似，但它是同步的，适用于多线程环境。</li>\n<li><strong>IdentityHashMap 类</strong>：<code>HashMap</code>的变体，使用引用相等性而不是对象相等性。</li>\n<li><strong>WeakHashMap 类</strong>：键是弱引用的映射，键被垃圾回收时，映射项被自动移除。</li>\n<li><strong>Collections 类</strong>：提供对集合的静态方法操作，如排序、搜索和修改。</li>\n</ol>\n<h3 id=\"集合实现类特征图\"><a href=\"#集合实现类特征图\" class=\"headerlink\" title=\"集合实现类特征图\"></a>集合实现类特征图</h3><p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250216222117731.png\" alt=\"image-20250216222117731\"></p>\n<h2 id=\"十一、泛型\"><a href=\"#十一、泛型\" class=\"headerlink\" title=\"十一、泛型\"></a>十一、泛型</h2><p>一种语言特性，允许开发者在定义类，接口或方法时使用<strong>类型参数</strong>，从而<strong>提高代码的复用性和灵活性</strong>。泛型的核心思想是将类型抽象化，使得代码可以在不同数据类型上重复使用，同时<strong>保持类型安全</strong>。</p>\n<h3 id=\"类型参数\"><a href=\"#类型参数\" class=\"headerlink\" title=\"类型参数\"></a><strong>类型参数</strong></h3><p>类型参数是泛型的核心，它允许在定义类、接口或方法时指定一个或多个类型占位符。类型参数可以是任何有效的 Java 类型，包括类、接口、数组等。</p>\n<p><strong>类型参数的命名规范</strong></p>\n<ul>\n<li>通常使用单个大写字母表示类型参数，常见的有：<ul>\n<li><code>T</code>（Type）：表示任意类型。</li>\n<li><code>E</code>（Element）：表示集合中的元素类型。</li>\n<li><code>K</code>（Key）：表示键的类型。</li>\n<li><code>V</code>（Value）：表示值的类型。</li>\n<li><code>N</code>（Number）：表示数字类型。</li>\n<li><code>S</code>、<code>U</code>、<code>V</code> 等：用于多个类型参数的区分。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a><strong>类型擦除</strong></h3><p>Java泛型会在运行时被擦除，这意味着泛型信息仅在编译时存在，运行时无法获取具体类型。会导致无法创建泛型数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;String&gt;[<span class=\"number\">10</span>]; <span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n\n<p>但是可以通过强制类型转换创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;String&gt;[] boxes = (Box&lt;String&gt;[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 需要强制类型转换</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型限制\"><a href=\"#类型限制\" class=\"headerlink\" title=\"类型限制\"></a>类型限制</h3><p>1.<strong>不能使用原始数据类型，只能使用包装类</strong></p>\n<p>2.<strong>不能创建泛型的静态字段</strong>，因为静态字段属于类，而泛型类型是实例相关的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T value; <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>不能实例化泛型类型参数</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Box</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">T</span>(); <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><p>通配符（<code>?</code>）用于表示未知类型，分为无界通配符和有界通配符：</p>\n<ol>\n<li><p><strong>无界通配符</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;?&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是未知的，可以是任何类型。</p>\n</li>\n<li><p><strong>有界通配符</strong>：</p>\n<p>上界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Number</code> 或其子类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&gt; objectList = stringList; <span class=\"comment\">// 协变</span></span><br></pre></td></tr></table></figure>\n\n<p>下界</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Box&lt;? <span class=\"built_in\">super</span> Integer&gt; box = <span class=\"keyword\">new</span> <span class=\"title class_\">Box</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>表示 <code>Box</code> 的泛型类型是 <code>Integer</code> 或其父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; objectList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;? <span class=\"built_in\">super</span> String&gt; stringList = objectList; <span class=\"comment\">// 逆变</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"十二、反射\"><a href=\"#十二、反射\" class=\"headerlink\" title=\"十二、反射\"></a>十二、反射</h2><p>啥是反射？反射允许对成员变量，成员方法和构造方法的信息进行编程访问。</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220123104283.png\" alt=\"image-20250220123104283\"></p>\n<h3 id=\"获取对象\"><a href=\"#获取对象\" class=\"headerlink\" title=\"获取对象\"></a>获取对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 获取class对象的三种方式：</span></span><br><span class=\"line\"><span class=\"comment\">        *   1.Class.forName(&quot;全类名&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        *   2.类名.class</span></span><br><span class=\"line\"><span class=\"comment\">        *   3.对象.getClass();</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//全类名：包名+类名</span></span><br><span class=\"line\">        <span class=\"comment\">//最为常用</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第二种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//一般用于传参</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Student.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第三种方式</span></span><br><span class=\"line\">        <span class=\"comment\">//当我们已经有了这个类的对象时，才可以使用。</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> student.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(clazz1 == clazz2);</span><br><span class=\"line\">        System.out.println(clazz1 == clazz3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250220122408100.png\" alt=\"image-20250220122408100\"></p>\n<h3 id=\"获取对象的构造方法\"><a href=\"#获取对象的构造方法\" class=\"headerlink\" title=\"获取对象的构造方法\"></a>获取对象的构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Constructor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Class类中用于获取构造方法的方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors()获取公共的构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getDeclaredConstructors()获取所有构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructor(Class&lt;?&gt;...parameterTypes)获取公共的某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        *   Constructor&lt;?&gt;[] getConstructors(Class&lt;?&gt;...parameterTypes)获取某个构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        Class clazz= Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2获取构造方法</span></span><br><span class=\"line\">        Constructor[] cons = clazz.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        Constructor[] cons1 = clazz.getDeclaredConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Constructor c : cons1) &#123;</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons2</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons3</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class=\"line\">        System.out.println(cons3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">cons4</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(cons4);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">Modifiers</span> <span class=\"operator\">=</span> cons4.getModifiers();</span><br><span class=\"line\">        System.out.println(Modifiers);<span class=\"comment\">//其中1为public，2为protected，4为private</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">        Parameter[] parameters = cons4.getParameters();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Parameter p : parameters) &#123;</span><br><span class=\"line\">            System.out.println(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//暴力反射：表示临时取消权限校验</span></span><br><span class=\"line\">        cons4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//利用获取到的构造方法来构造对象</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> (Student) cons4.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        System.out.println(stu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222225338830.png\" alt=\"image-20250222225338830\"></p>\n<p>其中<strong>权限修饰符常量字段值</strong>如下</p>\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250222224835797.png\"></p>\n<h3 id=\"获取对象的成员变量\"><a href=\"#获取对象的成员变量\" class=\"headerlink\" title=\"获取对象的成员变量\"></a>获取对象的成员变量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3Var</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Class类中用于获取成员变量的方法</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getFields();//返回所有公共成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclaredFieldS();//返回所有成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"comment\">    * Field getField(String name);//返回单个公共成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * Field[] getDeclareField(String name);//返回单个成员变量对象</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.获取class字节码文件对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.dmw.basedemo.reflect.Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.获取所有的成员变量</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            System.out.println(field);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取单个的成员变量</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> clazz.getDeclaredField(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"comment\">//获取权限修饰符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">modifiers</span> <span class=\"operator\">=</span> age.getModifiers();</span><br><span class=\"line\">        System.out.println(modifiers);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的名字</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> age.getName();</span><br><span class=\"line\">        System.out.println(n);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量的类型</span></span><br><span class=\"line\">        Class&lt;?&gt; type = age.getType();</span><br><span class=\"line\">        System.out.println(type);</span><br><span class=\"line\">        <span class=\"comment\">//获取成员变量记录的值</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        age.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> age.get(student);<span class=\"comment\">//获取student这个对象age记录的值</span></span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223163956807.png\" alt=\"image-20250223163956807\"></p>\n<h3 id=\"获取对象中的成员方法\"><a href=\"#获取对象中的成员方法\" class=\"headerlink\" title=\"获取对象中的成员方法\"></a>获取对象中的成员方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* Class类中用于获取对象中的成员方法</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getMethods();//获取当前类及其父类的所有公有方法。</span></span><br><span class=\"line\"><span class=\"comment\">* Method[] getDeclaredMethods()：获取当前类声明的所有方法（包括私有方法）。</span></span><br><span class=\"line\"><span class=\"comment\">* Method getMethod(String name, Class&lt;?&gt;... parameterTypes)：获取公有方法（包括父类方法）</span></span><br><span class=\"line\"><span class=\"comment\">* Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：获取当前类声明的方法（包括私有方法，但不包括父类方法）。</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">* 通过Method对象，可以使用invoke(Object obj, Object... args)方法调用目标方法。其中：</span></span><br><span class=\"line\"><span class=\"comment\">    obj是目标对象实例。即调用者</span></span><br><span class=\"line\"><span class=\"comment\">    args是方法的参数。</span></span><br><span class=\"line\"><span class=\"comment\">    如果目标方法是静态方法，则obj可以为null。</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反射的使用\"><a href=\"#反射的使用\" class=\"headerlink\" title=\"反射的使用\"></a>反射的使用</h3><p><strong>1.获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Demo5Application &#123;</span><br><span class=\"line\">\t//获取一个类里面的所有信息，获取到之后再执行其他的业务逻辑(此例子为获取对象的属性值并写入到文件中)</span><br><span class=\"line\">    public static void main(String[] args) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        Student s = new Student(&quot;dmw&quot;,23);</span><br><span class=\"line\">        saveObject(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void saveObject(Object o) throws IOException, IllegalAccessException &#123;</span><br><span class=\"line\">        //1.获取class字节码文件</span><br><span class=\"line\">        Class c = o.getClass();</span><br><span class=\"line\">        //2.创建IO流</span><br><span class=\"line\">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;src\\\\a.txt&quot;));</span><br><span class=\"line\">        //3.获取所有的成员变量</span><br><span class=\"line\">        Field[] fields = c.getDeclaredFields();</span><br><span class=\"line\">        for (Field f : fields) &#123;</span><br><span class=\"line\">            f.setAccessible(true);</span><br><span class=\"line\">            String name = f.getName();</span><br><span class=\"line\">            Object value = f.get(o);</span><br><span class=\"line\">            bw.write(name+&quot;:&quot;+value);</span><br><span class=\"line\">            bw.newLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bw.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223191142600.png\" alt=\"image-20250223191142600\"></p>\n<p><strong>2.跟配置文件相结合动态的创建对象，并调用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dmw.basedemo.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo6Application2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.读取配置文件的信息</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;src/prop.properties&quot;</span>);</span><br><span class=\"line\">        prop.load(fis);</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">        System.out.println(prop);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.获取全类名和方法名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;classname&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> (String) prop.get(<span class=\"string\">&quot;method&quot;</span>);</span><br><span class=\"line\">        System.out.println(className);</span><br><span class=\"line\">        System.out.println(methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.利用反射创建对象并运行方法</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\">        <span class=\"comment\">//获取构造方法</span></span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(methodName);</span><br><span class=\"line\">        method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        method.invoke(o);<span class=\"comment\">//利用构造方法创建的对象调用此方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">classname</span>=<span class=\"string\">com.dmw.basedemo.reflect.Student</span></span><br><span class=\"line\"><span class=\"attr\">method</span>=<span class=\"string\">study</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2025/02/04/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E7%9B%98/image-20250223200310462.png\" alt=\"image-20250223200310462\"></p>\n<h2 id=\"十三、枚举\"><a href=\"#十三、枚举\" class=\"headerlink\" title=\"十三、枚举\"></a>十三、枚举</h2><h2 id=\"十四、I-O\"><a href=\"#十四、I-O\" class=\"headerlink\" title=\"十四、I&#x2F;O\"></a>十四、I&#x2F;O</h2><h3 id=\"1-File类\"><a href=\"#1-File类\" class=\"headerlink\" title=\"1.File类\"></a>1.File类</h3><h3 id=\"2-基础IO类和相关方法\"><a href=\"#2-基础IO类和相关方法\" class=\"headerlink\" title=\"2.基础IO类和相关方法\"></a>2.基础IO类和相关方法</h3><h2 id=\"十五、注解\"><a href=\"#十五、注解\" class=\"headerlink\" title=\"十五、注解\"></a>十五、注解</h2><h2 id=\"十六、关于null的几种处理方式\"><a href=\"#十六、关于null的几种处理方式\" class=\"headerlink\" title=\"十六、关于null的几种处理方式\"></a>十六、关于null的几种处理方式</h2>"},{"title":"关于本站","date":"2025-01-28T16:00:00.000Z","updated":"2025-01-28T16:00:00.000Z","swiper_index":1,"_content":"\n# 特别感谢\n本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  \n- [@康文昌](https://space.bilibili.com/34786453)\n- [@Fomalhaut](https://space.bilibili.com/220757832)\n- [@木子dn](https://space.bilibili.com/1398826277)\n- [@阿巴In](https://space.bilibili.com/381992209)\n","source":"_posts/关于本站.md","raw":"---\ntitle: 关于本站\ndate: 2025-01-29\nupdated: 2025-01-29\ncategories: 博客相关\nswiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前\n---\n\n# 特别感谢\n本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  \n- [@康文昌](https://space.bilibili.com/34786453)\n- [@Fomalhaut](https://space.bilibili.com/220757832)\n- [@木子dn](https://space.bilibili.com/1398826277)\n- [@阿巴In](https://space.bilibili.com/381992209)\n","slug":"关于本站","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3e0000gm0ot7tkp0nh4","content":"<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  </p>\n<ul>\n<li><a href=\"https://space.bilibili.com/34786453\">@康文昌</a></li>\n<li><a href=\"https://space.bilibili.com/220757832\">@Fomalhaut</a></li>\n<li><a href=\"https://space.bilibili.com/1398826277\">@木子dn</a></li>\n<li><a href=\"https://space.bilibili.com/381992209\">@阿巴In</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>本站基于Hexo框架和butterfly主题完成。以下几位是本站建成的引领者和促进者，非常感谢他们的技术分享和支持！(排名不分先后)  </p>\n<ul>\n<li><a href=\"https://space.bilibili.com/34786453\">@康文昌</a></li>\n<li><a href=\"https://space.bilibili.com/220757832\">@Fomalhaut</a></li>\n<li><a href=\"https://space.bilibili.com/1398826277\">@木子dn</a></li>\n<li><a href=\"https://space.bilibili.com/381992209\">@阿巴In</a></li>\n</ul>\n"},{"title":"刷题注意事项","date":"2025-02-23T16:00:00.000Z","updated":"2025-02-23T16:00:00.000Z","_content":"\n**1.scanf和printf**\n\n用于格式化输入输出\n\n不能取消同步流\n\n**2.cin和cout（c++特性**）\n\n简洁，在取消同步流的情况下一般比scanf更快\n\n取消同步流一定要写完整\n\n```c++\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n一般不要使用cout << endl;改用cout << '\\n';\n\nendl='\\n'+强制刷新缓冲区（比较慢而且一般也不需要）\n\n**3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。**\n\n4.定义时一般使用using type xx = xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。\n\n","source":"_posts/刷题注意事项.md","raw":"---\ntitle: 刷题注意事项\ndate: 2025-02-24\nupdated: 2025-02-24\ncategories: 算法\n---\n\n**1.scanf和printf**\n\n用于格式化输入输出\n\n不能取消同步流\n\n**2.cin和cout（c++特性**）\n\n简洁，在取消同步流的情况下一般比scanf更快\n\n取消同步流一定要写完整\n\n```c++\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n一般不要使用cout << endl;改用cout << '\\n';\n\nendl='\\n'+强制刷新缓冲区（比较慢而且一般也不需要）\n\n**3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。**\n\n4.定义时一般使用using type xx = xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。\n\n","slug":"刷题注意事项","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3e1000im0otholfhfp3","content":"<p><strong>1.scanf和printf</strong></p>\n<p>用于格式化输入输出</p>\n<p>不能取消同步流</p>\n<p><strong>2.cin和cout（c++特性</strong>）</p>\n<p>简洁，在取消同步流的情况下一般比scanf更快</p>\n<p>取消同步流一定要写完整</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>一般不要使用cout &lt;&lt; endl;改用cout &lt;&lt; ‘\\n’;</p>\n<p>endl&#x3D;’\\n’+强制刷新缓冲区（比较慢而且一般也不需要）</p>\n<p><strong>3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。</strong></p>\n<p>4.定义时一般使用using type xx &#x3D; xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。</p>\n","excerpt":"","more":"<p><strong>1.scanf和printf</strong></p>\n<p>用于格式化输入输出</p>\n<p>不能取消同步流</p>\n<p><strong>2.cin和cout（c++特性</strong>）</p>\n<p>简洁，在取消同步流的情况下一般比scanf更快</p>\n<p>取消同步流一定要写完整</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>一般不要使用cout &lt;&lt; endl;改用cout &lt;&lt; ‘\\n’;</p>\n<p>endl&#x3D;’\\n’+强制刷新缓冲区（比较慢而且一般也不需要）</p>\n<p><strong>3.输入就单独的输入，一会输入做io,一会做计算反而慢一点。</strong></p>\n<p>4.定义时一般使用using type xx &#x3D; xxx;而不是#define xx xxx;前者为一个变量，后者为整体带入，如果没括号可能会导致计算错误。</p>\n"},{"title":"图片显示测试","date":"2025-02-03T16:00:00.000Z","updated":"2025-02-03T16:00:00.000Z","_content":"### 图片\n1111  \n![示例图片](图片显示测试/image-20250201135214019.png \"logo\")  \n![示例图片](图片显示测试/logo.jpg \"logo\")  \n![示例图片](图片显示测试/image.png \"logo\")  \n\n11111\n\n111111\n","source":"_posts/图片显示测试.md","raw":"---\ntitle: 图片显示测试\ndate: 2025-02-04\nupdated: 2025-02-04\ncategories: 博客相关\n---\n### 图片\n1111  \n![示例图片](图片显示测试/image-20250201135214019.png \"logo\")  \n![示例图片](图片显示测试/logo.jpg \"logo\")  \n![示例图片](图片显示测试/image.png \"logo\")  \n\n11111\n\n111111\n","slug":"图片显示测试","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3e1000jm0ot47v0hkuk","content":"<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>1111<br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image-20250201135214019.png\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/logo.jpg\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image.png\" alt=\"示例图片\" title=\"logo\">  </p>\n<p>11111</p>\n<p>111111</p>\n","excerpt":"","more":"<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>1111<br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image-20250201135214019.png\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/logo.jpg\" alt=\"示例图片\" title=\"logo\"><br><img src=\"/2025/02/04/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95/image.png\" alt=\"示例图片\" title=\"logo\">  </p>\n<p>11111</p>\n<p>111111</p>\n"},{"title":"我的第一篇文章","date":"2025-01-24T16:00:00.000Z","updated":"2025-01-28T16:00:00.000Z","_content":"\n# 测试文章\n是否正常显示  \n# 这是一个一级标题\n\n## 这是一个二级标题\n\n这是一个段落文本。可以包含 **加粗文本**、*斜体文本* 和 [链接](https://blog.csdn.net/qq_73995047?type=blog)。\n\n### 列表\n- 项目 1\n- 项目 2\n  - 子项目 2.1\n- 项目 3\n\n### 图片\n![示例图片](我的第一篇文章/logo.jpg \"logo\")\n","source":"_posts/我的第一篇文章.md","raw":"---\ntitle: 我的第一篇文章\ndate: 2025-01-25\nupdated: 2025-01-29\ncategories: 博客相关\n---\n\n# 测试文章\n是否正常显示  \n# 这是一个一级标题\n\n## 这是一个二级标题\n\n这是一个段落文本。可以包含 **加粗文本**、*斜体文本* 和 [链接](https://blog.csdn.net/qq_73995047?type=blog)。\n\n### 列表\n- 项目 1\n- 项目 2\n  - 子项目 2.1\n- 项目 3\n\n### 图片\n![示例图片](我的第一篇文章/logo.jpg \"logo\")\n","slug":"我的第一篇文章","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3e2000lm0ot25gm65b1","content":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>是否正常显示  </p>\n<h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><p>这是一个段落文本。可以包含 <strong>加粗文本</strong>、<em>斜体文本</em> 和 <a href=\"https://blog.csdn.net/qq_73995047?type=blog\">链接</a>。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>项目 1</li>\n<li>项目 2<ul>\n<li>子项目 2.1</li>\n</ul>\n</li>\n<li>项目 3</li>\n</ul>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><img src=\"/2025/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/logo.jpg\" alt=\"示例图片\" title=\"logo\"></p>\n","excerpt":"","more":"<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>是否正常显示  </p>\n<h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><p>这是一个段落文本。可以包含 <strong>加粗文本</strong>、<em>斜体文本</em> 和 <a href=\"https://blog.csdn.net/qq_73995047?type=blog\">链接</a>。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><ul>\n<li>项目 1</li>\n<li>项目 2<ul>\n<li>子项目 2.1</li>\n</ul>\n</li>\n<li>项目 3</li>\n</ul>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><img src=\"/2025/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/logo.jpg\" alt=\"示例图片\" title=\"logo\"></p>\n"},{"title":"编译原理","date":"2025-02-20T16:00:00.000Z","updated":"2025-02-20T16:00:00.000Z","_content":"\n## 引论\n\n### **编译程序的工作过程：**\n\n**1.词法分析**：扫描源程序，分解和识别出每个单词，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。\n\n**2.语法分析**：把单词符号串分解成各类语法单位，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。\n\n**3.语义分析**：保证标识符和常数的正确使用。\n\n**4.中间代码生成**(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。\n\n**5.中间代码优化**(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。\n\n**6.目标代码生成**：将优化后的代码转换成等价的机器代码或汇编指令。\n\n### **编译程序结构**\n\n![1740148009384](编译原理/1740148009384.jpg)\n\n### 高级程序设计语言翻译的两种方式\n\n1.编译方式是指在程序运行之前，将高级语言程序完整地翻译成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。\n\n2.解释方式是指在程序运行时，逐条读取高级语言程序并翻译执行。解释器（Interpreter）是实现这一过程的软件工具。\n\n![image-20250221230151097](编译原理/image-20250221230151097.png)\n\n### 编译程序的自展\n\n1. **定义**：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。\n2. **过程**：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。\n3. **优点**：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。\n\n### 编译程序的移植\n\n1. **定义**：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。\n2. **方法**：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。\n3. **挑战**：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。\n\n### 编译程序的自动化\n\n**定义**：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。\n\n### 并行编译的概念\n\n1. **定义**：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。\n2. **原理**：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。\n\n## 形式语言理论\n\n形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。\n\n------\n\n### 1. **形式语言的定义**\n\n形式语言是一种由符号组成的集合，这些符号按照一定的规则（语法）组合成字符串。形式语言的定义通常包括以下几个要素：\n\n- **字母表（Alphabet）**：一个有限的符号集合，通常用Σ（Sigma）表示。例如，Σ = {a, b}。\n- **字符串（String）**：由字母表中的符号组成的有限序列。例如，对于Σ = {a, b}，字符串可以是“ab”、“bbaa”等。\n- **语言（Language）**：由字母表上的所有字符串构成的集合。形式语言可以被定义为从字母表生成的字符串的集合。\n\n------\n\n### 2. **形式文法（Formal Grammar）**\n\n形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：\n\n1. **非终结符（Non-terminals）**：用于表示尚未生成的符号，通常用大写字母表示，如S、A、B等。\n2. **终结符（Terminals）**：最终生成的符号，通常用小写字母表示，如a、b等。\n3. **产生式规则（Production Rules）**：定义了如何将非终结符替换为其他符号的规则。例如，`S → aSb`。\n4. **起始符号（Start Symbol）**：一个特殊的非终结符，表示生成过程的起点。\n\n#### 示例：\n\n一个简单的文法：\n\n- 非终结符：S\n- 终结符：a, b\n- 产生式规则：\n  - `S → aSb`\n  - `S → ε`（ε表示空字符串）\n- 起始符号：S\n\n这个文法可以生成所有形如`a^n b^n`（n≥0）的字符串，例如`\"\"`、`\"ab\"`、`\"aabb\"`等。\n\n### 乔姆斯基文法层次的四个类型及其特点：\n\n------\n\n1. **0型文法（无限制文法，Type-0 Grammar）**\n\n- **定义**：产生式规则的形式为`α → β`，其中`α`和`β`是字母表上的符号序列，且`α`中至少包含一个非终结符。\n- **特点**：\n  - 产生式规则没有任何限制。\n  - 可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。\n- **对应的自动机**：图灵机（Turing Machine）。\n- **应用场景**：图灵机是计算模型的理论基础，用于研究可计算性问题。\n\n------\n\n2. **1型文法（上下文有关文法，Type-1 Grammar）**\n\n- **定义**：产生式规则的形式为`αAβ → αγβ`，其中`A`是非终结符，`α`、`β`和`γ`是符号序列，且`γ`不能为空。\n- **特点**：\n  - 非终结符的替换依赖于上下文（即`α`和`β`）。\n  - 生成的语言称为上下文有关语言（Context-Sensitive Languages）。\n  - 语言的复杂性介于上下文无关语言和递归可枚举语言之间。\n- **对应的自动机**：线性有界自动机（Linear Bounded Automata, LBA）。\n- **应用场景**：主要用于理论研究，实际应用较少。\n\n------\n\n3. **2型文法（上下文无关文法，Type-2 Grammar）**\n\n- **定义**：产生式规则的形式为`A → α`，其中`A`是非终结符，`α`是符号序列（可以包含终结符和非终结符）。\n- **特点**：\n  - 非终结符的替换不依赖于上下文。\n  - 生成的语言称为上下文无关语言（Context-Free Languages）。\n  - 语言的复杂性较低，适合描述程序设计语言的语法结构。\n- **对应的自动机**：下推自动机（Pushdown Automata, PDA）。\n- **应用场景**：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。\n\n------\n\n4. **3型文法（正则文法，Type-3 Grammar）**\n\n- **定义**：产生式规则的形式为`A → aB`或`A → a`，其中`A`和`B`是非终结符，`a`是终结符。\n  - 也可以写成`A → a`或`A → aB`的形式（右线性文法）。\n- **特点**：\n  - 生成的语言称为正则语言（Regular Languages）。\n  - 语言的复杂性最低，适合描述简单的模式匹配。\n- **对应的自动机**：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。\n- **应用场景**：广泛用于词法分析器的设计，例如正则表达式匹配。\n\n#### 乔姆斯基文法层次的总结\n\n| 类型    | 特点       | 产生式规则                           | 语言类别       | 对应的自动机   |\n| :------ | :--------- | :----------------------------------- | :------------- | :------------- |\n| 0型文法 | 无限制     | `α → β`（`α`中至少包含一个非终结符） | 递归可枚举语言 | 图灵机         |\n| 1型文法 | 上下文有关 | `αAβ → αγβ`（`γ`不能为空）           | 上下文有关语言 | 线性有界自动机 |\n| 2型文法 | 上下文无关 | `A → α`                              | 上下文无关语言 | 下推自动机     |\n| 3型文法 | 正则       | `A → aB` 或 `A → a`                  | 正则语言       | 有限状态自动机 |","source":"_posts/编译原理.md","raw":"---\ntitle: 编译原理\ndate: 2025-02-21\nupdated: 2025-02-21\ncategories: 计算机基础\n---\n\n## 引论\n\n### **编译程序的工作过程：**\n\n**1.词法分析**：扫描源程序，分解和识别出每个单词，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。\n\n**2.语法分析**：把单词符号串分解成各类语法单位，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。\n\n**3.语义分析**：保证标识符和常数的正确使用。\n\n**4.中间代码生成**(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。\n\n**5.中间代码优化**(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。\n\n**6.目标代码生成**：将优化后的代码转换成等价的机器代码或汇编指令。\n\n### **编译程序结构**\n\n![1740148009384](编译原理/1740148009384.jpg)\n\n### 高级程序设计语言翻译的两种方式\n\n1.编译方式是指在程序运行之前，将高级语言程序完整地翻译成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。\n\n2.解释方式是指在程序运行时，逐条读取高级语言程序并翻译执行。解释器（Interpreter）是实现这一过程的软件工具。\n\n![image-20250221230151097](编译原理/image-20250221230151097.png)\n\n### 编译程序的自展\n\n1. **定义**：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。\n2. **过程**：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。\n3. **优点**：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。\n\n### 编译程序的移植\n\n1. **定义**：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。\n2. **方法**：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。\n3. **挑战**：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。\n\n### 编译程序的自动化\n\n**定义**：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。\n\n### 并行编译的概念\n\n1. **定义**：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。\n2. **原理**：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。\n\n## 形式语言理论\n\n形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。\n\n------\n\n### 1. **形式语言的定义**\n\n形式语言是一种由符号组成的集合，这些符号按照一定的规则（语法）组合成字符串。形式语言的定义通常包括以下几个要素：\n\n- **字母表（Alphabet）**：一个有限的符号集合，通常用Σ（Sigma）表示。例如，Σ = {a, b}。\n- **字符串（String）**：由字母表中的符号组成的有限序列。例如，对于Σ = {a, b}，字符串可以是“ab”、“bbaa”等。\n- **语言（Language）**：由字母表上的所有字符串构成的集合。形式语言可以被定义为从字母表生成的字符串的集合。\n\n------\n\n### 2. **形式文法（Formal Grammar）**\n\n形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：\n\n1. **非终结符（Non-terminals）**：用于表示尚未生成的符号，通常用大写字母表示，如S、A、B等。\n2. **终结符（Terminals）**：最终生成的符号，通常用小写字母表示，如a、b等。\n3. **产生式规则（Production Rules）**：定义了如何将非终结符替换为其他符号的规则。例如，`S → aSb`。\n4. **起始符号（Start Symbol）**：一个特殊的非终结符，表示生成过程的起点。\n\n#### 示例：\n\n一个简单的文法：\n\n- 非终结符：S\n- 终结符：a, b\n- 产生式规则：\n  - `S → aSb`\n  - `S → ε`（ε表示空字符串）\n- 起始符号：S\n\n这个文法可以生成所有形如`a^n b^n`（n≥0）的字符串，例如`\"\"`、`\"ab\"`、`\"aabb\"`等。\n\n### 乔姆斯基文法层次的四个类型及其特点：\n\n------\n\n1. **0型文法（无限制文法，Type-0 Grammar）**\n\n- **定义**：产生式规则的形式为`α → β`，其中`α`和`β`是字母表上的符号序列，且`α`中至少包含一个非终结符。\n- **特点**：\n  - 产生式规则没有任何限制。\n  - 可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。\n- **对应的自动机**：图灵机（Turing Machine）。\n- **应用场景**：图灵机是计算模型的理论基础，用于研究可计算性问题。\n\n------\n\n2. **1型文法（上下文有关文法，Type-1 Grammar）**\n\n- **定义**：产生式规则的形式为`αAβ → αγβ`，其中`A`是非终结符，`α`、`β`和`γ`是符号序列，且`γ`不能为空。\n- **特点**：\n  - 非终结符的替换依赖于上下文（即`α`和`β`）。\n  - 生成的语言称为上下文有关语言（Context-Sensitive Languages）。\n  - 语言的复杂性介于上下文无关语言和递归可枚举语言之间。\n- **对应的自动机**：线性有界自动机（Linear Bounded Automata, LBA）。\n- **应用场景**：主要用于理论研究，实际应用较少。\n\n------\n\n3. **2型文法（上下文无关文法，Type-2 Grammar）**\n\n- **定义**：产生式规则的形式为`A → α`，其中`A`是非终结符，`α`是符号序列（可以包含终结符和非终结符）。\n- **特点**：\n  - 非终结符的替换不依赖于上下文。\n  - 生成的语言称为上下文无关语言（Context-Free Languages）。\n  - 语言的复杂性较低，适合描述程序设计语言的语法结构。\n- **对应的自动机**：下推自动机（Pushdown Automata, PDA）。\n- **应用场景**：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。\n\n------\n\n4. **3型文法（正则文法，Type-3 Grammar）**\n\n- **定义**：产生式规则的形式为`A → aB`或`A → a`，其中`A`和`B`是非终结符，`a`是终结符。\n  - 也可以写成`A → a`或`A → aB`的形式（右线性文法）。\n- **特点**：\n  - 生成的语言称为正则语言（Regular Languages）。\n  - 语言的复杂性最低，适合描述简单的模式匹配。\n- **对应的自动机**：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。\n- **应用场景**：广泛用于词法分析器的设计，例如正则表达式匹配。\n\n#### 乔姆斯基文法层次的总结\n\n| 类型    | 特点       | 产生式规则                           | 语言类别       | 对应的自动机   |\n| :------ | :--------- | :----------------------------------- | :------------- | :------------- |\n| 0型文法 | 无限制     | `α → β`（`α`中至少包含一个非终结符） | 递归可枚举语言 | 图灵机         |\n| 1型文法 | 上下文有关 | `αAβ → αγβ`（`γ`不能为空）           | 上下文有关语言 | 线性有界自动机 |\n| 2型文法 | 上下文无关 | `A → α`                              | 上下文无关语言 | 下推自动机     |\n| 3型文法 | 正则       | `A → aB` 或 `A → a`                  | 正则语言       | 有限状态自动机 |","slug":"编译原理","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3e3000nm0ot6ukc19nf","content":"<h2 id=\"引论\"><a href=\"#引论\" class=\"headerlink\" title=\"引论\"></a>引论</h2><h3 id=\"编译程序的工作过程：\"><a href=\"#编译程序的工作过程：\" class=\"headerlink\" title=\"编译程序的工作过程：\"></a><strong>编译程序的工作过程：</strong></h3><p><strong>1.词法分析</strong>：扫描源程序，分解和识别出每个单词，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。</p>\n<p><strong>2.语法分析</strong>：把单词符号串分解成各类语法单位，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。</p>\n<p><strong>3.语义分析</strong>：保证标识符和常数的正确使用。</p>\n<p><strong>4.中间代码生成</strong>(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。</p>\n<p><strong>5.中间代码优化</strong>(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。</p>\n<p><strong>6.目标代码生成</strong>：将优化后的代码转换成等价的机器代码或汇编指令。</p>\n<h3 id=\"编译程序结构\"><a href=\"#编译程序结构\" class=\"headerlink\" title=\"编译程序结构\"></a><strong>编译程序结构</strong></h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1740148009384.jpg\" alt=\"1740148009384\"></p>\n<h3 id=\"高级程序设计语言翻译的两种方式\"><a href=\"#高级程序设计语言翻译的两种方式\" class=\"headerlink\" title=\"高级程序设计语言翻译的两种方式\"></a>高级程序设计语言翻译的两种方式</h3><p>1.编译方式是指在程序运行之前，将高级语言程序完整地翻译成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。</p>\n<p>2.解释方式是指在程序运行时，逐条读取高级语言程序并翻译执行。解释器（Interpreter）是实现这一过程的软件工具。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250221230151097.png\" alt=\"image-20250221230151097\"></p>\n<h3 id=\"编译程序的自展\"><a href=\"#编译程序的自展\" class=\"headerlink\" title=\"编译程序的自展\"></a>编译程序的自展</h3><ol>\n<li><strong>定义</strong>：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。</li>\n<li><strong>过程</strong>：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。</li>\n<li><strong>优点</strong>：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。</li>\n</ol>\n<h3 id=\"编译程序的移植\"><a href=\"#编译程序的移植\" class=\"headerlink\" title=\"编译程序的移植\"></a>编译程序的移植</h3><ol>\n<li><strong>定义</strong>：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。</li>\n<li><strong>方法</strong>：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。</li>\n<li><strong>挑战</strong>：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。</li>\n</ol>\n<h3 id=\"编译程序的自动化\"><a href=\"#编译程序的自动化\" class=\"headerlink\" title=\"编译程序的自动化\"></a>编译程序的自动化</h3><p><strong>定义</strong>：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。</p>\n<h3 id=\"并行编译的概念\"><a href=\"#并行编译的概念\" class=\"headerlink\" title=\"并行编译的概念\"></a>并行编译的概念</h3><ol>\n<li><strong>定义</strong>：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。</li>\n<li><strong>原理</strong>：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。</li>\n</ol>\n<h2 id=\"形式语言理论\"><a href=\"#形式语言理论\" class=\"headerlink\" title=\"形式语言理论\"></a>形式语言理论</h2><p>形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。</p>\n<hr>\n<h3 id=\"1-形式语言的定义\"><a href=\"#1-形式语言的定义\" class=\"headerlink\" title=\"1. 形式语言的定义\"></a>1. <strong>形式语言的定义</strong></h3><p>形式语言是一种由符号组成的集合，这些符号按照一定的规则（语法）组合成字符串。形式语言的定义通常包括以下几个要素：</p>\n<ul>\n<li><strong>字母表（Alphabet）</strong>：一个有限的符号集合，通常用Σ（Sigma）表示。例如，Σ &#x3D; {a, b}。</li>\n<li><strong>字符串（String）</strong>：由字母表中的符号组成的有限序列。例如，对于Σ &#x3D; {a, b}，字符串可以是“ab”、“bbaa”等。</li>\n<li><strong>语言（Language）</strong>：由字母表上的所有字符串构成的集合。形式语言可以被定义为从字母表生成的字符串的集合。</li>\n</ul>\n<hr>\n<h3 id=\"2-形式文法（Formal-Grammar）\"><a href=\"#2-形式文法（Formal-Grammar）\" class=\"headerlink\" title=\"2. 形式文法（Formal Grammar）\"></a>2. <strong>形式文法（Formal Grammar）</strong></h3><p>形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：</p>\n<ol>\n<li><strong>非终结符（Non-terminals）</strong>：用于表示尚未生成的符号，通常用大写字母表示，如S、A、B等。</li>\n<li><strong>终结符（Terminals）</strong>：最终生成的符号，通常用小写字母表示，如a、b等。</li>\n<li><strong>产生式规则（Production Rules）</strong>：定义了如何将非终结符替换为其他符号的规则。例如，<code>S → aSb</code>。</li>\n<li><strong>起始符号（Start Symbol）</strong>：一个特殊的非终结符，表示生成过程的起点。</li>\n</ol>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>一个简单的文法：</p>\n<ul>\n<li>非终结符：S</li>\n<li>终结符：a, b</li>\n<li>产生式规则：<ul>\n<li><code>S → aSb</code></li>\n<li><code>S → ε</code>（ε表示空字符串）</li>\n</ul>\n</li>\n<li>起始符号：S</li>\n</ul>\n<p>这个文法可以生成所有形如<code>a^n b^n</code>（n≥0）的字符串，例如<code>&quot;&quot;</code>、<code>&quot;ab&quot;</code>、<code>&quot;aabb&quot;</code>等。</p>\n<h3 id=\"乔姆斯基文法层次的四个类型及其特点：\"><a href=\"#乔姆斯基文法层次的四个类型及其特点：\" class=\"headerlink\" title=\"乔姆斯基文法层次的四个类型及其特点：\"></a>乔姆斯基文法层次的四个类型及其特点：</h3><hr>\n<ol>\n<li><strong>0型文法（无限制文法，Type-0 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>α → β</code>，其中<code>α</code>和<code>β</code>是字母表上的符号序列，且<code>α</code>中至少包含一个非终结符。</li>\n<li><strong>特点</strong>：<ul>\n<li>产生式规则没有任何限制。</li>\n<li>可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：图灵机（Turing Machine）。</li>\n<li><strong>应用场景</strong>：图灵机是计算模型的理论基础，用于研究可计算性问题。</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li><strong>1型文法（上下文有关文法，Type-1 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>αAβ → αγβ</code>，其中<code>A</code>是非终结符，<code>α</code>、<code>β</code>和<code>γ</code>是符号序列，且<code>γ</code>不能为空。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换依赖于上下文（即<code>α</code>和<code>β</code>）。</li>\n<li>生成的语言称为上下文有关语言（Context-Sensitive Languages）。</li>\n<li>语言的复杂性介于上下文无关语言和递归可枚举语言之间。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：线性有界自动机（Linear Bounded Automata, LBA）。</li>\n<li><strong>应用场景</strong>：主要用于理论研究，实际应用较少。</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li><strong>2型文法（上下文无关文法，Type-2 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → α</code>，其中<code>A</code>是非终结符，<code>α</code>是符号序列（可以包含终结符和非终结符）。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换不依赖于上下文。</li>\n<li>生成的语言称为上下文无关语言（Context-Free Languages）。</li>\n<li>语言的复杂性较低，适合描述程序设计语言的语法结构。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：下推自动机（Pushdown Automata, PDA）。</li>\n<li><strong>应用场景</strong>：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。</li>\n</ul>\n<hr>\n<ol start=\"4\">\n<li><strong>3型文法（正则文法，Type-3 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → aB</code>或<code>A → a</code>，其中<code>A</code>和<code>B</code>是非终结符，<code>a</code>是终结符。<ul>\n<li>也可以写成<code>A → a</code>或<code>A → aB</code>的形式（右线性文法）。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li>生成的语言称为正则语言（Regular Languages）。</li>\n<li>语言的复杂性最低，适合描述简单的模式匹配。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。</li>\n<li><strong>应用场景</strong>：广泛用于词法分析器的设计，例如正则表达式匹配。</li>\n</ul>\n<h4 id=\"乔姆斯基文法层次的总结\"><a href=\"#乔姆斯基文法层次的总结\" class=\"headerlink\" title=\"乔姆斯基文法层次的总结\"></a>乔姆斯基文法层次的总结</h4><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">特点</th>\n<th align=\"left\">产生式规则</th>\n<th align=\"left\">语言类别</th>\n<th align=\"left\">对应的自动机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0型文法</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\"><code>α → β</code>（<code>α</code>中至少包含一个非终结符）</td>\n<td align=\"left\">递归可枚举语言</td>\n<td align=\"left\">图灵机</td>\n</tr>\n<tr>\n<td align=\"left\">1型文法</td>\n<td align=\"left\">上下文有关</td>\n<td align=\"left\"><code>αAβ → αγβ</code>（<code>γ</code>不能为空）</td>\n<td align=\"left\">上下文有关语言</td>\n<td align=\"left\">线性有界自动机</td>\n</tr>\n<tr>\n<td align=\"left\">2型文法</td>\n<td align=\"left\">上下文无关</td>\n<td align=\"left\"><code>A → α</code></td>\n<td align=\"left\">上下文无关语言</td>\n<td align=\"left\">下推自动机</td>\n</tr>\n<tr>\n<td align=\"left\">3型文法</td>\n<td align=\"left\">正则</td>\n<td align=\"left\"><code>A → aB</code> 或 <code>A → a</code></td>\n<td align=\"left\">正则语言</td>\n<td align=\"left\">有限状态自动机</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"引论\"><a href=\"#引论\" class=\"headerlink\" title=\"引论\"></a>引论</h2><h3 id=\"编译程序的工作过程：\"><a href=\"#编译程序的工作过程：\" class=\"headerlink\" title=\"编译程序的工作过程：\"></a><strong>编译程序的工作过程：</strong></h3><p><strong>1.词法分析</strong>：扫描源程序，分解和识别出每个单词，并把单词翻译成相应的机内表示。tips：单词是语言中最小的语义单位，如语言中的关键字(保留字或基本字)、标识符、常数、运算符和界限符。</p>\n<p><strong>2.语法分析</strong>：把单词符号串分解成各类语法单位，如表达式，语句等。判断是否正确，不正确则抛出错误位置和性质。</p>\n<p><strong>3.语义分析</strong>：保证标识符和常数的正确使用。</p>\n<p><strong>4.中间代码生成</strong>(非必要)：将源程序翻译成某种中间代码形式如三元式、四元式和逆波兰式等。</p>\n<p><strong>5.中间代码优化</strong>(非必要)：调整或改变中间代码某些操作次序以产生更高效的目标代码。</p>\n<p><strong>6.目标代码生成</strong>：将优化后的代码转换成等价的机器代码或汇编指令。</p>\n<h3 id=\"编译程序结构\"><a href=\"#编译程序结构\" class=\"headerlink\" title=\"编译程序结构\"></a><strong>编译程序结构</strong></h3><p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1740148009384.jpg\" alt=\"1740148009384\"></p>\n<h3 id=\"高级程序设计语言翻译的两种方式\"><a href=\"#高级程序设计语言翻译的两种方式\" class=\"headerlink\" title=\"高级程序设计语言翻译的两种方式\"></a>高级程序设计语言翻译的两种方式</h3><p>1.编译方式是指在程序运行之前，将高级语言程序完整地翻译成机器语言程序或中间代码。编译器（Compiler）是实现这一过程的软件工具。</p>\n<p>2.解释方式是指在程序运行时，逐条读取高级语言程序并翻译执行。解释器（Interpreter）是实现这一过程的软件工具。</p>\n<p><img src=\"/2025/02/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20250221230151097.png\" alt=\"image-20250221230151097\"></p>\n<h3 id=\"编译程序的自展\"><a href=\"#编译程序的自展\" class=\"headerlink\" title=\"编译程序的自展\"></a>编译程序的自展</h3><ol>\n<li><strong>定义</strong>：自展是指使用已有的编译器来编译自身的源代码，从而生成新的编译器。例如，C语言的编译器可以用C语言本身编写，然后用现有的C编译器来编译它，生成新的编译器。</li>\n<li><strong>过程</strong>：自展通常是一个迭代过程。例如，先用语言X1编写语言X2的编译器，然后用X2编写X3的编译器，依此类推。这种方法可以逐步扩展编译器的功能和语言的特性。</li>\n<li><strong>优点</strong>：自展可以保证编译器的正确性和可靠性，并且能够逐步优化编译器的性能。</li>\n</ol>\n<h3 id=\"编译程序的移植\"><a href=\"#编译程序的移植\" class=\"headerlink\" title=\"编译程序的移植\"></a>编译程序的移植</h3><ol>\n<li><strong>定义</strong>：移植是指将已有的编译器从一个平台迁移到另一个平台上运行。这可能涉及到对编译器代码的修改和适配。</li>\n<li><strong>方法</strong>：移植通常需要对目标平台的特性（如指令集、操作系统等）进行适配。例如，将一个在x86架构上运行的编译器移植到ARM架构上。</li>\n<li><strong>挑战</strong>：移植过程中可能需要解决不同平台之间的差异，如字节序、数据对齐等问题。</li>\n</ol>\n<h3 id=\"编译程序的自动化\"><a href=\"#编译程序的自动化\" class=\"headerlink\" title=\"编译程序的自动化\"></a>编译程序的自动化</h3><p><strong>定义</strong>：编译程序的自动化是指使用专门的工具或脚本，根据给定的规则和描述文件自动生成编译程序。例如，Make工具可以根据Makefile中的规则自动化构建项目。</p>\n<h3 id=\"并行编译的概念\"><a href=\"#并行编译的概念\" class=\"headerlink\" title=\"并行编译的概念\"></a>并行编译的概念</h3><ol>\n<li><strong>定义</strong>：并行编译是指将编译过程中的多个独立任务分配给多个处理器或计算节点同时执行，从而缩短整体编译时间。</li>\n<li><strong>原理</strong>：编译过程可以分为多个独立的任务（如编译不同的源文件），这些任务之间没有依赖关系，可以并行执行。</li>\n</ol>\n<h2 id=\"形式语言理论\"><a href=\"#形式语言理论\" class=\"headerlink\" title=\"形式语言理论\"></a>形式语言理论</h2><p>形式语言理论研究语言的结构、语法、语义以及语言的生成和识别机制。</p>\n<hr>\n<h3 id=\"1-形式语言的定义\"><a href=\"#1-形式语言的定义\" class=\"headerlink\" title=\"1. 形式语言的定义\"></a>1. <strong>形式语言的定义</strong></h3><p>形式语言是一种由符号组成的集合，这些符号按照一定的规则（语法）组合成字符串。形式语言的定义通常包括以下几个要素：</p>\n<ul>\n<li><strong>字母表（Alphabet）</strong>：一个有限的符号集合，通常用Σ（Sigma）表示。例如，Σ &#x3D; {a, b}。</li>\n<li><strong>字符串（String）</strong>：由字母表中的符号组成的有限序列。例如，对于Σ &#x3D; {a, b}，字符串可以是“ab”、“bbaa”等。</li>\n<li><strong>语言（Language）</strong>：由字母表上的所有字符串构成的集合。形式语言可以被定义为从字母表生成的字符串的集合。</li>\n</ul>\n<hr>\n<h3 id=\"2-形式文法（Formal-Grammar）\"><a href=\"#2-形式文法（Formal-Grammar）\" class=\"headerlink\" title=\"2. 形式文法（Formal Grammar）\"></a>2. <strong>形式文法（Formal Grammar）</strong></h3><p>形式文法是用于生成形式语言的规则系统。它定义了如何从基本符号组合成复杂的字符串。形式文法通常由以下四部分组成：</p>\n<ol>\n<li><strong>非终结符（Non-terminals）</strong>：用于表示尚未生成的符号，通常用大写字母表示，如S、A、B等。</li>\n<li><strong>终结符（Terminals）</strong>：最终生成的符号，通常用小写字母表示，如a、b等。</li>\n<li><strong>产生式规则（Production Rules）</strong>：定义了如何将非终结符替换为其他符号的规则。例如，<code>S → aSb</code>。</li>\n<li><strong>起始符号（Start Symbol）</strong>：一个特殊的非终结符，表示生成过程的起点。</li>\n</ol>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>一个简单的文法：</p>\n<ul>\n<li>非终结符：S</li>\n<li>终结符：a, b</li>\n<li>产生式规则：<ul>\n<li><code>S → aSb</code></li>\n<li><code>S → ε</code>（ε表示空字符串）</li>\n</ul>\n</li>\n<li>起始符号：S</li>\n</ul>\n<p>这个文法可以生成所有形如<code>a^n b^n</code>（n≥0）的字符串，例如<code>&quot;&quot;</code>、<code>&quot;ab&quot;</code>、<code>&quot;aabb&quot;</code>等。</p>\n<h3 id=\"乔姆斯基文法层次的四个类型及其特点：\"><a href=\"#乔姆斯基文法层次的四个类型及其特点：\" class=\"headerlink\" title=\"乔姆斯基文法层次的四个类型及其特点：\"></a>乔姆斯基文法层次的四个类型及其特点：</h3><hr>\n<ol>\n<li><strong>0型文法（无限制文法，Type-0 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>α → β</code>，其中<code>α</code>和<code>β</code>是字母表上的符号序列，且<code>α</code>中至少包含一个非终结符。</li>\n<li><strong>特点</strong>：<ul>\n<li>产生式规则没有任何限制。</li>\n<li>可以生成非常复杂的语言，包括递归可枚举语言（Recursively Enumerable Languages）。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：图灵机（Turing Machine）。</li>\n<li><strong>应用场景</strong>：图灵机是计算模型的理论基础，用于研究可计算性问题。</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li><strong>1型文法（上下文有关文法，Type-1 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>αAβ → αγβ</code>，其中<code>A</code>是非终结符，<code>α</code>、<code>β</code>和<code>γ</code>是符号序列，且<code>γ</code>不能为空。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换依赖于上下文（即<code>α</code>和<code>β</code>）。</li>\n<li>生成的语言称为上下文有关语言（Context-Sensitive Languages）。</li>\n<li>语言的复杂性介于上下文无关语言和递归可枚举语言之间。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：线性有界自动机（Linear Bounded Automata, LBA）。</li>\n<li><strong>应用场景</strong>：主要用于理论研究，实际应用较少。</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li><strong>2型文法（上下文无关文法，Type-2 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → α</code>，其中<code>A</code>是非终结符，<code>α</code>是符号序列（可以包含终结符和非终结符）。</li>\n<li><strong>特点</strong>：<ul>\n<li>非终结符的替换不依赖于上下文。</li>\n<li>生成的语言称为上下文无关语言（Context-Free Languages）。</li>\n<li>语言的复杂性较低，适合描述程序设计语言的语法结构。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：下推自动机（Pushdown Automata, PDA）。</li>\n<li><strong>应用场景</strong>：广泛用于编译器设计中的语法分析，例如LL(1)解析器、LR解析器等。</li>\n</ul>\n<hr>\n<ol start=\"4\">\n<li><strong>3型文法（正则文法，Type-3 Grammar）</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：产生式规则的形式为<code>A → aB</code>或<code>A → a</code>，其中<code>A</code>和<code>B</code>是非终结符，<code>a</code>是终结符。<ul>\n<li>也可以写成<code>A → a</code>或<code>A → aB</code>的形式（右线性文法）。</li>\n</ul>\n</li>\n<li><strong>特点</strong>：<ul>\n<li>生成的语言称为正则语言（Regular Languages）。</li>\n<li>语言的复杂性最低，适合描述简单的模式匹配。</li>\n</ul>\n</li>\n<li><strong>对应的自动机</strong>：有限状态自动机（Finite Automata, FA），包括确定性有限自动机（DFA）和非确定性有限自动机（NFA）。</li>\n<li><strong>应用场景</strong>：广泛用于词法分析器的设计，例如正则表达式匹配。</li>\n</ul>\n<h4 id=\"乔姆斯基文法层次的总结\"><a href=\"#乔姆斯基文法层次的总结\" class=\"headerlink\" title=\"乔姆斯基文法层次的总结\"></a>乔姆斯基文法层次的总结</h4><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">特点</th>\n<th align=\"left\">产生式规则</th>\n<th align=\"left\">语言类别</th>\n<th align=\"left\">对应的自动机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0型文法</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\"><code>α → β</code>（<code>α</code>中至少包含一个非终结符）</td>\n<td align=\"left\">递归可枚举语言</td>\n<td align=\"left\">图灵机</td>\n</tr>\n<tr>\n<td align=\"left\">1型文法</td>\n<td align=\"left\">上下文有关</td>\n<td align=\"left\"><code>αAβ → αγβ</code>（<code>γ</code>不能为空）</td>\n<td align=\"left\">上下文有关语言</td>\n<td align=\"left\">线性有界自动机</td>\n</tr>\n<tr>\n<td align=\"left\">2型文法</td>\n<td align=\"left\">上下文无关</td>\n<td align=\"left\"><code>A → α</code></td>\n<td align=\"left\">上下文无关语言</td>\n<td align=\"left\">下推自动机</td>\n</tr>\n<tr>\n<td align=\"left\">3型文法</td>\n<td align=\"left\">正则</td>\n<td align=\"left\"><code>A → aB</code> 或 <code>A → a</code></td>\n<td align=\"left\">正则语言</td>\n<td align=\"left\">有限状态自动机</td>\n</tr>\n</tbody></table>\n"},{"title":"操作系统","date":"2025-02-17T16:00:00.000Z","updated":"2025-02-18T16:00:00.000Z","_content":"\n## 操作系统概述\n\n### 定义\n\n操作系统(Operating System;OS)是**计算机硬件与用户之间的接口**(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入/输出设备等），并提供用户与计算机交互的界面。\n\n### 特征\n\n最基本特征为**并发**和**共享**(二者互为存在条件)\n\n**并发**：是指两个或多个活动在同一给定的时间段中进行\n\n**共享**：是指计算机系统中的资源被多个进程所共用\n\n**异步**：进程以不可预知的速度向前推进\n\n**虚拟**：把一个物理上的实体变为若干个逻辑上的对应物\n\n关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。\n\n### 功能\n\n**1.计算机资源管理：**\n\n**处理器管理**:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等\n\n**存储器管理**:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等\n\n**文件管理**:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等\n\n**设备管理**:主要包括缓冲管理、设备分配、设备处理、虚拟设备等\n\n2.**作为用户与计算机硬件系统之间的接口**：**命令接口和程序接口**\n\n3.**用作扩充机器**。\n\n### 一些基本概念\n\n- 特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。\n- 非特权指令：普通的运算指令\n- 内核程序：系统的管理者，可以执行一切指令，运行在核心态\n- 应用程序：普通用户程序只能执行非特权程序，运行在用户态\n\n**处理器状态：**\n\n- 用户态(目态)：CPU只能执行非特权指令\n- 核心态(管态、内核态)：可以执行所有指令\n- 用户态到内核态：通过中断或异常**(是硬件完成的)**\n- 核心态到用户态：特权指令psw的标志位，0用户态，1核心态。\n\n**原语：**\n\n- 处在操作系统的最底层，是最接近硬件的部分\n- 这些程序的运行具有原子性，其操作只能一气呵成\n- 这些程序的运行时间都较短，而且调用频繁\n\n## 进程管理\n\n### **进程（Process）**\n\n进程是**操作系统进行资源分配和调度的基本单位**，是**程序在处理器上的一次运行活动**。进程包括程序控制块、PCB、程序段、数据段。\n\nPCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息\n\n**特点：**\n\n- **动态性(基本特征)**：进程是动态的实体，有创建、运行、阻塞、终止等状态。\n- **并发性**：多个进程可以同时运行，共享系统资源。\n- **独立性**：**进程是资源分配的基本单位**，具有独立的资源和运行环境。\n- 异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。\n- 结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。\n\n**进程状态：**\n\n- **就绪态（Ready）**：进程已准备好运行，等待CPU分配。\n- **运行态（Running）**：进程正在CPU上运行。\n- **阻塞态（Blocked）**：进程因等待某种事件（如I/O操作完成）而暂停运行。\n\n进程的状态转换：\n\n![](操作系统/image-20250218154211332.png)\n\n**线程（Thread）**\n\n**线程是进程中的一个执行单元，是CPU调度的基本单位**。一个进程可以包含多个线程，它们共享进程的资源。\n**特点：**\n\n- **轻量级**：线程的创建和切换开销小。\n- **并发性**：多个线程可以并发执行，提高程序的效率。\n- **共享资源**：线程共享所属进程的资源，如内存空间。\n\n**线程与进程的区别：**\n\n- 线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。\n- 进程是资源分配的基本单位，线程是CPU调度的基本单位。\n\nCPU调度常用算法\n\n- **先来先服务（FCFS，First-Come-First-Served）**：按进程到达的顺序调度，简单但可能导致饥饿现象。\n\n- **最短作业优先（SJF，Shortest Job First）**：优先调度运行时间最短的进程，但需要预估进程运行时间。\n\n- **优先级调度（Priority Scheduling）**：根据进程的优先级进行调度，优先级高的进程优先运行。\n\n- **最高响应比优先（HRRN,Highest Response Ratio Next）**：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的**响应比**来选择下一个执行的进程，响应比公式为：\n\n  **响应比 = 1 + 等待时间 / 执行时间**\n\n  - **特点**：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。\n  - **优点**：兼顾公平性和效率，避免饥饿问题，适合批处理系统。\n  - **缺点**：计算复杂度较高，调度开销大。\n  - **适用场景**：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。\n\n- **时间片轮转（RR，Round-Robin）**：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。\n\n### 进程的通信\n\n1）进程通信是指进程之间的信息交换。\n\n**低级通信**：PV操作\n\n**高级通信**：是指以较高的效率传输大量数据的通信方式。\n\n高级通信方法主要有三类：\n\n1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。\n\n2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。\n\n3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。\n\n**临界区**：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段**代码**称为临界区。\n\n进程同步机制应遵循的**原则**：空闲让进、忙则等待、有限等待、让权等待。\n\n实现进程同步的**机制**有：\n\n- **互斥锁（Mutex）**：确保同一时间只有一个线程可以访问共享资源。\n- **信号量（Semaphore）**：用于控制对共享资源的访问数量。\n- **条件变量（Condition Variable）**：用于线程间的同步，等待某个条件满足后再执行。\n\n#### PV操作解决生产者-消费者问题\n\n**信号量定义**\n\n- `mutex`：用于保护缓冲区的互斥访问，初始值为1。\n- `empty`：表示缓冲区中空闲位置的数量，初始值为`N`（缓冲区大小）。\n- `full`：表示缓冲区中已占用位置的数量，初始值为0。\n\n**生产者伪代码**\n\n```c\nsemaphore mutex = 1;  // 互斥信号量\nsemaphore empty = N;  // 空位信号量，初始值为缓冲区大小\nsemaphore full = 0;   // 满位信号量，初始值为0\n\nvoid producer() {\n    while (true) {\n        produce_item();  // 生产一个产品\n\t\t//消耗一个产品进入空闲缓冲区\n        P(empty);        // 等待空位，减少空位计数\n        P(mutex);        // 进入临界区\n\n        // 将产品放入缓冲区\n        put_item_into_buffer();\n\n        V(mutex);        // 离开临界区\n        V(full);         // 增加满位计数，通知消费者\n    }\n}\n```\n\n**消费者伪代码**\n\n```c\nvoid consumer() {\n    while (true) {\n        P(full);         // 等待有产品，减少满位计数\n        P(mutex);        // 进入临界区\n\n        // 从缓冲区取出产品\n        take_item_from_buffer();\n\n        V(mutex);        // 离开临界区\n        V(empty);        // 增加空位计数，通知生产者\n        consume_item();  // 消费产品\n    }\n}\n```\n\n**运行示例**\n\n假设缓冲区大小为`N`：\n\n- 初始时，`empty = N`，`full = 0`。\n- 生产者执行`P(empty)`，`empty`减1，表示占用一个空位。\n- 生产者执行`V(full)`，`full`加1，表示增加一个满位。\n- 消费者执行`P(full)`，`full`减1，表示取出一个产品。\n- 消费者执行`V(empty)`，`empty`加1，表示释放一个空位。","source":"_posts/操作系统.md","raw":"---\ntitle: 操作系统\ndate: 2025-02-18\nupdated: 2025-02-19\ncategories: 计算机基础\n---\n\n## 操作系统概述\n\n### 定义\n\n操作系统(Operating System;OS)是**计算机硬件与用户之间的接口**(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入/输出设备等），并提供用户与计算机交互的界面。\n\n### 特征\n\n最基本特征为**并发**和**共享**(二者互为存在条件)\n\n**并发**：是指两个或多个活动在同一给定的时间段中进行\n\n**共享**：是指计算机系统中的资源被多个进程所共用\n\n**异步**：进程以不可预知的速度向前推进\n\n**虚拟**：把一个物理上的实体变为若干个逻辑上的对应物\n\n关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。\n\n### 功能\n\n**1.计算机资源管理：**\n\n**处理器管理**:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等\n\n**存储器管理**:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等\n\n**文件管理**:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等\n\n**设备管理**:主要包括缓冲管理、设备分配、设备处理、虚拟设备等\n\n2.**作为用户与计算机硬件系统之间的接口**：**命令接口和程序接口**\n\n3.**用作扩充机器**。\n\n### 一些基本概念\n\n- 特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。\n- 非特权指令：普通的运算指令\n- 内核程序：系统的管理者，可以执行一切指令，运行在核心态\n- 应用程序：普通用户程序只能执行非特权程序，运行在用户态\n\n**处理器状态：**\n\n- 用户态(目态)：CPU只能执行非特权指令\n- 核心态(管态、内核态)：可以执行所有指令\n- 用户态到内核态：通过中断或异常**(是硬件完成的)**\n- 核心态到用户态：特权指令psw的标志位，0用户态，1核心态。\n\n**原语：**\n\n- 处在操作系统的最底层，是最接近硬件的部分\n- 这些程序的运行具有原子性，其操作只能一气呵成\n- 这些程序的运行时间都较短，而且调用频繁\n\n## 进程管理\n\n### **进程（Process）**\n\n进程是**操作系统进行资源分配和调度的基本单位**，是**程序在处理器上的一次运行活动**。进程包括程序控制块、PCB、程序段、数据段。\n\nPCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息\n\n**特点：**\n\n- **动态性(基本特征)**：进程是动态的实体，有创建、运行、阻塞、终止等状态。\n- **并发性**：多个进程可以同时运行，共享系统资源。\n- **独立性**：**进程是资源分配的基本单位**，具有独立的资源和运行环境。\n- 异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。\n- 结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。\n\n**进程状态：**\n\n- **就绪态（Ready）**：进程已准备好运行，等待CPU分配。\n- **运行态（Running）**：进程正在CPU上运行。\n- **阻塞态（Blocked）**：进程因等待某种事件（如I/O操作完成）而暂停运行。\n\n进程的状态转换：\n\n![](操作系统/image-20250218154211332.png)\n\n**线程（Thread）**\n\n**线程是进程中的一个执行单元，是CPU调度的基本单位**。一个进程可以包含多个线程，它们共享进程的资源。\n**特点：**\n\n- **轻量级**：线程的创建和切换开销小。\n- **并发性**：多个线程可以并发执行，提高程序的效率。\n- **共享资源**：线程共享所属进程的资源，如内存空间。\n\n**线程与进程的区别：**\n\n- 线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。\n- 进程是资源分配的基本单位，线程是CPU调度的基本单位。\n\nCPU调度常用算法\n\n- **先来先服务（FCFS，First-Come-First-Served）**：按进程到达的顺序调度，简单但可能导致饥饿现象。\n\n- **最短作业优先（SJF，Shortest Job First）**：优先调度运行时间最短的进程，但需要预估进程运行时间。\n\n- **优先级调度（Priority Scheduling）**：根据进程的优先级进行调度，优先级高的进程优先运行。\n\n- **最高响应比优先（HRRN,Highest Response Ratio Next）**：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的**响应比**来选择下一个执行的进程，响应比公式为：\n\n  **响应比 = 1 + 等待时间 / 执行时间**\n\n  - **特点**：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。\n  - **优点**：兼顾公平性和效率，避免饥饿问题，适合批处理系统。\n  - **缺点**：计算复杂度较高，调度开销大。\n  - **适用场景**：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。\n\n- **时间片轮转（RR，Round-Robin）**：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。\n\n### 进程的通信\n\n1）进程通信是指进程之间的信息交换。\n\n**低级通信**：PV操作\n\n**高级通信**：是指以较高的效率传输大量数据的通信方式。\n\n高级通信方法主要有三类：\n\n1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。\n\n2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。\n\n3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。\n\n**临界区**：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段**代码**称为临界区。\n\n进程同步机制应遵循的**原则**：空闲让进、忙则等待、有限等待、让权等待。\n\n实现进程同步的**机制**有：\n\n- **互斥锁（Mutex）**：确保同一时间只有一个线程可以访问共享资源。\n- **信号量（Semaphore）**：用于控制对共享资源的访问数量。\n- **条件变量（Condition Variable）**：用于线程间的同步，等待某个条件满足后再执行。\n\n#### PV操作解决生产者-消费者问题\n\n**信号量定义**\n\n- `mutex`：用于保护缓冲区的互斥访问，初始值为1。\n- `empty`：表示缓冲区中空闲位置的数量，初始值为`N`（缓冲区大小）。\n- `full`：表示缓冲区中已占用位置的数量，初始值为0。\n\n**生产者伪代码**\n\n```c\nsemaphore mutex = 1;  // 互斥信号量\nsemaphore empty = N;  // 空位信号量，初始值为缓冲区大小\nsemaphore full = 0;   // 满位信号量，初始值为0\n\nvoid producer() {\n    while (true) {\n        produce_item();  // 生产一个产品\n\t\t//消耗一个产品进入空闲缓冲区\n        P(empty);        // 等待空位，减少空位计数\n        P(mutex);        // 进入临界区\n\n        // 将产品放入缓冲区\n        put_item_into_buffer();\n\n        V(mutex);        // 离开临界区\n        V(full);         // 增加满位计数，通知消费者\n    }\n}\n```\n\n**消费者伪代码**\n\n```c\nvoid consumer() {\n    while (true) {\n        P(full);         // 等待有产品，减少满位计数\n        P(mutex);        // 进入临界区\n\n        // 从缓冲区取出产品\n        take_item_from_buffer();\n\n        V(mutex);        // 离开临界区\n        V(empty);        // 增加空位计数，通知生产者\n        consume_item();  // 消费产品\n    }\n}\n```\n\n**运行示例**\n\n假设缓冲区大小为`N`：\n\n- 初始时，`empty = N`，`full = 0`。\n- 生产者执行`P(empty)`，`empty`减1，表示占用一个空位。\n- 生产者执行`V(full)`，`full`加1，表示增加一个满位。\n- 消费者执行`P(full)`，`full`减1，表示取出一个产品。\n- 消费者执行`V(empty)`，`empty`加1，表示释放一个空位。","slug":"操作系统","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3e3000qm0otf930464y","content":"<h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>操作系统(Operating System;OS)是<strong>计算机硬件与用户之间的接口</strong>(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入&#x2F;输出设备等），并提供用户与计算机交互的界面。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><p>最基本特征为<strong>并发</strong>和<strong>共享</strong>(二者互为存在条件)</p>\n<p><strong>并发</strong>：是指两个或多个活动在同一给定的时间段中进行</p>\n<p><strong>共享</strong>：是指计算机系统中的资源被多个进程所共用</p>\n<p><strong>异步</strong>：进程以不可预知的速度向前推进</p>\n<p><strong>虚拟</strong>：把一个物理上的实体变为若干个逻辑上的对应物</p>\n<p>关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p><strong>1.计算机资源管理：</strong></p>\n<p><strong>处理器管理</strong>:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等</p>\n<p><strong>存储器管理</strong>:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等</p>\n<p><strong>文件管理</strong>:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等</p>\n<p><strong>设备管理</strong>:主要包括缓冲管理、设备分配、设备处理、虚拟设备等</p>\n<p>2.<strong>作为用户与计算机硬件系统之间的接口</strong>：<strong>命令接口和程序接口</strong></p>\n<p>3.<strong>用作扩充机器</strong>。</p>\n<h3 id=\"一些基本概念\"><a href=\"#一些基本概念\" class=\"headerlink\" title=\"一些基本概念\"></a>一些基本概念</h3><ul>\n<li>特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。</li>\n<li>非特权指令：普通的运算指令</li>\n<li>内核程序：系统的管理者，可以执行一切指令，运行在核心态</li>\n<li>应用程序：普通用户程序只能执行非特权程序，运行在用户态</li>\n</ul>\n<p><strong>处理器状态：</strong></p>\n<ul>\n<li>用户态(目态)：CPU只能执行非特权指令</li>\n<li>核心态(管态、内核态)：可以执行所有指令</li>\n<li>用户态到内核态：通过中断或异常**(是硬件完成的)**</li>\n<li>核心态到用户态：特权指令psw的标志位，0用户态，1核心态。</li>\n</ul>\n<p><strong>原语：</strong></p>\n<ul>\n<li>处在操作系统的最底层，是最接近硬件的部分</li>\n<li>这些程序的运行具有原子性，其操作只能一气呵成</li>\n<li>这些程序的运行时间都较短，而且调用频繁</li>\n</ul>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><h3 id=\"进程（Process）\"><a href=\"#进程（Process）\" class=\"headerlink\" title=\"进程（Process）\"></a><strong>进程（Process）</strong></h3><p>进程是<strong>操作系统进行资源分配和调度的基本单位</strong>，是<strong>程序在处理器上的一次运行活动</strong>。进程包括程序控制块、PCB、程序段、数据段。</p>\n<p>PCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>动态性(基本特征)</strong>：进程是动态的实体，有创建、运行、阻塞、终止等状态。</li>\n<li><strong>并发性</strong>：多个进程可以同时运行，共享系统资源。</li>\n<li><strong>独立性</strong>：<strong>进程是资源分配的基本单位</strong>，具有独立的资源和运行环境。</li>\n<li>异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。</li>\n<li>结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。</li>\n</ul>\n<p><strong>进程状态：</strong></p>\n<ul>\n<li><strong>就绪态（Ready）</strong>：进程已准备好运行，等待CPU分配。</li>\n<li><strong>运行态（Running）</strong>：进程正在CPU上运行。</li>\n<li><strong>阻塞态（Blocked）</strong>：进程因等待某种事件（如I&#x2F;O操作完成）而暂停运行。</li>\n</ul>\n<p>进程的状态转换：</p>\n<p><img src=\"/2025/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20250218154211332.png\"></p>\n<p><strong>线程（Thread）</strong></p>\n<p><strong>线程是进程中的一个执行单元，是CPU调度的基本单位</strong>。一个进程可以包含多个线程，它们共享进程的资源。<br><strong>特点：</strong></p>\n<ul>\n<li><strong>轻量级</strong>：线程的创建和切换开销小。</li>\n<li><strong>并发性</strong>：多个线程可以并发执行，提高程序的效率。</li>\n<li><strong>共享资源</strong>：线程共享所属进程的资源，如内存空间。</li>\n</ul>\n<p><strong>线程与进程的区别：</strong></p>\n<ul>\n<li>线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。</li>\n<li>进程是资源分配的基本单位，线程是CPU调度的基本单位。</li>\n</ul>\n<p>CPU调度常用算法</p>\n<ul>\n<li><p><strong>先来先服务（FCFS，First-Come-First-Served）</strong>：按进程到达的顺序调度，简单但可能导致饥饿现象。</p>\n</li>\n<li><p><strong>最短作业优先（SJF，Shortest Job First）</strong>：优先调度运行时间最短的进程，但需要预估进程运行时间。</p>\n</li>\n<li><p><strong>优先级调度（Priority Scheduling）</strong>：根据进程的优先级进行调度，优先级高的进程优先运行。</p>\n</li>\n<li><p><strong>最高响应比优先（HRRN,Highest Response Ratio Next）</strong>：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的<strong>响应比</strong>来选择下一个执行的进程，响应比公式为：</p>\n<p><strong>响应比 &#x3D; 1 + 等待时间 &#x2F; 执行时间</strong></p>\n<ul>\n<li><strong>特点</strong>：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。</li>\n<li><strong>优点</strong>：兼顾公平性和效率，避免饥饿问题，适合批处理系统。</li>\n<li><strong>缺点</strong>：计算复杂度较高，调度开销大。</li>\n<li><strong>适用场景</strong>：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。</li>\n</ul>\n</li>\n<li><p><strong>时间片轮转（RR，Round-Robin）</strong>：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。</p>\n</li>\n</ul>\n<h3 id=\"进程的通信\"><a href=\"#进程的通信\" class=\"headerlink\" title=\"进程的通信\"></a>进程的通信</h3><p>1）进程通信是指进程之间的信息交换。</p>\n<p><strong>低级通信</strong>：PV操作</p>\n<p><strong>高级通信</strong>：是指以较高的效率传输大量数据的通信方式。</p>\n<p>高级通信方法主要有三类：</p>\n<p>1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。</p>\n<p>2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。</p>\n<p>3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。</p>\n<p><strong>临界区</strong>：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段<strong>代码</strong>称为临界区。</p>\n<p>进程同步机制应遵循的<strong>原则</strong>：空闲让进、忙则等待、有限等待、让权等待。</p>\n<p>实现进程同步的<strong>机制</strong>有：</p>\n<ul>\n<li><strong>互斥锁（Mutex）</strong>：确保同一时间只有一个线程可以访问共享资源。</li>\n<li><strong>信号量（Semaphore）</strong>：用于控制对共享资源的访问数量。</li>\n<li><strong>条件变量（Condition Variable）</strong>：用于线程间的同步，等待某个条件满足后再执行。</li>\n</ul>\n<h4 id=\"PV操作解决生产者-消费者问题\"><a href=\"#PV操作解决生产者-消费者问题\" class=\"headerlink\" title=\"PV操作解决生产者-消费者问题\"></a>PV操作解决生产者-消费者问题</h4><p><strong>信号量定义</strong></p>\n<ul>\n<li><code>mutex</code>：用于保护缓冲区的互斥访问，初始值为1。</li>\n<li><code>empty</code>：表示缓冲区中空闲位置的数量，初始值为<code>N</code>（缓冲区大小）。</li>\n<li><code>full</code>：表示缓冲区中已占用位置的数量，初始值为0。</li>\n</ul>\n<p><strong>生产者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semaphore mutex = <span class=\"number\">1</span>;  <span class=\"comment\">// 互斥信号量</span></span><br><span class=\"line\">semaphore empty = N;  <span class=\"comment\">// 空位信号量，初始值为缓冲区大小</span></span><br><span class=\"line\">semaphore full = <span class=\"number\">0</span>;   <span class=\"comment\">// 满位信号量，初始值为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">producer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        produce_item();  <span class=\"comment\">// 生产一个产品</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//消耗一个产品进入空闲缓冲区</span></span><br><span class=\"line\">        P(empty);        <span class=\"comment\">// 等待空位，减少空位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将产品放入缓冲区</span></span><br><span class=\"line\">        put_item_into_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(full);         <span class=\"comment\">// 增加满位计数，通知消费者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">consumer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        P(full);         <span class=\"comment\">// 等待有产品，减少满位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从缓冲区取出产品</span></span><br><span class=\"line\">        take_item_from_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(empty);        <span class=\"comment\">// 增加空位计数，通知生产者</span></span><br><span class=\"line\">        consume_item();  <span class=\"comment\">// 消费产品</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行示例</strong></p>\n<p>假设缓冲区大小为<code>N</code>：</p>\n<ul>\n<li>初始时，<code>empty = N</code>，<code>full = 0</code>。</li>\n<li>生产者执行<code>P(empty)</code>，<code>empty</code>减1，表示占用一个空位。</li>\n<li>生产者执行<code>V(full)</code>，<code>full</code>加1，表示增加一个满位。</li>\n<li>消费者执行<code>P(full)</code>，<code>full</code>减1，表示取出一个产品。</li>\n<li>消费者执行<code>V(empty)</code>，<code>empty</code>加1，表示释放一个空位。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>操作系统(Operating System;OS)是<strong>计算机硬件与用户之间的接口</strong>(系统软件程序)，它管理和调度硬件资源（如CPU、内存、输入&#x2F;输出设备等），并提供用户与计算机交互的界面。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><p>最基本特征为<strong>并发</strong>和<strong>共享</strong>(二者互为存在条件)</p>\n<p><strong>并发</strong>：是指两个或多个活动在同一给定的时间段中进行</p>\n<p><strong>共享</strong>：是指计算机系统中的资源被多个进程所共用</p>\n<p><strong>异步</strong>：进程以不可预知的速度向前推进</p>\n<p><strong>虚拟</strong>：把一个物理上的实体变为若干个逻辑上的对应物</p>\n<p>关于并发和并行的区别：可以想象并发是有两排队伍排一个窗口，而并行是两个队伍分别排两个窗口。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p><strong>1.计算机资源管理：</strong></p>\n<p><strong>处理器管理</strong>:主要包括进程控制、进程同步、进程通信、死锁处理、处理器调度等</p>\n<p><strong>存储器管理</strong>:主要包括内存分配与回收、地址映射、内存保护与共享、内存扩充等</p>\n<p><strong>文件管理</strong>:主要包括文件存储空间的管理、目录管理、文件读写管理和保护等</p>\n<p><strong>设备管理</strong>:主要包括缓冲管理、设备分配、设备处理、虚拟设备等</p>\n<p>2.<strong>作为用户与计算机硬件系统之间的接口</strong>：<strong>命令接口和程序接口</strong></p>\n<p>3.<strong>用作扩充机器</strong>。</p>\n<h3 id=\"一些基本概念\"><a href=\"#一些基本概念\" class=\"headerlink\" title=\"一些基本概念\"></a>一些基本概念</h3><ul>\n<li>特权指令：不允许用户程序使用(只允许操作系统使用)如IO指令、中断指令。</li>\n<li>非特权指令：普通的运算指令</li>\n<li>内核程序：系统的管理者，可以执行一切指令，运行在核心态</li>\n<li>应用程序：普通用户程序只能执行非特权程序，运行在用户态</li>\n</ul>\n<p><strong>处理器状态：</strong></p>\n<ul>\n<li>用户态(目态)：CPU只能执行非特权指令</li>\n<li>核心态(管态、内核态)：可以执行所有指令</li>\n<li>用户态到内核态：通过中断或异常**(是硬件完成的)**</li>\n<li>核心态到用户态：特权指令psw的标志位，0用户态，1核心态。</li>\n</ul>\n<p><strong>原语：</strong></p>\n<ul>\n<li>处在操作系统的最底层，是最接近硬件的部分</li>\n<li>这些程序的运行具有原子性，其操作只能一气呵成</li>\n<li>这些程序的运行时间都较短，而且调用频繁</li>\n</ul>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><h3 id=\"进程（Process）\"><a href=\"#进程（Process）\" class=\"headerlink\" title=\"进程（Process）\"></a><strong>进程（Process）</strong></h3><p>进程是<strong>操作系统进行资源分配和调度的基本单位</strong>，是<strong>程序在处理器上的一次运行活动</strong>。进程包括程序控制块、PCB、程序段、数据段。</p>\n<p>PCB：包含操作系统对其进行管理所需的各种信息，如进程描述信息、控制信息、管理信息、资源分配清单和处理器相关信息</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>动态性(基本特征)</strong>：进程是动态的实体，有创建、运行、阻塞、终止等状态。</li>\n<li><strong>并发性</strong>：多个进程可以同时运行，共享系统资源。</li>\n<li><strong>独立性</strong>：<strong>进程是资源分配的基本单位</strong>，具有独立的资源和运行环境。</li>\n<li>异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。</li>\n<li>结构性：每个进程都配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。</li>\n</ul>\n<p><strong>进程状态：</strong></p>\n<ul>\n<li><strong>就绪态（Ready）</strong>：进程已准备好运行，等待CPU分配。</li>\n<li><strong>运行态（Running）</strong>：进程正在CPU上运行。</li>\n<li><strong>阻塞态（Blocked）</strong>：进程因等待某种事件（如I&#x2F;O操作完成）而暂停运行。</li>\n</ul>\n<p>进程的状态转换：</p>\n<p><img src=\"/2025/02/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20250218154211332.png\"></p>\n<p><strong>线程（Thread）</strong></p>\n<p><strong>线程是进程中的一个执行单元，是CPU调度的基本单位</strong>。一个进程可以包含多个线程，它们共享进程的资源。<br><strong>特点：</strong></p>\n<ul>\n<li><strong>轻量级</strong>：线程的创建和切换开销小。</li>\n<li><strong>并发性</strong>：多个线程可以并发执行，提高程序的效率。</li>\n<li><strong>共享资源</strong>：线程共享所属进程的资源，如内存空间。</li>\n</ul>\n<p><strong>线程与进程的区别：</strong></p>\n<ul>\n<li>线程是进程的子集，线程的切换更快，但线程之间共享资源可能导致数据竞争和同步问题。</li>\n<li>进程是资源分配的基本单位，线程是CPU调度的基本单位。</li>\n</ul>\n<p>CPU调度常用算法</p>\n<ul>\n<li><p><strong>先来先服务（FCFS，First-Come-First-Served）</strong>：按进程到达的顺序调度，简单但可能导致饥饿现象。</p>\n</li>\n<li><p><strong>最短作业优先（SJF，Shortest Job First）</strong>：优先调度运行时间最短的进程，但需要预估进程运行时间。</p>\n</li>\n<li><p><strong>优先级调度（Priority Scheduling）</strong>：根据进程的优先级进行调度，优先级高的进程优先运行。</p>\n</li>\n<li><p><strong>最高响应比优先（HRRN,Highest Response Ratio Next）</strong>：是一种非抢占式的动态调度算法，主要用于平衡短作业和长作业的执行需求。它通过计算每个进程的<strong>响应比</strong>来选择下一个执行的进程，响应比公式为：</p>\n<p><strong>响应比 &#x3D; 1 + 等待时间 &#x2F; 执行时间</strong></p>\n<ul>\n<li><strong>特点</strong>：随着进程等待时间增加，响应比升高，避免长作业饥饿，同时兼顾短作业的快速响应。</li>\n<li><strong>优点</strong>：兼顾公平性和效率，避免饥饿问题，适合批处理系统。</li>\n<li><strong>缺点</strong>：计算复杂度较高，调度开销大。</li>\n<li><strong>适用场景</strong>：适用于需要平衡长短作业的系统，提高吞吐量和响应速度。</li>\n</ul>\n</li>\n<li><p><strong>时间片轮转（RR，Round-Robin）</strong>：将CPU时间划分为时间片，按顺序分配给就绪队列中的进程，适合分时系统。</p>\n</li>\n</ul>\n<h3 id=\"进程的通信\"><a href=\"#进程的通信\" class=\"headerlink\" title=\"进程的通信\"></a>进程的通信</h3><p>1）进程通信是指进程之间的信息交换。</p>\n<p><strong>低级通信</strong>：PV操作</p>\n<p><strong>高级通信</strong>：是指以较高的效率传输大量数据的通信方式。</p>\n<p>高级通信方法主要有三类：</p>\n<p>1.共享存储：基于共享数据结构的通信方式(如生产者和消费者)基于共享存储区的通信方式。</p>\n<p>2.消息传递：是以格式化的消息为单位，利用原语传递消息，分为直接通信和间接通信。</p>\n<p>3.管道通信：是消息传递的一种特殊方式，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又称pipe文件。</p>\n<p><strong>临界区</strong>：每个进程中访问临界资源(一次只允许一个进程使用的资源)的那段<strong>代码</strong>称为临界区。</p>\n<p>进程同步机制应遵循的<strong>原则</strong>：空闲让进、忙则等待、有限等待、让权等待。</p>\n<p>实现进程同步的<strong>机制</strong>有：</p>\n<ul>\n<li><strong>互斥锁（Mutex）</strong>：确保同一时间只有一个线程可以访问共享资源。</li>\n<li><strong>信号量（Semaphore）</strong>：用于控制对共享资源的访问数量。</li>\n<li><strong>条件变量（Condition Variable）</strong>：用于线程间的同步，等待某个条件满足后再执行。</li>\n</ul>\n<h4 id=\"PV操作解决生产者-消费者问题\"><a href=\"#PV操作解决生产者-消费者问题\" class=\"headerlink\" title=\"PV操作解决生产者-消费者问题\"></a>PV操作解决生产者-消费者问题</h4><p><strong>信号量定义</strong></p>\n<ul>\n<li><code>mutex</code>：用于保护缓冲区的互斥访问，初始值为1。</li>\n<li><code>empty</code>：表示缓冲区中空闲位置的数量，初始值为<code>N</code>（缓冲区大小）。</li>\n<li><code>full</code>：表示缓冲区中已占用位置的数量，初始值为0。</li>\n</ul>\n<p><strong>生产者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semaphore mutex = <span class=\"number\">1</span>;  <span class=\"comment\">// 互斥信号量</span></span><br><span class=\"line\">semaphore empty = N;  <span class=\"comment\">// 空位信号量，初始值为缓冲区大小</span></span><br><span class=\"line\">semaphore full = <span class=\"number\">0</span>;   <span class=\"comment\">// 满位信号量，初始值为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">producer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        produce_item();  <span class=\"comment\">// 生产一个产品</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//消耗一个产品进入空闲缓冲区</span></span><br><span class=\"line\">        P(empty);        <span class=\"comment\">// 等待空位，减少空位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将产品放入缓冲区</span></span><br><span class=\"line\">        put_item_into_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(full);         <span class=\"comment\">// 增加满位计数，通知消费者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者伪代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">consumer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        P(full);         <span class=\"comment\">// 等待有产品，减少满位计数</span></span><br><span class=\"line\">        P(mutex);        <span class=\"comment\">// 进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从缓冲区取出产品</span></span><br><span class=\"line\">        take_item_from_buffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        V(mutex);        <span class=\"comment\">// 离开临界区</span></span><br><span class=\"line\">        V(empty);        <span class=\"comment\">// 增加空位计数，通知生产者</span></span><br><span class=\"line\">        consume_item();  <span class=\"comment\">// 消费产品</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行示例</strong></p>\n<p>假设缓冲区大小为<code>N</code>：</p>\n<ul>\n<li>初始时，<code>empty = N</code>，<code>full = 0</code>。</li>\n<li>生产者执行<code>P(empty)</code>，<code>empty</code>减1，表示占用一个空位。</li>\n<li>生产者执行<code>V(full)</code>，<code>full</code>加1，表示增加一个满位。</li>\n<li>消费者执行<code>P(full)</code>，<code>full</code>减1，表示取出一个产品。</li>\n<li>消费者执行<code>V(empty)</code>，<code>empty</code>加1，表示释放一个空位。</li>\n</ul>\n"},{"title":"计算机科学学习记录","date":"2025-02-19T16:00:00.000Z","updated":"2025-02-19T16:00:00.000Z","_content":"\n**逻辑门的实现**\n\nNOT:![image-20250219192653645](计算机科学记录/image-20250219192653645.png)\n\nAND:\n\n![image-20250219192740802](计算机科学记录/image-20250219192740802.png)\n\nOR:\n\n![image-20250219192840808](计算机科学记录/image-20250219192840808.png)\n\nXOR:\n\n![image-20250219192931677](计算机科学记录/image-20250219192931677.png)\n\n**算术逻辑单元(ALU)**\n\n半加器(处理1+1以内的运算)\n\n![image-20250219195726811](计算机科学记录/image-20250219195726811.png)\n\n全加器(处理1+1+1以内的运算)\n\n![image-20250219200002098](计算机科学记录/image-20250219200002098.png)\n\n锁存器:\n\n![](计算机科学记录/image-20250219203435390.png)\n\n门锁：\n\n![image-20250219203513305](计算机科学记录/image-20250219203513305.png)\n\n矩阵排列门锁构成寄存器。","source":"_posts/计算机科学记录.md","raw":"---\ntitle: 计算机科学学习记录\ndate: 2025-02-20\nupdated: 2025-02-20\ncategories: 计算机基础\n---\n\n**逻辑门的实现**\n\nNOT:![image-20250219192653645](计算机科学记录/image-20250219192653645.png)\n\nAND:\n\n![image-20250219192740802](计算机科学记录/image-20250219192740802.png)\n\nOR:\n\n![image-20250219192840808](计算机科学记录/image-20250219192840808.png)\n\nXOR:\n\n![image-20250219192931677](计算机科学记录/image-20250219192931677.png)\n\n**算术逻辑单元(ALU)**\n\n半加器(处理1+1以内的运算)\n\n![image-20250219195726811](计算机科学记录/image-20250219195726811.png)\n\n全加器(处理1+1+1以内的运算)\n\n![image-20250219200002098](计算机科学记录/image-20250219200002098.png)\n\n锁存器:\n\n![](计算机科学记录/image-20250219203435390.png)\n\n门锁：\n\n![image-20250219203513305](计算机科学记录/image-20250219203513305.png)\n\n矩阵排列门锁构成寄存器。","slug":"计算机科学记录","published":1,"comments":1,"layout":"post","photos":[],"_id":"cm7msa3e4000sm0ot2j8o9lae","content":"<p><strong>逻辑门的实现</strong></p>\n<p>NOT:<img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192653645.png\" alt=\"image-20250219192653645\"></p>\n<p>AND:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192740802.png\" alt=\"image-20250219192740802\"></p>\n<p>OR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192840808.png\" alt=\"image-20250219192840808\"></p>\n<p>XOR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192931677.png\" alt=\"image-20250219192931677\"></p>\n<p><strong>算术逻辑单元(ALU)</strong></p>\n<p>半加器(处理1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219195726811.png\" alt=\"image-20250219195726811\"></p>\n<p>全加器(处理1+1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219200002098.png\" alt=\"image-20250219200002098\"></p>\n<p>锁存器:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203435390.png\"></p>\n<p>门锁：</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203513305.png\" alt=\"image-20250219203513305\"></p>\n<p>矩阵排列门锁构成寄存器。</p>\n","excerpt":"","more":"<p><strong>逻辑门的实现</strong></p>\n<p>NOT:<img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192653645.png\" alt=\"image-20250219192653645\"></p>\n<p>AND:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192740802.png\" alt=\"image-20250219192740802\"></p>\n<p>OR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192840808.png\" alt=\"image-20250219192840808\"></p>\n<p>XOR:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219192931677.png\" alt=\"image-20250219192931677\"></p>\n<p><strong>算术逻辑单元(ALU)</strong></p>\n<p>半加器(处理1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219195726811.png\" alt=\"image-20250219195726811\"></p>\n<p>全加器(处理1+1+1以内的运算)</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219200002098.png\" alt=\"image-20250219200002098\"></p>\n<p>锁存器:</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203435390.png\"></p>\n<p>门锁：</p>\n<p><img src=\"/2025/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E8%AE%B0%E5%BD%95/image-20250219203513305.png\" alt=\"image-20250219203513305\"></p>\n<p>矩阵排列门锁构成寄存器。</p>\n"}],"PostAsset":[{"_id":"source/_posts/刷题日记2.26/image-20250226225152860.png","post":"cm7msa3dv000bm0otaaby174b","slug":"image-20250226225152860.png","modified":1,"renderable":0},{"_id":"source/_posts/刷题日记2.26/image-20250226225220869.png","post":"cm7msa3dv000bm0otaaby174b","slug":"image-20250226225220869.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250201135214019.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250201135214019.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207202641150.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250207202641150.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207203028138.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250207203028138.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207203153099.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250207203153099.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207211115238.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250207211115238.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207212537344.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250207212537344.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207222214122.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250207222214122.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250207230001660.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250207230001660.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250216221349436.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250216221349436.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250216222117731.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250216222117731.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250220105056954.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250220105056954.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250220122408100.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250220122408100.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250220123104283.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250220123104283.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250222224319340.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250222224319340.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250222224835797.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250222224835797.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250222225338830.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250222225338830.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223163956807.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250223163956807.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223191142600.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250223191142600.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223200310462.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250223200310462.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223201933145.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250223201933145.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/image-20250223201954533.png","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"image-20250223201954533.png","modified":1,"renderable":0},{"_id":"source/_posts/Java基础复盘/logo.jpg","post":"cm7msa3dx000dm0ot6yy9cnq4","slug":"logo.jpg","modified":1,"renderable":0},{"_id":"source/_posts/图片显示测试/image-20250201135214019.png","post":"cm7msa3e1000jm0ot47v0hkuk","slug":"image-20250201135214019.png","modified":1,"renderable":0},{"_id":"source/_posts/图片显示测试/image.png","post":"cm7msa3e1000jm0ot47v0hkuk","slug":"image.png","modified":1,"renderable":0},{"_id":"source/_posts/图片显示测试/logo.jpg","post":"cm7msa3e1000jm0ot47v0hkuk","slug":"logo.jpg","modified":1,"renderable":0},{"_id":"source/_posts/我的第一篇文章/logo.jpg","post":"cm7msa3e2000lm0ot25gm65b1","slug":"logo.jpg","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/1740148009384.jpg","post":"cm7msa3e3000nm0ot6ukc19nf","slug":"1740148009384.jpg","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250221224033621.png","post":"cm7msa3e3000nm0ot6ukc19nf","slug":"image-20250221224033621.png","modified":1,"renderable":0},{"_id":"source/_posts/编译原理/image-20250221230151097.png","post":"cm7msa3e3000nm0ot6ukc19nf","slug":"image-20250221230151097.png","modified":1,"renderable":0},{"_id":"source/_posts/操作系统/image-20250218154211332.png","post":"cm7msa3e3000qm0otf930464y","slug":"image-20250218154211332.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192411375.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219192411375.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192653645.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219192653645.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192740802.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219192740802.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192840808.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219192840808.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219192931677.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219192931677.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219195726811.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219195726811.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219200002098.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219200002098.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219203400181.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219203400181.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219203435390.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219203435390.png","modified":1,"renderable":0},{"_id":"source/_posts/计算机科学记录/image-20250219203513305.png","post":"cm7msa3e4000sm0ot2j8o9lae","slug":"image-20250219203513305.png","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cm7msa3e1000im0otholfhfp3","category_id":"cm7msa3dz000em0ot5ip59zpd","_id":"cm7msa3e3000om0ot6a6ngzi5"},{"post_id":"cm7msa3dv000bm0otaaby174b","category_id":"cm7msa3dz000em0ot5ip59zpd","_id":"cm7msa3e4000rm0ot4j4c2lef"},{"post_id":"cm7msa3dx000dm0ot6yy9cnq4","category_id":"cm7msa3e2000km0ot3j4jceuf","_id":"cm7msa3e4000tm0ot5q30cvm5"},{"post_id":"cm7msa3e0000gm0ot7tkp0nh4","category_id":"cm7msa3e3000pm0ot3f5c0unq","_id":"cm7msa3e5000wm0ot20y0014x"},{"post_id":"cm7msa3e1000jm0ot47v0hkuk","category_id":"cm7msa3e3000pm0ot3f5c0unq","_id":"cm7msa3e6000ym0othjchc6ns"},{"post_id":"cm7msa3e2000lm0ot25gm65b1","category_id":"cm7msa3e3000pm0ot3f5c0unq","_id":"cm7msa3e6000zm0ot6a4hhm0l"},{"post_id":"cm7msa3e3000nm0ot6ukc19nf","category_id":"cm7msa3e5000xm0ot7910dm1u","_id":"cm7msa3e60012m0otdw1v98ba"},{"post_id":"cm7msa3e3000qm0otf930464y","category_id":"cm7msa3e5000xm0ot7910dm1u","_id":"cm7msa3e60013m0otbgwa1rvf"},{"post_id":"cm7msa3e4000sm0ot2j8o9lae","category_id":"cm7msa3e5000xm0ot7910dm1u","_id":"cm7msa3e60014m0ot9ayu6jbb"}],"PostTag":[{"post_id":"cm7msa3dx000dm0ot6yy9cnq4","tag_id":"cm7msa3e0000hm0otbaoq5cu8","_id":"cm7msa3e3000mm0ot3jzi1zb6"}],"Tag":[{"name":"java基础","_id":"cm7msa3e0000hm0otbaoq5cu8"}]}}